{"ast":null,"code":"import MoveToTask from '../../../behaviors/moveto/MoveTo.js';\nimport TickTask from '../../../utils/ticktask/TickTask.js';\nimport CanMoveToTile from './CanMoveToTile.js';\nimport MoveToTile from './MoveToTile.js';\nimport MoveToward from './MoveToward.js';\nimport MoveToRandomNeighbor from './MoveToRandomNeighbor.js';\nimport GetValue from '../../../utils/object/GetValue.js';\n\nclass MoveTo extends TickTask {\n  constructor(miniBoard, config) {\n    super(miniBoard, config);\n    this.miniBoard = miniBoard;\n    this.scene = miniBoard.scene;\n    this.moveToTask = new MoveToTask(miniBoard, moveToTaskConfig);\n    this.resetFromJSON(config);\n    this.boot();\n  }\n\n  resetFromJSON(o) {\n    this.isRunning = GetValue(o, 'isRunning', false);\n    this.setEnable(GetValue(o, 'enable', true));\n    this.timeScale = GetValue(o, 'timeScale', 1);\n    this.setSpeed(GetValue(o, 'speed', 400));\n    this.destinationTileX = GetValue(o, 'destinationTileX', null);\n    this.destinationTileY = GetValue(o, 'destinationTileY', null);\n    this.destinationDirection = GetValue(o, 'destinationDirection', null);\n    this.lastMoveResult = GetValue(o, 'lastMoveResult', undefined);\n    return this;\n  }\n\n  toJSON() {\n    return {\n      isRunning: this.isRunning,\n      enable: this.enable,\n      timeScale: this.timeScale,\n      speed: this.speed,\n      moveableTest: this.moveableTestCallback,\n      moveableTestScope: this.moveableTestScope,\n      destinationTileX: this.destinationTileX,\n      destinationTileY: this.destinationTileY,\n      destinationDirection: this.destinationDirection,\n      lastMoveResult: this.lastMoveResult,\n      tickingMode: this.tickingMode\n    };\n  }\n\n  boot() {\n    super.boot();\n\n    if (this.miniBoard.once) {\n      // oops, bob object does not have event emitter\n      this.miniBoard.on('destroy', this.destroy, this);\n    }\n  }\n\n  shutdown() {\n    this.moveToTask.shutdown();\n    super.shutdown();\n    this.miniBoard = undefined;\n    this.scene = undefined;\n  }\n\n  destroy() {\n    this.shutdown();\n  }\n\n  startTicking() {\n    super.startTicking();\n    this.scene.events.on('update', this.update, this);\n  }\n\n  stopTicking() {\n    super.stopTicking();\n\n    if (this.scene) {\n      // Scene might be destoryed\n      this.scene.events.off('update', this.update, this);\n    }\n  }\n\n  set enable(value) {\n    this.moveToTask.setEnable(value);\n  }\n\n  get enable() {\n    return this.moveToTask.enable;\n  }\n\n  setEnable(e) {\n    if (e == undefined) {\n      e = true;\n    }\n\n    this.enable = e;\n    return this;\n  }\n\n  get timeScale() {\n    return this.moveToTask.timeScale;\n  }\n\n  set timeScale(value) {\n    this.moveToTask.timeScale = value;\n  }\n\n  set speed(value) {\n    this.moveToTask.setSpeed(value);\n  }\n\n  get speed() {\n    return this.moveToTask.speed;\n  }\n\n  setSpeed(speed) {\n    this.speed = speed;\n    return this;\n  }\n\n  pause() {\n    this.isRunning = false;\n    return this;\n  }\n\n  resume() {\n    this.isRunning = true;\n    return this;\n  }\n\n  stop() {\n    this.isRunning = false;\n    return this;\n  }\n  /** @private */\n\n\n  moveAlongLine(startX, startY, endX, endY) {\n    if (startX !== undefined) {\n      this.miniBoard.x = startX;\n    }\n\n    if (startY !== undefined) {\n      this.miniBoard.y = startY;\n    }\n\n    this.moveToTask.moveTo(endX, endY);\n    return this;\n  }\n\n  /** @private */\n  update(time, delta) {\n    if (!this.isRunning || !this.enable) {\n      return this;\n    }\n\n    var moveToTask = this.moveToTask;\n    moveToTask.update(time, delta);\n\n    if (!moveToTask.isRunning) {\n      this.complete();\n      return this;\n    }\n\n    return this;\n  }\n\n}\n\nconst moveToTaskConfig = {\n  tickingMode: 0\n};\nvar methods = {\n  canMoveTo: CanMoveToTile,\n  moveTo: MoveToTile,\n  moveToward: MoveToward,\n  moveToRandomNeighbor: MoveToRandomNeighbor\n};\nObject.assign(MoveTo.prototype, methods);\nexport default MoveTo;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/miniboard/moveto/MoveTo.js"],"names":["MoveToTask","TickTask","CanMoveToTile","MoveToTile","MoveToward","MoveToRandomNeighbor","GetValue","MoveTo","constructor","miniBoard","config","scene","moveToTask","moveToTaskConfig","resetFromJSON","boot","o","isRunning","setEnable","timeScale","setSpeed","destinationTileX","destinationTileY","destinationDirection","lastMoveResult","undefined","toJSON","enable","speed","moveableTest","moveableTestCallback","moveableTestScope","tickingMode","once","on","destroy","shutdown","startTicking","events","update","stopTicking","off","value","e","pause","resume","stop","moveAlongLine","startX","startY","endX","endY","x","y","moveTo","time","delta","complete","methods","canMoveTo","moveToward","moveToRandomNeighbor","Object","assign","prototype"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,qCAAvB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AAEA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AAEA,OAAOC,QAAP,MAAqB,mCAArB;;AAEA,MAAMC,MAAN,SAAqBN,QAArB,CAA8B;AAC1BO,EAAAA,WAAW,CAACC,SAAD,EAAYC,MAAZ,EAAoB;AAC3B,UAAMD,SAAN,EAAiBC,MAAjB;AAEA,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKE,KAAL,GAAaF,SAAS,CAACE,KAAvB;AACA,SAAKC,UAAL,GAAkB,IAAIZ,UAAJ,CAAeS,SAAf,EAA0BI,gBAA1B,CAAlB;AAEA,SAAKC,aAAL,CAAmBJ,MAAnB;AACA,SAAKK,IAAL;AACH;;AAEDD,EAAAA,aAAa,CAACE,CAAD,EAAI;AACb,SAAKC,SAAL,GAAiBX,QAAQ,CAACU,CAAD,EAAI,WAAJ,EAAiB,KAAjB,CAAzB;AACA,SAAKE,SAAL,CAAeZ,QAAQ,CAACU,CAAD,EAAI,QAAJ,EAAc,IAAd,CAAvB;AACA,SAAKG,SAAL,GAAiBb,QAAQ,CAACU,CAAD,EAAI,WAAJ,EAAiB,CAAjB,CAAzB;AACA,SAAKI,QAAL,CAAcd,QAAQ,CAACU,CAAD,EAAI,OAAJ,EAAa,GAAb,CAAtB;AACA,SAAKK,gBAAL,GAAwBf,QAAQ,CAACU,CAAD,EAAI,kBAAJ,EAAwB,IAAxB,CAAhC;AACA,SAAKM,gBAAL,GAAwBhB,QAAQ,CAACU,CAAD,EAAI,kBAAJ,EAAwB,IAAxB,CAAhC;AACA,SAAKO,oBAAL,GAA4BjB,QAAQ,CAACU,CAAD,EAAI,sBAAJ,EAA4B,IAA5B,CAApC;AACA,SAAKQ,cAAL,GAAsBlB,QAAQ,CAACU,CAAD,EAAI,gBAAJ,EAAsBS,SAAtB,CAA9B;AACA,WAAO,IAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WAAO;AACHT,MAAAA,SAAS,EAAE,KAAKA,SADb;AAEHU,MAAAA,MAAM,EAAE,KAAKA,MAFV;AAGHR,MAAAA,SAAS,EAAE,KAAKA,SAHb;AAIHS,MAAAA,KAAK,EAAE,KAAKA,KAJT;AAKHC,MAAAA,YAAY,EAAE,KAAKC,oBALhB;AAMHC,MAAAA,iBAAiB,EAAE,KAAKA,iBANrB;AAOHV,MAAAA,gBAAgB,EAAE,KAAKA,gBAPpB;AAQHC,MAAAA,gBAAgB,EAAE,KAAKA,gBARpB;AASHC,MAAAA,oBAAoB,EAAE,KAAKA,oBATxB;AAUHC,MAAAA,cAAc,EAAE,KAAKA,cAVlB;AAWHQ,MAAAA,WAAW,EAAE,KAAKA;AAXf,KAAP;AAaH;;AAEDjB,EAAAA,IAAI,GAAG;AACH,UAAMA,IAAN;;AACA,QAAI,KAAKN,SAAL,CAAewB,IAAnB,EAAyB;AAAE;AACvB,WAAKxB,SAAL,CAAeyB,EAAf,CAAkB,SAAlB,EAA6B,KAAKC,OAAlC,EAA2C,IAA3C;AACH;AACJ;;AAEDC,EAAAA,QAAQ,GAAG;AACP,SAAKxB,UAAL,CAAgBwB,QAAhB;AACA,UAAMA,QAAN;AACA,SAAK3B,SAAL,GAAiBgB,SAAjB;AACA,SAAKd,KAAL,GAAac,SAAb;AACH;;AAEDU,EAAAA,OAAO,GAAG;AACN,SAAKC,QAAL;AACH;;AAEDC,EAAAA,YAAY,GAAG;AACX,UAAMA,YAAN;AACA,SAAK1B,KAAL,CAAW2B,MAAX,CAAkBJ,EAAlB,CAAqB,QAArB,EAA+B,KAAKK,MAApC,EAA4C,IAA5C;AACH;;AAEDC,EAAAA,WAAW,GAAG;AACV,UAAMA,WAAN;;AACA,QAAI,KAAK7B,KAAT,EAAgB;AAAE;AACd,WAAKA,KAAL,CAAW2B,MAAX,CAAkBG,GAAlB,CAAsB,QAAtB,EAAgC,KAAKF,MAArC,EAA6C,IAA7C;AACH;AACJ;;AAED,MAAIZ,MAAJ,CAAWe,KAAX,EAAkB;AACd,SAAK9B,UAAL,CAAgBM,SAAhB,CAA0BwB,KAA1B;AACH;;AAED,MAAIf,MAAJ,GAAa;AACT,WAAO,KAAKf,UAAL,CAAgBe,MAAvB;AACH;;AAEDT,EAAAA,SAAS,CAACyB,CAAD,EAAI;AACT,QAAIA,CAAC,IAAIlB,SAAT,EAAoB;AAChBkB,MAAAA,CAAC,GAAG,IAAJ;AACH;;AACD,SAAKhB,MAAL,GAAcgB,CAAd;AACA,WAAO,IAAP;AACH;;AAED,MAAIxB,SAAJ,GAAgB;AACZ,WAAO,KAAKP,UAAL,CAAgBO,SAAvB;AACH;;AAED,MAAIA,SAAJ,CAAcuB,KAAd,EAAqB;AACjB,SAAK9B,UAAL,CAAgBO,SAAhB,GAA4BuB,KAA5B;AACH;;AAED,MAAId,KAAJ,CAAUc,KAAV,EAAiB;AACb,SAAK9B,UAAL,CAAgBQ,QAAhB,CAAyBsB,KAAzB;AACH;;AAED,MAAId,KAAJ,GAAY;AACR,WAAO,KAAKhB,UAAL,CAAgBgB,KAAvB;AACH;;AAEDR,EAAAA,QAAQ,CAACQ,KAAD,EAAQ;AACZ,SAAKA,KAAL,GAAaA,KAAb;AACA,WAAO,IAAP;AACH;;AAEDgB,EAAAA,KAAK,GAAG;AACJ,SAAK3B,SAAL,GAAiB,KAAjB;AACA,WAAO,IAAP;AACH;;AAED4B,EAAAA,MAAM,GAAG;AACL,SAAK5B,SAAL,GAAiB,IAAjB;AACA,WAAO,IAAP;AACH;;AAED6B,EAAAA,IAAI,GAAG;AACH,SAAK7B,SAAL,GAAiB,KAAjB;AACA,WAAO,IAAP;AACH;AAED;;;AACA8B,EAAAA,aAAa,CAACC,MAAD,EAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6B;AACtC,QAAIH,MAAM,KAAKvB,SAAf,EAA0B;AACtB,WAAKhB,SAAL,CAAe2C,CAAf,GAAmBJ,MAAnB;AACH;;AACD,QAAIC,MAAM,KAAKxB,SAAf,EAA0B;AACtB,WAAKhB,SAAL,CAAe4C,CAAf,GAAmBJ,MAAnB;AACH;;AACD,SAAKrC,UAAL,CAAgB0C,MAAhB,CAAuBJ,IAAvB,EAA6BC,IAA7B;AACA,WAAO,IAAP;AACH;;AAED;AACAZ,EAAAA,MAAM,CAACgB,IAAD,EAAOC,KAAP,EAAc;AAChB,QAAK,CAAC,KAAKvC,SAAP,IAAsB,CAAC,KAAKU,MAAhC,EAAyC;AACrC,aAAO,IAAP;AACH;;AAED,QAAIf,UAAU,GAAG,KAAKA,UAAtB;AACAA,IAAAA,UAAU,CAAC2B,MAAX,CAAkBgB,IAAlB,EAAwBC,KAAxB;;AACA,QAAI,CAAC5C,UAAU,CAACK,SAAhB,EAA2B;AACvB,WAAKwC,QAAL;AACA,aAAO,IAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAnJyB;;AAsJ9B,MAAM5C,gBAAgB,GAAG;AACrBmB,EAAAA,WAAW,EAAE;AADQ,CAAzB;AAIA,IAAI0B,OAAO,GAAG;AACVC,EAAAA,SAAS,EAAEzD,aADD;AAEVoD,EAAAA,MAAM,EAAEnD,UAFE;AAGVyD,EAAAA,UAAU,EAAExD,UAHF;AAIVyD,EAAAA,oBAAoB,EAAExD;AAJZ,CAAd;AAMAyD,MAAM,CAACC,MAAP,CACIxD,MAAM,CAACyD,SADX,EAEIN,OAFJ;AAMA,eAAenD,MAAf","sourcesContent":["import MoveToTask from '../../../behaviors/moveto/MoveTo.js';\r\nimport TickTask from '../../../utils/ticktask/TickTask.js';\r\n\r\nimport CanMoveToTile from './CanMoveToTile.js';\r\nimport MoveToTile from './MoveToTile.js';\r\nimport MoveToward from './MoveToward.js';\r\nimport MoveToRandomNeighbor from './MoveToRandomNeighbor.js';\r\n\r\nimport GetValue from '../../../utils/object/GetValue.js';\r\n\r\nclass MoveTo extends TickTask {\r\n    constructor(miniBoard, config) {\r\n        super(miniBoard, config);\r\n\r\n        this.miniBoard = miniBoard;\r\n        this.scene = miniBoard.scene;\r\n        this.moveToTask = new MoveToTask(miniBoard, moveToTaskConfig);\r\n\r\n        this.resetFromJSON(config);\r\n        this.boot();\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        this.isRunning = GetValue(o, 'isRunning', false);\r\n        this.setEnable(GetValue(o, 'enable', true));\r\n        this.timeScale = GetValue(o, 'timeScale', 1);\r\n        this.setSpeed(GetValue(o, 'speed', 400));\r\n        this.destinationTileX = GetValue(o, 'destinationTileX', null);\r\n        this.destinationTileY = GetValue(o, 'destinationTileY', null);\r\n        this.destinationDirection = GetValue(o, 'destinationDirection', null);\r\n        this.lastMoveResult = GetValue(o, 'lastMoveResult', undefined);\r\n        return this;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            isRunning: this.isRunning,\r\n            enable: this.enable,\r\n            timeScale: this.timeScale,\r\n            speed: this.speed,\r\n            moveableTest: this.moveableTestCallback,\r\n            moveableTestScope: this.moveableTestScope,\r\n            destinationTileX: this.destinationTileX,\r\n            destinationTileY: this.destinationTileY,\r\n            destinationDirection: this.destinationDirection,\r\n            lastMoveResult: this.lastMoveResult,\r\n            tickingMode: this.tickingMode\r\n        };\r\n    }\r\n\r\n    boot() {\r\n        super.boot();\r\n        if (this.miniBoard.once) { // oops, bob object does not have event emitter\r\n            this.miniBoard.on('destroy', this.destroy, this);\r\n        }\r\n    }\r\n\r\n    shutdown() {\r\n        this.moveToTask.shutdown();\r\n        super.shutdown();\r\n        this.miniBoard = undefined;\r\n        this.scene = undefined;\r\n    }\r\n\r\n    destroy() {\r\n        this.shutdown();\r\n    }\r\n\r\n    startTicking() {\r\n        super.startTicking();\r\n        this.scene.events.on('update', this.update, this);\r\n    }\r\n\r\n    stopTicking() {\r\n        super.stopTicking();\r\n        if (this.scene) { // Scene might be destoryed\r\n            this.scene.events.off('update', this.update, this);\r\n        }\r\n    }\r\n\r\n    set enable(value) {\r\n        this.moveToTask.setEnable(value);\r\n    }\r\n\r\n    get enable() {\r\n        return this.moveToTask.enable;\r\n    }\r\n\r\n    setEnable(e) {\r\n        if (e == undefined) {\r\n            e = true;\r\n        }\r\n        this.enable = e;\r\n        return this;\r\n    }\r\n\r\n    get timeScale() {\r\n        return this.moveToTask.timeScale;\r\n    }\r\n\r\n    set timeScale(value) {\r\n        this.moveToTask.timeScale = value;\r\n    }\r\n\r\n    set speed(value) {\r\n        this.moveToTask.setSpeed(value);\r\n    }\r\n\r\n    get speed() {\r\n        return this.moveToTask.speed;\r\n    }\r\n\r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n        return this;\r\n    }\r\n\r\n    pause() {\r\n        this.isRunning = false;\r\n        return this;\r\n    }\r\n\r\n    resume() {\r\n        this.isRunning = true;\r\n        return this;\r\n    }\r\n\r\n    stop() {\r\n        this.isRunning = false;\r\n        return this;\r\n    }\r\n\r\n    /** @private */\r\n    moveAlongLine(startX, startY, endX, endY) {\r\n        if (startX !== undefined) {\r\n            this.miniBoard.x = startX;\r\n        }\r\n        if (startY !== undefined) {\r\n            this.miniBoard.y = startY;\r\n        }\r\n        this.moveToTask.moveTo(endX, endY);\r\n        return this;\r\n    };\r\n\r\n    /** @private */\r\n    update(time, delta) {\r\n        if ((!this.isRunning) || (!this.enable)) {\r\n            return this;\r\n        }\r\n\r\n        var moveToTask = this.moveToTask;\r\n        moveToTask.update(time, delta);\r\n        if (!moveToTask.isRunning) {\r\n            this.complete();\r\n            return this;\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nconst moveToTaskConfig = {\r\n    tickingMode: 0\r\n};\r\n\r\nvar methods = {\r\n    canMoveTo: CanMoveToTile,\r\n    moveTo: MoveToTile,\r\n    moveToward: MoveToward,\r\n    moveToRandomNeighbor: MoveToRandomNeighbor,\r\n};\r\nObject.assign(\r\n    MoveTo.prototype,\r\n    methods\r\n);\r\n\r\n\r\nexport default MoveTo;"]},"metadata":{},"sourceType":"module"}