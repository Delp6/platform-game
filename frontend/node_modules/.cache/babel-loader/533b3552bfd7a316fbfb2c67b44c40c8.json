{"ast":null,"code":"import AngleNormalize from '../../../utils/math/angle/Normalize.js';\nimport Equal from '../../../utils/math/fuzzy/Equal.js';\n\nvar IsAngleInCone = function (chessA, chessB, face, cone) {\n  var tileXYA = this.chessToTileXYZ(chessA);\n  var tileXYB = this.chessToTileXYZ(chessB);\n  var targetAngle = this.angleBetween(tileXYA, tileXYB); // -PI~PI\n\n  targetAngle = AngleNormalize(targetAngle); // 0~2PI\n\n  var deltaAngle = Math.abs(targetAngle - face);\n  deltaAngle = Math.min(deltaAngle, PI2 - deltaAngle);\n  var halfCone = cone / 2;\n  return Equal(deltaAngle, halfCone) || deltaAngle < halfCone;\n};\n\nconst PI = Math.PI;\nconst PI2 = Math.PI * 2;\nexport default IsAngleInCone;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/board/worldposition/IsAngleInCone.js"],"names":["AngleNormalize","Equal","IsAngleInCone","chessA","chessB","face","cone","tileXYA","chessToTileXYZ","tileXYB","targetAngle","angleBetween","deltaAngle","Math","abs","min","PI2","halfCone","PI"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,wCAA3B;AACA,OAAOC,KAAP,MAAkB,oCAAlB;;AAEA,IAAIC,aAAa,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsC;AACtD,MAAIC,OAAO,GAAG,KAAKC,cAAL,CAAoBL,MAApB,CAAd;AACA,MAAIM,OAAO,GAAG,KAAKD,cAAL,CAAoBJ,MAApB,CAAd;AACA,MAAIM,WAAW,GAAG,KAAKC,YAAL,CAAkBJ,OAAlB,EAA2BE,OAA3B,CAAlB,CAHsD,CAGC;;AACvDC,EAAAA,WAAW,GAAGV,cAAc,CAACU,WAAD,CAA5B,CAJsD,CAIX;;AAC3C,MAAIE,UAAU,GAAGC,IAAI,CAACC,GAAL,CAASJ,WAAW,GAAGL,IAAvB,CAAjB;AACAO,EAAAA,UAAU,GAAGC,IAAI,CAACE,GAAL,CAASH,UAAT,EAAqBI,GAAG,GAAGJ,UAA3B,CAAb;AACA,MAAIK,QAAQ,GAAGX,IAAI,GAAG,CAAtB;AACA,SAAOL,KAAK,CAACW,UAAD,EAAaK,QAAb,CAAL,IAAgCL,UAAU,GAAGK,QAApD;AACH,CATD;;AAWA,MAAMC,EAAE,GAAGL,IAAI,CAACK,EAAhB;AACA,MAAMF,GAAG,GAAGH,IAAI,CAACK,EAAL,GAAU,CAAtB;AACA,eAAehB,aAAf","sourcesContent":["import AngleNormalize from '../../../utils/math/angle/Normalize.js';\r\nimport Equal from '../../../utils/math/fuzzy/Equal.js';\r\n\r\nvar IsAngleInCone = function (chessA, chessB, face, cone) {\r\n    var tileXYA = this.chessToTileXYZ(chessA);\r\n    var tileXYB = this.chessToTileXYZ(chessB);\r\n    var targetAngle = this.angleBetween(tileXYA, tileXYB); // -PI~PI\r\n    targetAngle = AngleNormalize(targetAngle); // 0~2PI\r\n    var deltaAngle = Math.abs(targetAngle - face);\r\n    deltaAngle = Math.min(deltaAngle, PI2 - deltaAngle);\r\n    var halfCone = cone / 2;\r\n    return Equal(deltaAngle, halfCone) || (deltaAngle < halfCone);\r\n}\r\n\r\nconst PI = Math.PI;\r\nconst PI2 = Math.PI * 2;\r\nexport default IsAngleInCone;"]},"metadata":{},"sourceType":"module"}