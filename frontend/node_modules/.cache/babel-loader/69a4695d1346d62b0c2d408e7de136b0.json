{"ast":null,"code":"import Base from './Base.js';\nimport Methods from './Methods.js';\n\nclass ContainerLite extends Base {\n  constructor(scene, x, y, width, height, children) {\n    super(scene, x, y, width, height);\n    this.type = 'rexContainerLite';\n    this.isRexContainerLite = true;\n    this.syncChildrenEnable = true;\n    this._active = true;\n    this._mask = null;\n    this._scrollFactorX = 1;\n    this._scrollFactorY = 1;\n\n    if (children) {\n      this.add(children);\n    }\n  }\n\n  destroy(fromScene) {\n    //  This Game Object has already been destroyed\n    if (!this.scene) {\n      return;\n    }\n\n    this.syncChildrenEnable = false; // Don't sync properties changing anymore\n\n    super.destroy(fromScene);\n  }\n\n  resize(width, height) {\n    this.setSize(width, height);\n    return this;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  set x(value) {\n    if (this._x === value) {\n      return;\n    }\n\n    this._x = value;\n    this.syncPosition();\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  set y(value) {\n    if (this._y === value) {\n      return;\n    }\n\n    this._y = value;\n    this.syncPosition();\n  } // Override\n\n\n  get rotation() {\n    return super.rotation;\n  }\n\n  set rotation(value) {\n    if (this.rotation === value) {\n      return;\n    }\n\n    super.rotation = value;\n    this.syncPosition();\n  } // Override\n\n\n  get scaleX() {\n    return super.scaleX;\n  }\n\n  set scaleX(value) {\n    if (this.scaleX === value) {\n      return;\n    }\n\n    super.scaleX = value;\n    this.syncPosition();\n  } // Override\n\n\n  get scaleY() {\n    return super.scaleY;\n  }\n\n  set scaleY(value) {\n    if (this.scaleY === value) {\n      return;\n    }\n\n    super.scaleY = value;\n    this.syncPosition();\n  } // Override\n\n\n  get flipX() {\n    return super.flipX;\n  }\n\n  set flipX(value) {\n    if (super.flipX === value) {\n      return;\n    }\n\n    super.flipX = value;\n    this.syncPosition();\n  } // Override\n\n\n  get flipY() {\n    return super.flipY;\n  }\n\n  set flipY(value) {\n    if (super.flipY === value) {\n      return;\n    }\n\n    super.flipY = value;\n    this.syncPosition();\n  } // Override\n\n\n  get visible() {\n    return super.visible;\n  }\n\n  set visible(value) {\n    if (super.visible === value) {\n      return;\n    }\n\n    super.visible = value;\n    this.syncVisible();\n  } // Override\n\n\n  get alpha() {\n    return super.alpha;\n  }\n\n  set alpha(value) {\n    if (super.alpha === value) {\n      return;\n    }\n\n    super.alpha = value;\n    this.syncAlpha();\n  } // Override\n\n\n  get active() {\n    return this._active;\n  }\n\n  set active(value) {\n    if (this._active === value) {\n      return;\n    }\n\n    this._active = value;\n    this.syncActive();\n  } // Override\n\n\n  get mask() {\n    return this._mask;\n  }\n\n  set mask(mask) {\n    if (this._mask === mask) {\n      return;\n    }\n\n    this._mask = mask;\n    this.syncMask();\n  } // Override\n\n\n  get scrollFactorX() {\n    return this._scrollFactorX;\n  }\n\n  set scrollFactorX(value) {\n    if (this._scrollFactorX === value) {\n      return;\n    }\n\n    this._scrollFactorX = value;\n    this.syncScrollFactor();\n  }\n\n  get scrollFactorY() {\n    return this._scrollFactorY;\n  }\n\n  set scrollFactorY(value) {\n    if (this._scrollFactorY === value) {\n      return;\n    }\n\n    this._scrollFactorY = value;\n    this.syncScrollFactor();\n  } // Compatiable with container plugin\n\n\n  get list() {\n    return this.children;\n  }\n\n}\n\nObject.assign(ContainerLite.prototype, Methods);\nexport default ContainerLite;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/gameobjects/containerlite/ContainerLite.js"],"names":["Base","Methods","ContainerLite","constructor","scene","x","y","width","height","children","type","isRexContainerLite","syncChildrenEnable","_active","_mask","_scrollFactorX","_scrollFactorY","add","destroy","fromScene","resize","setSize","_x","value","syncPosition","_y","rotation","scaleX","scaleY","flipX","flipY","visible","syncVisible","alpha","syncAlpha","active","syncActive","mask","syncMask","scrollFactorX","syncScrollFactor","scrollFactorY","list","Object","assign","prototype"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,cAApB;;AAEA,MAAMC,aAAN,SAA4BF,IAA5B,CAAiC;AAC7BG,EAAAA,WAAW,CAACC,KAAD,EAAQC,CAAR,EAAWC,CAAX,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AAC9C,UAAML,KAAN,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,KAAnB,EAA0BC,MAA1B;AACA,SAAKE,IAAL,GAAY,kBAAZ;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AAEA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,cAAL,GAAsB,CAAtB;AACA,SAAKC,cAAL,GAAsB,CAAtB;;AAEA,QAAIP,QAAJ,EAAc;AACV,WAAKQ,GAAL,CAASR,QAAT;AACH;AACJ;;AAEDS,EAAAA,OAAO,CAACC,SAAD,EAAY;AACf;AACA,QAAI,CAAC,KAAKf,KAAV,EAAiB;AACb;AACH;;AAED,SAAKQ,kBAAL,GAA0B,KAA1B,CANe,CAMkB;;AACjC,UAAMM,OAAN,CAAcC,SAAd;AACH;;AAEDC,EAAAA,MAAM,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAClB,SAAKa,OAAL,CAAad,KAAb,EAAoBC,MAApB;AACA,WAAO,IAAP;AACH;;AAED,MAAIH,CAAJ,GAAQ;AACJ,WAAO,KAAKiB,EAAZ;AACH;;AAED,MAAIjB,CAAJ,CAAMkB,KAAN,EAAa;AACT,QAAI,KAAKD,EAAL,KAAYC,KAAhB,EAAuB;AACnB;AACH;;AACD,SAAKD,EAAL,GAAUC,KAAV;AAEA,SAAKC,YAAL;AACH;;AAED,MAAIlB,CAAJ,GAAQ;AACJ,WAAO,KAAKmB,EAAZ;AACH;;AAED,MAAInB,CAAJ,CAAMiB,KAAN,EAAa;AACT,QAAI,KAAKE,EAAL,KAAYF,KAAhB,EAAuB;AACnB;AACH;;AACD,SAAKE,EAAL,GAAUF,KAAV;AAEA,SAAKC,YAAL;AACH,GAxD4B,CA0D7B;;;AACA,MAAIE,QAAJ,GAAe;AACX,WAAO,MAAMA,QAAb;AACH;;AAED,MAAIA,QAAJ,CAAaH,KAAb,EAAoB;AAChB,QAAI,KAAKG,QAAL,KAAkBH,KAAtB,EAA6B;AACzB;AACH;;AACD,UAAMG,QAAN,GAAiBH,KAAjB;AAEA,SAAKC,YAAL;AACH,GAtE4B,CAwE7B;;;AACA,MAAIG,MAAJ,GAAa;AACT,WAAO,MAAMA,MAAb;AACH;;AAED,MAAIA,MAAJ,CAAWJ,KAAX,EAAkB;AACd,QAAI,KAAKI,MAAL,KAAgBJ,KAApB,EAA2B;AACvB;AACH;;AACD,UAAMI,MAAN,GAAeJ,KAAf;AAEA,SAAKC,YAAL;AACH,GApF4B,CAsF7B;;;AACA,MAAII,MAAJ,GAAa;AACT,WAAO,MAAMA,MAAb;AACH;;AAED,MAAIA,MAAJ,CAAWL,KAAX,EAAkB;AACd,QAAI,KAAKK,MAAL,KAAgBL,KAApB,EAA2B;AACvB;AACH;;AACD,UAAMK,MAAN,GAAeL,KAAf;AAEA,SAAKC,YAAL;AACH,GAlG4B,CAoG7B;;;AACA,MAAIK,KAAJ,GAAY;AACR,WAAO,MAAMA,KAAb;AACH;;AAED,MAAIA,KAAJ,CAAUN,KAAV,EAAiB;AACb,QAAI,MAAMM,KAAN,KAAgBN,KAApB,EAA2B;AACvB;AACH;;AACD,UAAMM,KAAN,GAAcN,KAAd;AAEA,SAAKC,YAAL;AACH,GAhH4B,CAkH7B;;;AACA,MAAIM,KAAJ,GAAY;AACR,WAAO,MAAMA,KAAb;AACH;;AAED,MAAIA,KAAJ,CAAUP,KAAV,EAAiB;AACb,QAAI,MAAMO,KAAN,KAAgBP,KAApB,EAA2B;AACvB;AACH;;AACD,UAAMO,KAAN,GAAcP,KAAd;AAEA,SAAKC,YAAL;AACH,GA9H4B,CAgI7B;;;AACA,MAAIO,OAAJ,GAAc;AACV,WAAO,MAAMA,OAAb;AACH;;AAED,MAAIA,OAAJ,CAAYR,KAAZ,EAAmB;AACf,QAAI,MAAMQ,OAAN,KAAkBR,KAAtB,EAA6B;AACzB;AACH;;AACD,UAAMQ,OAAN,GAAgBR,KAAhB;AAEA,SAAKS,WAAL;AACH,GA5I4B,CA8I7B;;;AACA,MAAIC,KAAJ,GAAY;AACR,WAAO,MAAMA,KAAb;AACH;;AAED,MAAIA,KAAJ,CAAUV,KAAV,EAAiB;AACb,QAAI,MAAMU,KAAN,KAAgBV,KAApB,EAA2B;AACvB;AACH;;AACD,UAAMU,KAAN,GAAcV,KAAd;AAEA,SAAKW,SAAL;AACH,GA1J4B,CA4J7B;;;AACA,MAAIC,MAAJ,GAAa;AACT,WAAO,KAAKtB,OAAZ;AACH;;AAED,MAAIsB,MAAJ,CAAWZ,KAAX,EAAkB;AACd,QAAI,KAAKV,OAAL,KAAiBU,KAArB,EAA4B;AACxB;AACH;;AACD,SAAKV,OAAL,GAAeU,KAAf;AAEA,SAAKa,UAAL;AACH,GAxK4B,CA0K7B;;;AACA,MAAIC,IAAJ,GAAW;AACP,WAAO,KAAKvB,KAAZ;AACH;;AACD,MAAIuB,IAAJ,CAASA,IAAT,EAAe;AACX,QAAI,KAAKvB,KAAL,KAAeuB,IAAnB,EAAyB;AACrB;AACH;;AACD,SAAKvB,KAAL,GAAauB,IAAb;AAEA,SAAKC,QAAL;AACH,GArL4B,CAuL7B;;;AACA,MAAIC,aAAJ,GAAoB;AAChB,WAAO,KAAKxB,cAAZ;AACH;;AAED,MAAIwB,aAAJ,CAAkBhB,KAAlB,EAAyB;AACrB,QAAI,KAAKR,cAAL,KAAwBQ,KAA5B,EAAmC;AAC/B;AACH;;AAED,SAAKR,cAAL,GAAsBQ,KAAtB;AACA,SAAKiB,gBAAL;AACH;;AACD,MAAIC,aAAJ,GAAoB;AAChB,WAAO,KAAKzB,cAAZ;AACH;;AAED,MAAIyB,aAAJ,CAAkBlB,KAAlB,EAAyB;AACrB,QAAI,KAAKP,cAAL,KAAwBO,KAA5B,EAAmC;AAC/B;AACH;;AAED,SAAKP,cAAL,GAAsBO,KAAtB;AACA,SAAKiB,gBAAL;AACH,GA/M4B,CAiN7B;;;AACA,MAAIE,IAAJ,GAAW;AACP,WAAO,KAAKjC,QAAZ;AACH;;AApN4B;;AAuNjCkC,MAAM,CAACC,MAAP,CACI1C,aAAa,CAAC2C,SADlB,EAEI5C,OAFJ;AAKA,eAAeC,aAAf","sourcesContent":["import Base from './Base.js';\r\nimport Methods from './Methods.js';\r\n\r\nclass ContainerLite extends Base {\r\n    constructor(scene, x, y, width, height, children) {\r\n        super(scene, x, y, width, height);\r\n        this.type = 'rexContainerLite';\r\n        this.isRexContainerLite = true;\r\n        this.syncChildrenEnable = true;\r\n\r\n        this._active = true;\r\n        this._mask = null;\r\n        this._scrollFactorX = 1;\r\n        this._scrollFactorY = 1;\r\n\r\n        if (children) {\r\n            this.add(children);\r\n        }\r\n    }\r\n\r\n    destroy(fromScene) {\r\n        //  This Game Object has already been destroyed\r\n        if (!this.scene) {\r\n            return;\r\n        }\r\n\r\n        this.syncChildrenEnable = false; // Don't sync properties changing anymore\r\n        super.destroy(fromScene);\r\n    }\r\n\r\n    resize(width, height) {\r\n        this.setSize(width, height);\r\n        return this;\r\n    }\r\n\r\n    get x() {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value) {\r\n        if (this._x === value) {\r\n            return;\r\n        }\r\n        this._x = value;\r\n\r\n        this.syncPosition();\r\n    }\r\n\r\n    get y() {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value) {\r\n        if (this._y === value) {\r\n            return;\r\n        }\r\n        this._y = value;\r\n\r\n        this.syncPosition();\r\n    }\r\n\r\n    // Override\r\n    get rotation() {\r\n        return super.rotation;\r\n    }\r\n\r\n    set rotation(value) {\r\n        if (this.rotation === value) {\r\n            return;\r\n        }\r\n        super.rotation = value;\r\n\r\n        this.syncPosition();\r\n    }\r\n\r\n    // Override\r\n    get scaleX() {\r\n        return super.scaleX;\r\n    }\r\n\r\n    set scaleX(value) {\r\n        if (this.scaleX === value) {\r\n            return;\r\n        }\r\n        super.scaleX = value;\r\n\r\n        this.syncPosition();\r\n    }\r\n\r\n    // Override\r\n    get scaleY() {\r\n        return super.scaleY;\r\n    }\r\n\r\n    set scaleY(value) {\r\n        if (this.scaleY === value) {\r\n            return;\r\n        }\r\n        super.scaleY = value;\r\n\r\n        this.syncPosition();\r\n    }\r\n\r\n    // Override\r\n    get flipX() {\r\n        return super.flipX;\r\n    }\r\n\r\n    set flipX(value) {\r\n        if (super.flipX === value) {\r\n            return;\r\n        }\r\n        super.flipX = value;\r\n\r\n        this.syncPosition();\r\n    }\r\n\r\n    // Override\r\n    get flipY() {\r\n        return super.flipY;\r\n    }\r\n\r\n    set flipY(value) {\r\n        if (super.flipY === value) {\r\n            return;\r\n        }\r\n        super.flipY = value;\r\n\r\n        this.syncPosition();\r\n    }\r\n\r\n    // Override\r\n    get visible() {\r\n        return super.visible;\r\n    }\r\n\r\n    set visible(value) {\r\n        if (super.visible === value) {\r\n            return;\r\n        }\r\n        super.visible = value;\r\n\r\n        this.syncVisible();\r\n    }\r\n\r\n    // Override\r\n    get alpha() {\r\n        return super.alpha;\r\n    }\r\n\r\n    set alpha(value) {\r\n        if (super.alpha === value) {\r\n            return;\r\n        }\r\n        super.alpha = value;\r\n\r\n        this.syncAlpha();\r\n    }\r\n\r\n    // Override\r\n    get active() {\r\n        return this._active;\r\n    }\r\n\r\n    set active(value) {\r\n        if (this._active === value) {\r\n            return;\r\n        }\r\n        this._active = value;\r\n\r\n        this.syncActive();\r\n    }\r\n\r\n    // Override\r\n    get mask() {\r\n        return this._mask;\r\n    }\r\n    set mask(mask) {\r\n        if (this._mask === mask) {\r\n            return;\r\n        }\r\n        this._mask = mask;\r\n\r\n        this.syncMask();\r\n    }\r\n\r\n    // Override\r\n    get scrollFactorX() {\r\n        return this._scrollFactorX;\r\n    }\r\n\r\n    set scrollFactorX(value) {\r\n        if (this._scrollFactorX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scrollFactorX = value;\r\n        this.syncScrollFactor();\r\n    }\r\n    get scrollFactorY() {\r\n        return this._scrollFactorY;\r\n    }\r\n\r\n    set scrollFactorY(value) {\r\n        if (this._scrollFactorY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scrollFactorY = value;\r\n        this.syncScrollFactor();\r\n    }\r\n\r\n    // Compatiable with container plugin\r\n    get list() {\r\n        return this.children;\r\n    }\r\n}\r\n\r\nObject.assign(\r\n    ContainerLite.prototype,\r\n    Methods\r\n);\r\n\r\nexport default ContainerLite;"]},"metadata":{},"sourceType":"module"}