{"ast":null,"code":"import DirectionToDeltaTileXY from './DirectionToDeltaTileXY.js';\nimport GetParity from './GetParity.js';\nimport { cr2cube, cube2cr } from './CubeTransfer.js';\n\nvar GetTileXAtDirection = function (tileX, tileY, direction, distance, out) {\n  if (out === undefined) {\n    out = {};\n  } else if (out === true) {\n    out = globTileXY;\n  }\n\n  if (distance === 1) {\n    // Neighbor\n    var parity = GetParity(this.mode, tileX, tileY);\n    out.x = tileX + DirectionToDeltaTileXY[this.mode][parity][direction][0];\n    out.y = tileY + DirectionToDeltaTileXY[this.mode][parity][direction][1];\n  } else if (distance === 0) {\n    out.x = tileX;\n    out.y = tileY;\n  } else {\n    var cubeXYZ = cr2cube(this.mode, tileX, tileY, true);\n    var newCubeX, newCubeY, newCubeZ;\n\n    switch (direction) {\n      case 1:\n        newCubeX = cubeXYZ.x;\n        newCubeY = cubeXYZ.y - distance;\n        newCubeZ = cubeXYZ.z + distance;\n        break;\n\n      case 2:\n        newCubeX = cubeXYZ.x - distance;\n        newCubeY = cubeXYZ.y;\n        newCubeZ = cubeXYZ.z + distance;\n        break;\n\n      case 3:\n        newCubeX = cubeXYZ.x - distance;\n        newCubeY = cubeXYZ.y + distance;\n        newCubeZ = cubeXYZ.z;\n        break;\n\n      case 4:\n        newCubeX = cubeXYZ.x;\n        newCubeY = cubeXYZ.y + distance;\n        newCubeZ = cubeXYZ.z - distance;\n        break;\n\n      case 5:\n        newCubeX = cubeXYZ.x + distance;\n        newCubeY = cubeXYZ.y;\n        newCubeZ = cubeXYZ.z - distance;\n        break;\n\n      default:\n        newCubeX = cubeXYZ.x + distance;\n        newCubeY = cubeXYZ.y - distance;\n        newCubeZ = cubeXYZ.z;\n        break;\n    }\n\n    cube2cr(this.mode, newCubeX, newCubeY, newCubeZ, out);\n  }\n\n  return out;\n};\n\nvar globTileXY = {};\nexport default GetTileXAtDirection;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/utils/grid/hexagon/GetTileXYAtDirection.js"],"names":["DirectionToDeltaTileXY","GetParity","cr2cube","cube2cr","GetTileXAtDirection","tileX","tileY","direction","distance","out","undefined","globTileXY","parity","mode","x","y","cubeXYZ","newCubeX","newCubeY","newCubeZ","z"],"mappings":"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","sourcesContent":["import DirectionToDeltaTileXY from './DirectionToDeltaTileXY.js';\r\nimport GetParity from './GetParity.js';\r\nimport {\r\n    cr2cube,\r\n    cube2cr\r\n} from './CubeTransfer.js';\r\n\r\nvar GetTileXAtDirection = function (tileX, tileY, direction, distance, out) {\r\n    if (out === undefined) {\r\n        out = {};\r\n    } else if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    if (distance === 1) { // Neighbor\r\n        var parity = GetParity(this.mode, tileX, tileY);\r\n        out.x = tileX + DirectionToDeltaTileXY[this.mode][parity][direction][0];\r\n        out.y = tileY + DirectionToDeltaTileXY[this.mode][parity][direction][1];\r\n    } else if (distance === 0) {\r\n        out.x = tileX;\r\n        out.y = tileY;\r\n    } else {\r\n        var cubeXYZ = cr2cube(this.mode, tileX, tileY, true);\r\n        var newCubeX, newCubeY, newCubeZ;\r\n        switch (direction) {\r\n            case 1:\r\n                newCubeX = cubeXYZ.x;\r\n                newCubeY = cubeXYZ.y - distance;\r\n                newCubeZ = cubeXYZ.z + distance;\r\n                break;\r\n            case 2:\r\n                newCubeX = cubeXYZ.x - distance;\r\n                newCubeY = cubeXYZ.y;\r\n                newCubeZ = cubeXYZ.z + distance;\r\n                break;\r\n            case 3:\r\n                newCubeX = cubeXYZ.x - distance;\r\n                newCubeY = cubeXYZ.y + distance;\r\n                newCubeZ = cubeXYZ.z;\r\n                break;\r\n            case 4:\r\n                newCubeX = cubeXYZ.x;\r\n                newCubeY = cubeXYZ.y + distance;\r\n                newCubeZ = cubeXYZ.z - distance;\r\n                break;\r\n            case 5:\r\n                newCubeX = cubeXYZ.x + distance;\r\n                newCubeY = cubeXYZ.y;\r\n                newCubeZ = cubeXYZ.z - distance;\r\n                break;\r\n            default:\r\n                newCubeX = cubeXYZ.x + distance;\r\n                newCubeY = cubeXYZ.y - distance;\r\n                newCubeZ = cubeXYZ.z;\r\n                break;\r\n        }\r\n        cube2cr(this.mode, newCubeX, newCubeY, newCubeZ, out);\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\nvar globTileXY = {};\r\n\r\nexport default GetTileXAtDirection;"]},"metadata":{},"sourceType":"module"}