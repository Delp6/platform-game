{"ast":null,"code":"import TickTask from '../../utils/ticktask/TickTask.js';\nimport GetSceneObject from '../../utils/system/GetSceneObject.js';\nconst GetValue = Phaser.Utils.Objects.GetValue;\nconst DistanceBetween = Phaser.Math.Distance.Between;\nconst Lerp = Phaser.Math.Linear;\nconst AngleBetween = Phaser.Math.Angle.Between;\n\nclass MoveTo extends TickTask {\n  constructor(gameObject, config) {\n    super(gameObject, config);\n    this.gameObject = gameObject;\n    this.scene = GetSceneObject(gameObject);\n    this.resetFromJSON(config);\n    this.boot();\n  }\n\n  resetFromJSON(o) {\n    this.isRunning = GetValue(o, 'isRunning', false);\n    this.setEnable(GetValue(o, 'enable', true));\n    this.timeScale = GetValue(o, 'timeScale', 1);\n    this.setSpeed(GetValue(o, 'speed', 400));\n    this.setRotateToTarget(GetValue(o, 'rotateToTarget', false));\n    this.targetX = GetValue(o, 'targetX', 0);\n    this.targetY = GetValue(o, 'targetY', 0);\n    return this;\n  }\n\n  toJSON() {\n    return {\n      isRunning: this.isRunning,\n      enable: this.enable,\n      timeScale: this.timeScale,\n      speed: this.speed,\n      rotateToTarget: this.rotateToTarget,\n      targetX: this.targetX,\n      targetY: this.targetY,\n      tickingMode: this.tickingMode\n    };\n  }\n\n  boot() {\n    super.boot();\n\n    if (this.gameObject.once) {\n      // oops, bob object does not have event emitter\n      this.gameObject.on('destroy', this.destroy, this);\n    }\n  }\n\n  shutdown() {\n    super.shutdown();\n    this.gameObject = undefined;\n    this.scene = undefined;\n  }\n\n  destroy() {\n    this.shutdown();\n  }\n\n  startTicking() {\n    super.startTicking();\n    this.scene.events.on('update', this.update, this);\n  }\n\n  stopTicking() {\n    super.stopTicking();\n\n    if (this.scene) {\n      // Scene might be destoryed\n      this.scene.events.off('update', this.update, this);\n    }\n  }\n\n  setEnable(e) {\n    if (e == undefined) {\n      e = true;\n    }\n\n    this.enable = e;\n    return this;\n  }\n\n  setSpeed(speed) {\n    this.speed = speed;\n    return this;\n  }\n\n  setRotateToTarget(rotateToTarget) {\n    this.rotateToTarget = rotateToTarget;\n    return this;\n  }\n\n  moveTo(x, y) {\n    if (typeof x !== 'number') {\n      var config = x;\n      x = GetValue(config, 'x', undefined);\n      y = GetValue(config, 'y', undefined);\n    } // invalid position\n\n\n    if (x == null || y == null) {\n      return this;\n    }\n\n    this.targetX = x;\n    this.targetY = y;\n    super.start();\n    return this;\n  }\n\n  update(time, delta) {\n    if (!this.isRunning || !this.enable) {\n      return this;\n    }\n\n    var gameObject = this.gameObject;\n    var curX = gameObject.x,\n        curY = gameObject.y;\n    var targetX = this.targetX,\n        targetY = this.targetY;\n\n    if (curX === targetX && curY === targetY) {\n      this.complete();\n      return this;\n    }\n\n    if (this.speed === 0 || delta === 0 || this.timeScale === 0) {\n      return this;\n    }\n\n    var dt = delta * this.timeScale / 1000;\n    var movingDist = this.speed * dt;\n    var distToTarget = DistanceBetween(curX, curY, targetX, targetY);\n    var newX, newY;\n\n    if (movingDist < distToTarget) {\n      var t = movingDist / distToTarget;\n      newX = Lerp(curX, targetX, t);\n      newY = Lerp(curY, targetY, t);\n    } else {\n      newX = targetX;\n      newY = targetY;\n    }\n\n    gameObject.setPosition(newX, newY);\n\n    if (this.rotateToTarget) {\n      gameObject.rotation = AngleBetween(curX, curY, newX, newY);\n    }\n\n    return this;\n  }\n\n}\n\nexport default MoveTo;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/behaviors/moveto/MoveTo.js"],"names":["TickTask","GetSceneObject","GetValue","Phaser","Utils","Objects","DistanceBetween","Math","Distance","Between","Lerp","Linear","AngleBetween","Angle","MoveTo","constructor","gameObject","config","scene","resetFromJSON","boot","o","isRunning","setEnable","timeScale","setSpeed","setRotateToTarget","targetX","targetY","toJSON","enable","speed","rotateToTarget","tickingMode","once","on","destroy","shutdown","undefined","startTicking","events","update","stopTicking","off","e","moveTo","x","y","start","time","delta","curX","curY","complete","dt","movingDist","distToTarget","newX","newY","t","setPosition","rotation"],"mappings":"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","sourcesContent":["import TickTask from '../../utils/ticktask/TickTask.js';\r\nimport GetSceneObject from '../../utils/system/GetSceneObject.js';\r\n\r\nconst GetValue = Phaser.Utils.Objects.GetValue;\r\nconst DistanceBetween = Phaser.Math.Distance.Between;\r\nconst Lerp = Phaser.Math.Linear;\r\nconst AngleBetween = Phaser.Math.Angle.Between;\r\n\r\n\r\nclass MoveTo extends TickTask {\r\n    constructor(gameObject, config) {\r\n        super(gameObject, config);\r\n\r\n        this.gameObject = gameObject;\r\n        this.scene = GetSceneObject(gameObject);\r\n\r\n        this.resetFromJSON(config);\r\n        this.boot();\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        this.isRunning = GetValue(o, 'isRunning', false);\r\n        this.setEnable(GetValue(o, 'enable', true));\r\n        this.timeScale = GetValue(o, 'timeScale', 1);\r\n        this.setSpeed(GetValue(o, 'speed', 400));\r\n        this.setRotateToTarget(GetValue(o, 'rotateToTarget', false));\r\n        this.targetX = GetValue(o, 'targetX', 0);\r\n        this.targetY = GetValue(o, 'targetY', 0);\r\n        return this;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            isRunning: this.isRunning,\r\n            enable: this.enable,\r\n            timeScale: this.timeScale,\r\n            speed: this.speed,\r\n            rotateToTarget: this.rotateToTarget,\r\n            targetX: this.targetX,\r\n            targetY: this.targetY,\r\n            tickingMode: this.tickingMode\r\n        };\r\n    }\r\n\r\n    boot() {\r\n        super.boot();\r\n        if (this.gameObject.once) { // oops, bob object does not have event emitter\r\n            this.gameObject.on('destroy', this.destroy, this);\r\n        }\r\n    }\r\n\r\n    shutdown() {\r\n        super.shutdown();\r\n        this.gameObject = undefined;\r\n        this.scene = undefined;\r\n    }\r\n\r\n    destroy() {\r\n        this.shutdown();\r\n    }\r\n\r\n    startTicking() {\r\n        super.startTicking();\r\n        this.scene.events.on('update', this.update, this);\r\n    }\r\n\r\n    stopTicking() {\r\n        super.stopTicking();\r\n        if (this.scene) { // Scene might be destoryed\r\n            this.scene.events.off('update', this.update, this);\r\n        }\r\n    }\r\n\r\n    setEnable(e) {\r\n        if (e == undefined) {\r\n            e = true;\r\n        }\r\n        this.enable = e;\r\n        return this;\r\n    }\r\n\r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n        return this;\r\n    }\r\n\r\n    setRotateToTarget(rotateToTarget) {\r\n        this.rotateToTarget = rotateToTarget;\r\n        return this;\r\n    }\r\n\r\n    moveTo(x, y) {\r\n        if (typeof (x) !== 'number') {\r\n            var config = x;\r\n            x = GetValue(config, 'x', undefined);\r\n            y = GetValue(config, 'y', undefined);\r\n        }\r\n\r\n        // invalid position\r\n        if ((x == null) || (y == null)) {\r\n            return this;\r\n        }\r\n\r\n        this.targetX = x;\r\n        this.targetY = y;\r\n        super.start();\r\n        return this;\r\n    }\r\n\r\n    update(time, delta) {\r\n        if ((!this.isRunning) || (!this.enable)) {\r\n            return this;\r\n        }\r\n\r\n        var gameObject = this.gameObject;\r\n        var curX = gameObject.x,\r\n            curY = gameObject.y;\r\n        var targetX = this.targetX,\r\n            targetY = this.targetY;\r\n        if ((curX === targetX) && (curY === targetY)) {\r\n            this.complete();\r\n            return this;\r\n        }\r\n\r\n        if ((this.speed === 0) || (delta === 0) || (this.timeScale === 0)) {\r\n            return this;\r\n        }\r\n\r\n        var dt = (delta * this.timeScale) / 1000;\r\n        var movingDist = this.speed * dt;\r\n        var distToTarget = DistanceBetween(curX, curY, targetX, targetY);\r\n        var newX, newY;\r\n        if (movingDist < distToTarget) {\r\n            var t = movingDist / distToTarget;\r\n            newX = Lerp(curX, targetX, t);\r\n            newY = Lerp(curY, targetY, t);\r\n        } else {\r\n            newX = targetX;\r\n            newY = targetY;\r\n        }\r\n\r\n        gameObject.setPosition(newX, newY);\r\n        if (this.rotateToTarget) {\r\n            gameObject.rotation = AngleBetween(curX, curY, newX, newY);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default MoveTo;"]},"metadata":{},"sourceType":"module"}