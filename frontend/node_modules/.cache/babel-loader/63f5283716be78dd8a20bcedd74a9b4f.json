{"ast":null,"code":"var GetWorldX = function (tileX, tileY, out) {\n  if (out === undefined) {\n    out = {};\n  } else if (out === true) {\n    out = globWorldXY;\n  }\n\n  var worldX, worldY;\n\n  switch (this.mode) {\n    case 0:\n      // orthogonal\n      worldX = tileX * this.width;\n      worldY = tileY * this.height;\n      break;\n\n    case 1:\n      // isometric\n      worldX = (tileX - tileY) * this._halfWidth;\n      worldY = (tileX + tileY) * this._halfHeight;\n      break;\n  }\n\n  worldX += this.x;\n  worldY += this.y;\n  out.x = worldX;\n  out.y = worldY;\n  return out;\n};\n\nvar globWorldXY = {};\nexport default GetWorldX;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/utils/grid/quad/GetWorldXY.js"],"names":["GetWorldX","tileX","tileY","out","undefined","globWorldXY","worldX","worldY","mode","width","height","_halfWidth","_halfHeight","x","y"],"mappings":"AAAA,IAAIA,SAAS,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,GAAxB,EAA6B;AACzC,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AACnBD,IAAAA,GAAG,GAAG,EAAN;AACH,GAFD,MAEO,IAAIA,GAAG,KAAK,IAAZ,EAAkB;AACrBA,IAAAA,GAAG,GAAGE,WAAN;AACH;;AAED,MAAIC,MAAJ,EAAYC,MAAZ;;AACA,UAAQ,KAAKC,IAAb;AACI,SAAK,CAAL;AAAQ;AACJF,MAAAA,MAAM,GAAGL,KAAK,GAAG,KAAKQ,KAAtB;AACAF,MAAAA,MAAM,GAAGL,KAAK,GAAG,KAAKQ,MAAtB;AACA;;AACJ,SAAK,CAAL;AAAQ;AACJJ,MAAAA,MAAM,GAAG,CAACL,KAAK,GAAGC,KAAT,IAAkB,KAAKS,UAAhC;AACAJ,MAAAA,MAAM,GAAG,CAACN,KAAK,GAAGC,KAAT,IAAkB,KAAKU,WAAhC;AACA;AARR;;AAUAN,EAAAA,MAAM,IAAI,KAAKO,CAAf;AACAN,EAAAA,MAAM,IAAI,KAAKO,CAAf;AACAX,EAAAA,GAAG,CAACU,CAAJ,GAAQP,MAAR;AACAH,EAAAA,GAAG,CAACW,CAAJ,GAAQP,MAAR;AACA,SAAOJ,GAAP;AACH,CAvBD;;AAyBA,IAAIE,WAAW,GAAG,EAAlB;AAEA,eAAeL,SAAf","sourcesContent":["var GetWorldX = function (tileX, tileY, out) {\r\n    if (out === undefined) {\r\n        out = {};\r\n    } else if (out === true) {\r\n        out = globWorldXY;\r\n    }\r\n\r\n    var worldX, worldY;\r\n    switch (this.mode) {\r\n        case 0: // orthogonal\r\n            worldX = tileX * this.width;\r\n            worldY = tileY * this.height;\r\n            break;\r\n        case 1: // isometric\r\n            worldX = (tileX - tileY) * this._halfWidth;\r\n            worldY = (tileX + tileY) * this._halfHeight;\r\n            break;\r\n    }\r\n    worldX += this.x;\r\n    worldY += this.y;\r\n    out.x = worldX;\r\n    out.y = worldY;\r\n    return out;\r\n}\r\n\r\nvar globWorldXY = {};\r\n\r\nexport default GetWorldX;"]},"metadata":{},"sourceType":"module"}