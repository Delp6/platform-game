{"ast":null,"code":"import Pool from '../../../pool.js';\nimport TileXYToKey from '../../utils/tilexyzkey/TileXYToKey.js';\nimport Node from './Node.js'; // global object\n\nvar NodesPool = new Pool(); // recycle dead nodes\n// global object\n\nclass NodeCache {\n  constructor(pathFinder) {\n    this.sn = 0;\n    this.pool = NodesPool;\n    this.nodes = {}; // {tileXYKey:node}\n\n    this.pathFinder = pathFinder;\n    this.closestNode = null;\n  }\n\n  destroy() {\n    this.freeAllNodes();\n    this.pathFinder = null;\n    this.pool = undefined;\n    return this;\n  }\n\n  getNode(tileX, tileY, createNewNode) {\n    var key;\n\n    switch (typeof tileX) {\n      case 'number':\n        // (tileX, tileY, createNewNode)\n        key = TileXYToKey(tileX, tileY);\n        break;\n\n      case 'string':\n        // (key, createNewNode)\n        key = tileX;\n        createNewNode = tileY;\n        break;\n\n      default:\n        // (tileXY, createNewNode)\n        var tileXY = tileX;\n        createNewNode = tileY;\n        tileX = tileXY.x;\n        tileY = tileXY.y;\n        key = TileXYToKey(tileX, tileY);\n        break;\n    }\n\n    if (createNewNode === undefined) {\n      createNewNode = false;\n    }\n\n    this.sn++;\n\n    if (!this.nodes.hasOwnProperty(key)) {\n      if (!createNewNode) {\n        return null;\n      }\n\n      var node = this.pool.pop();\n\n      if (node === null) {\n        node = new Node();\n      }\n\n      node.reset(this);\n      node.sn = this.sn;\n      node.key = key;\n      node.x = tileX;\n      node.y = tileY;\n      this.nodes[key] = node;\n    }\n\n    return this.nodes[key];\n  }\n\n  freeAllNodes() {\n    this.closestNode = null;\n    var nodes = this.nodes,\n        pool = this.pool;\n    var node;\n\n    for (var key in nodes) {\n      node = nodes[key];\n      node.destroy();\n      pool.push(node);\n      delete nodes[key];\n    }\n\n    this.sn = 0;\n    return this;\n  }\n\n  getAllNodes() {\n    return this.nodes;\n  }\n\n}\n\nexport default NodeCache;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/pathfinder/astartsearch/NodeManager.js"],"names":["Pool","TileXYToKey","Node","NodesPool","NodeCache","constructor","pathFinder","sn","pool","nodes","closestNode","destroy","freeAllNodes","undefined","getNode","tileX","tileY","createNewNode","key","tileXY","x","y","hasOwnProperty","node","pop","reset","push","getAllNodes"],"mappings":"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","sourcesContent":["import Pool from '../../../pool.js';\r\nimport TileXYToKey from '../../utils/tilexyzkey/TileXYToKey.js';\r\nimport Node from './Node.js';\r\n\r\n// global object\r\nvar NodesPool = new Pool(); // recycle dead nodes\r\n// global object\r\n\r\nclass NodeCache {\r\n    constructor(pathFinder) {\r\n        this.sn = 0;\r\n        this.pool = NodesPool;\r\n        this.nodes = {}; // {tileXYKey:node}\r\n        this.pathFinder = pathFinder;\r\n        this.closestNode = null;\r\n    }\r\n\r\n    destroy() {\r\n        this.freeAllNodes();\r\n        this.pathFinder = null;\r\n        this.pool = undefined;\r\n        return this;\r\n    }\r\n\r\n    getNode(tileX, tileY, createNewNode) {\r\n        var key;\r\n        switch (typeof (tileX)) {\r\n            case 'number': // (tileX, tileY, createNewNode)\r\n                key = TileXYToKey(tileX, tileY);\r\n                break;\r\n            case 'string': // (key, createNewNode)\r\n                key = tileX;\r\n                createNewNode = tileY;\r\n                break;\r\n            default: // (tileXY, createNewNode)\r\n                var tileXY = tileX;\r\n                createNewNode = tileY;\r\n                tileX = tileXY.x;\r\n                tileY = tileXY.y;\r\n                key = TileXYToKey(tileX, tileY);\r\n                break;\r\n        }\r\n        if (createNewNode === undefined) {\r\n            createNewNode = false;\r\n        }\r\n\r\n        this.sn++;\r\n        if (!this.nodes.hasOwnProperty(key)) {\r\n            if (!createNewNode) {\r\n                return null;\r\n            }\r\n\r\n            var node = this.pool.pop();\r\n            if (node === null) {\r\n                node = new Node();\r\n            }\r\n            node.reset(this);\r\n            node.sn = this.sn;\r\n            node.key = key;\r\n            node.x = tileX;\r\n            node.y = tileY;\r\n            this.nodes[key] = node;\r\n        }\r\n        return this.nodes[key];\r\n    }\r\n\r\n    freeAllNodes() {\r\n        this.closestNode = null;\r\n        var nodes = this.nodes,\r\n            pool = this.pool;\r\n        var node;\r\n        for (var key in nodes) {\r\n            node = nodes[key];\r\n            node.destroy();\r\n            pool.push(node);\r\n            delete nodes[key];\r\n        }\r\n        this.sn = 0;\r\n        return this;\r\n    }\r\n\r\n    getAllNodes() {\r\n        return this.nodes;\r\n    }\r\n}\r\nexport default NodeCache;"]},"metadata":{},"sourceType":"module"}