{"ast":null,"code":"var CanMoveToTile = function (tileX, tileY, direction) {\n  var miniBoard = this.miniBoard;\n  var mainBoard = miniBoard.mainBoard; // Not on a mainBoard\n\n  if (mainBoard == null) {\n    return false;\n  }\n\n  myTileXY.x = miniBoard.tileX;\n  myTileXY.y = miniBoard.tileY;\n  targetTileXY.x = tileX;\n  targetTileXY.y = tileY; // Move to current position\n\n  if (targetTileXY.x === myTileXY.x && targetTileXY.y === myTileXY.y) {\n    return true;\n  }\n\n  miniBoard.pullOutFromMainBoard(); // Can not put on main board\n\n  if (!miniBoard.canPutOnMainBoard(mainBoard, targetTileXY.x, targetTileXY.y)) {\n    miniBoard.putBack();\n    return false;\n  } // Custom moveable test\n\n\n  if (this.moveableTestCallback) {\n    if (direction === undefined) {\n      direction = mainBoard.getNeighborTileDirection(myTileXY, targetTileXY);\n    }\n\n    targetTileXY.direction = direction;\n\n    if (this.moveableTestScope) {\n      var moveable = this.moveableTestCallback.call(this.moveableTestScope, myTileXYZ, targetTileXY, mainBoard);\n    } else {\n      var moveable = this.moveableTestCallback(myTileXYZ, targetTileXY, mainBoard);\n    }\n\n    if (!moveable) {\n      miniBoard.putBack();\n      return false;\n    }\n  }\n\n  miniBoard.putBack();\n  return true;\n};\n\nvar myTileXY = {\n  x: 0,\n  y: 0\n};\nvar targetTileXY = {\n  x: 0,\n  y: 0,\n  direction: null\n};\nexport default CanMoveToTile;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/miniboard/moveto/CanMoveToTile.js"],"names":["CanMoveToTile","tileX","tileY","direction","miniBoard","mainBoard","myTileXY","x","y","targetTileXY","pullOutFromMainBoard","canPutOnMainBoard","putBack","moveableTestCallback","undefined","getNeighborTileDirection","moveableTestScope","moveable","call","myTileXYZ"],"mappings":"AAAA,IAAIA,aAAa,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,SAAxB,EAAmC;AACnD,MAAIC,SAAS,GAAG,KAAKA,SAArB;AACA,MAAIC,SAAS,GAAGD,SAAS,CAACC,SAA1B,CAFmD,CAGnD;;AACA,MAAIA,SAAS,IAAI,IAAjB,EAAuB;AACnB,WAAO,KAAP;AACH;;AAEDC,EAAAA,QAAQ,CAACC,CAAT,GAAaH,SAAS,CAACH,KAAvB;AACAK,EAAAA,QAAQ,CAACE,CAAT,GAAaJ,SAAS,CAACF,KAAvB;AACAO,EAAAA,YAAY,CAACF,CAAb,GAAiBN,KAAjB;AACAQ,EAAAA,YAAY,CAACD,CAAb,GAAiBN,KAAjB,CAXmD,CAYnD;;AACA,MAAKO,YAAY,CAACF,CAAb,KAAmBD,QAAQ,CAACC,CAA7B,IAAoCE,YAAY,CAACD,CAAb,KAAmBF,QAAQ,CAACE,CAApE,EAAwE;AACpE,WAAO,IAAP;AACH;;AAEDJ,EAAAA,SAAS,CAACM,oBAAV,GAjBmD,CAkBnD;;AACA,MAAI,CAACN,SAAS,CAACO,iBAAV,CAA4BN,SAA5B,EAAuCI,YAAY,CAACF,CAApD,EAAuDE,YAAY,CAACD,CAApE,CAAL,EAA6E;AACzEJ,IAAAA,SAAS,CAACQ,OAAV;AACA,WAAO,KAAP;AACH,GAtBkD,CAwBnD;;;AACA,MAAI,KAAKC,oBAAT,EAA+B;AAC3B,QAAIV,SAAS,KAAKW,SAAlB,EAA6B;AACzBX,MAAAA,SAAS,GAAGE,SAAS,CAACU,wBAAV,CAAmCT,QAAnC,EAA6CG,YAA7C,CAAZ;AACH;;AACDA,IAAAA,YAAY,CAACN,SAAb,GAAyBA,SAAzB;;AACA,QAAI,KAAKa,iBAAT,EAA4B;AACxB,UAAIC,QAAQ,GAAG,KAAKJ,oBAAL,CAA0BK,IAA1B,CAA+B,KAAKF,iBAApC,EAAuDG,SAAvD,EAAkEV,YAAlE,EAAgFJ,SAAhF,CAAf;AACH,KAFD,MAEO;AACH,UAAIY,QAAQ,GAAG,KAAKJ,oBAAL,CAA0BM,SAA1B,EAAqCV,YAArC,EAAmDJ,SAAnD,CAAf;AACH;;AACD,QAAI,CAACY,QAAL,EAAe;AACXb,MAAAA,SAAS,CAACQ,OAAV;AACA,aAAO,KAAP;AACH;AACJ;;AAEDR,EAAAA,SAAS,CAACQ,OAAV;AACA,SAAO,IAAP;AACH,CA3CD;;AA6CA,IAAIN,QAAQ,GAAG;AACXC,EAAAA,CAAC,EAAE,CADQ;AAEXC,EAAAA,CAAC,EAAE;AAFQ,CAAf;AAIA,IAAIC,YAAY,GAAG;AACfF,EAAAA,CAAC,EAAE,CADY;AAEfC,EAAAA,CAAC,EAAE,CAFY;AAGfL,EAAAA,SAAS,EAAE;AAHI,CAAnB;AAMA,eAAeH,aAAf","sourcesContent":["var CanMoveToTile = function (tileX, tileY, direction) {\r\n    var miniBoard = this.miniBoard;\r\n    var mainBoard = miniBoard.mainBoard;\r\n    // Not on a mainBoard\r\n    if (mainBoard == null) {\r\n        return false;\r\n    }\r\n\r\n    myTileXY.x = miniBoard.tileX;\r\n    myTileXY.y = miniBoard.tileY;\r\n    targetTileXY.x = tileX;\r\n    targetTileXY.y = tileY;\r\n    // Move to current position\r\n    if ((targetTileXY.x === myTileXY.x) && (targetTileXY.y === myTileXY.y)) {\r\n        return true;\r\n    }\r\n\r\n    miniBoard.pullOutFromMainBoard();\r\n    // Can not put on main board\r\n    if (!miniBoard.canPutOnMainBoard(mainBoard, targetTileXY.x, targetTileXY.y)) {\r\n        miniBoard.putBack();\r\n        return false;\r\n    }\r\n\r\n    // Custom moveable test\r\n    if (this.moveableTestCallback) {\r\n        if (direction === undefined) {\r\n            direction = mainBoard.getNeighborTileDirection(myTileXY, targetTileXY);\r\n        }\r\n        targetTileXY.direction = direction;\r\n        if (this.moveableTestScope) {\r\n            var moveable = this.moveableTestCallback.call(this.moveableTestScope, myTileXYZ, targetTileXY, mainBoard);\r\n        } else {\r\n            var moveable = this.moveableTestCallback(myTileXYZ, targetTileXY, mainBoard);\r\n        }\r\n        if (!moveable) {\r\n            miniBoard.putBack();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    miniBoard.putBack();\r\n    return true;\r\n}\r\n\r\nvar myTileXY = {\r\n    x: 0,\r\n    y: 0\r\n};\r\nvar targetTileXY = {\r\n    x: 0,\r\n    y: 0,\r\n    direction: null\r\n};\r\n\r\nexport default CanMoveToTile;"]},"metadata":{},"sourceType":"module"}