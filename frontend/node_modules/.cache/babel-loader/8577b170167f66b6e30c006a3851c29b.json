{"ast":null,"code":"import OnePointerTracer from \"../onepointertracer/OnePointerTracer.js\";\nimport FSM from '../../../fsm.js';\nconst GetValue = Phaser.Utils.Objects.GetValue;\n\nclass Press extends OnePointerTracer {\n  constructor(gameObject, config) {\n    super(gameObject, config);\n    var self = this;\n    var stateConfig = {\n      states: {\n        IDLE: {\n          enter: function () {\n            self.x = 0;\n            self.y = 0;\n            self.worldX = 0;\n            self.worldY = 0;\n          },\n          exit: function () {\n            var pointer = self.lastPointer;\n            self.x = pointer.x;\n            self.y = pointer.y;\n            self.worldX = pointer.worldX;\n            self.worldY = pointer.worldY;\n          }\n        },\n        BEGIN: {\n          enter: function () {\n            self.start();\n          },\n          exit: function () {\n            self.stop();\n          }\n        },\n        RECOGNIZED: {\n          enter: function () {\n            self.emit('pressstart', self, self.gameObject, self.lastPointer);\n          },\n          exit: function () {\n            self.emit('pressend', self, self.gameObject, self.lastPointer);\n          }\n        }\n      },\n      init: function () {\n        this.state = IDLE;\n      },\n      eventEmitter: false\n    };\n    this.setRecongizedStateObject(new FSM(stateConfig));\n  }\n\n  resetFromJSON(o) {\n    super.resetFromJSON(o);\n    this.setDragThreshold(GetValue(o, 'threshold', 9));\n    this.setMinHoldTime(GetValue(o, 'time', 251));\n    return this;\n  }\n\n  onDragStart() {\n    this.state = BEGIN;\n\n    if (this.holdTime === 0) {\n      this.state = RECOGNIZED;\n    }\n  }\n\n  onDragEnd() {\n    this.state = IDLE;\n  }\n\n  onDrag() {\n    if (this.state === IDLE) {\n      return;\n    }\n\n    if (this.pointer.getDistance() > this.dragThreshold) {\n      this.state = IDLE;\n    }\n  }\n\n  preUpdate(time, delta) {\n    if (this.state === BEGIN) {\n      var holdTime = time - this.pointer.downTime;\n\n      if (holdTime >= this.holdTime) {\n        this.state = RECOGNIZED;\n      }\n    }\n  }\n\n  get isPressed() {\n    return this.state === RECOGNIZED;\n  }\n\n  setDragThreshold(distance) {\n    this.dragThreshold = distance;\n    return this;\n  }\n\n  setMinHoldTime(time) {\n    this.holdTime = time; // ms\n\n    return this;\n  }\n\n}\n\nconst IDLE = 'IDLE';\nconst BEGIN = 'BEGIN';\nconst RECOGNIZED = 'RECOGNIZED';\nexport default Press;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/input/gestures/press/Press.js"],"names":["OnePointerTracer","FSM","GetValue","Phaser","Utils","Objects","Press","constructor","gameObject","config","self","stateConfig","states","IDLE","enter","x","y","worldX","worldY","exit","pointer","lastPointer","BEGIN","start","stop","RECOGNIZED","emit","init","state","eventEmitter","setRecongizedStateObject","resetFromJSON","o","setDragThreshold","setMinHoldTime","onDragStart","holdTime","onDragEnd","onDrag","getDistance","dragThreshold","preUpdate","time","delta","downTime","isPressed","distance"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,yCAA7B;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,KAAP,CAAaC,OAAb,CAAqBH,QAAtC;;AAEA,MAAMI,KAAN,SAAoBN,gBAApB,CAAqC;AACjCO,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqB;AAC5B,UAAMD,UAAN,EAAkBC,MAAlB;AAEA,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIC,WAAW,GAAG;AACdC,MAAAA,MAAM,EAAE;AACJC,QAAAA,IAAI,EAAE;AACFC,UAAAA,KAAK,EAAE,YAAY;AACfJ,YAAAA,IAAI,CAACK,CAAL,GAAS,CAAT;AACAL,YAAAA,IAAI,CAACM,CAAL,GAAS,CAAT;AACAN,YAAAA,IAAI,CAACO,MAAL,GAAc,CAAd;AACAP,YAAAA,IAAI,CAACQ,MAAL,GAAc,CAAd;AACH,WANC;AAOFC,UAAAA,IAAI,EAAE,YAAY;AACd,gBAAIC,OAAO,GAAGV,IAAI,CAACW,WAAnB;AACAX,YAAAA,IAAI,CAACK,CAAL,GAASK,OAAO,CAACL,CAAjB;AACAL,YAAAA,IAAI,CAACM,CAAL,GAASI,OAAO,CAACJ,CAAjB;AACAN,YAAAA,IAAI,CAACO,MAAL,GAAcG,OAAO,CAACH,MAAtB;AACAP,YAAAA,IAAI,CAACQ,MAAL,GAAcE,OAAO,CAACF,MAAtB;AACH;AAbC,SADF;AAgBJI,QAAAA,KAAK,EAAE;AACHR,UAAAA,KAAK,EAAE,YAAY;AACfJ,YAAAA,IAAI,CAACa,KAAL;AACH,WAHE;AAIHJ,UAAAA,IAAI,EAAE,YAAY;AACdT,YAAAA,IAAI,CAACc,IAAL;AACH;AANE,SAhBH;AAwBJC,QAAAA,UAAU,EAAE;AACRX,UAAAA,KAAK,EAAE,YAAY;AACfJ,YAAAA,IAAI,CAACgB,IAAL,CAAU,YAAV,EAAwBhB,IAAxB,EAA8BA,IAAI,CAACF,UAAnC,EAA+CE,IAAI,CAACW,WAApD;AACH,WAHO;AAIRF,UAAAA,IAAI,EAAE,YAAY;AACdT,YAAAA,IAAI,CAACgB,IAAL,CAAU,UAAV,EAAsBhB,IAAtB,EAA4BA,IAAI,CAACF,UAAjC,EAA6CE,IAAI,CAACW,WAAlD;AACH;AANO;AAxBR,OADM;AAkCdM,MAAAA,IAAI,EAAE,YAAY;AACd,aAAKC,KAAL,GAAaf,IAAb;AACH,OApCa;AAqCdgB,MAAAA,YAAY,EAAE;AArCA,KAAlB;AAuCA,SAAKC,wBAAL,CAA8B,IAAI7B,GAAJ,CAAQU,WAAR,CAA9B;AACH;;AAEDoB,EAAAA,aAAa,CAACC,CAAD,EAAI;AACb,UAAMD,aAAN,CAAoBC,CAApB;AACA,SAAKC,gBAAL,CAAsB/B,QAAQ,CAAC8B,CAAD,EAAI,WAAJ,EAAiB,CAAjB,CAA9B;AACA,SAAKE,cAAL,CAAoBhC,QAAQ,CAAC8B,CAAD,EAAI,MAAJ,EAAY,GAAZ,CAA5B;AACA,WAAO,IAAP;AACH;;AAEDG,EAAAA,WAAW,GAAG;AACV,SAAKP,KAAL,GAAaN,KAAb;;AACA,QAAI,KAAKc,QAAL,KAAkB,CAAtB,EAAyB;AACrB,WAAKR,KAAL,GAAaH,UAAb;AACH;AACJ;;AAEDY,EAAAA,SAAS,GAAG;AACR,SAAKT,KAAL,GAAaf,IAAb;AACH;;AAEDyB,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKV,KAAL,KAAef,IAAnB,EAAyB;AACrB;AACH;;AAED,QAAI,KAAKO,OAAL,CAAamB,WAAb,KAA6B,KAAKC,aAAtC,EAAqD;AACjD,WAAKZ,KAAL,GAAaf,IAAb;AACH;AACJ;;AAED4B,EAAAA,SAAS,CAACC,IAAD,EAAOC,KAAP,EAAc;AACnB,QAAI,KAAKf,KAAL,KAAeN,KAAnB,EAA0B;AACtB,UAAIc,QAAQ,GAAGM,IAAI,GAAG,KAAKtB,OAAL,CAAawB,QAAnC;;AACA,UAAIR,QAAQ,IAAI,KAAKA,QAArB,EAA+B;AAC3B,aAAKR,KAAL,GAAaH,UAAb;AACH;AACJ;AACJ;;AAED,MAAIoB,SAAJ,GAAgB;AACZ,WAAQ,KAAKjB,KAAL,KAAeH,UAAvB;AACH;;AAEDQ,EAAAA,gBAAgB,CAACa,QAAD,EAAW;AACvB,SAAKN,aAAL,GAAqBM,QAArB;AACA,WAAO,IAAP;AACH;;AAEDZ,EAAAA,cAAc,CAACQ,IAAD,EAAO;AACjB,SAAKN,QAAL,GAAgBM,IAAhB,CADiB,CACK;;AACtB,WAAO,IAAP;AACH;;AAhGgC;;AAmGrC,MAAM7B,IAAI,GAAG,MAAb;AACA,MAAMS,KAAK,GAAG,OAAd;AACA,MAAMG,UAAU,GAAG,YAAnB;AAEA,eAAenB,KAAf","sourcesContent":["import OnePointerTracer from \"../onepointertracer/OnePointerTracer.js\";\r\nimport FSM from '../../../fsm.js';\r\n\r\nconst GetValue = Phaser.Utils.Objects.GetValue;\r\n\r\nclass Press extends OnePointerTracer {\r\n    constructor(gameObject, config) {\r\n        super(gameObject, config);\r\n\r\n        var self = this;\r\n        var stateConfig = {\r\n            states: {\r\n                IDLE: {\r\n                    enter: function () {\r\n                        self.x = 0;\r\n                        self.y = 0;\r\n                        self.worldX = 0;\r\n                        self.worldY = 0;\r\n                    },\r\n                    exit: function () {\r\n                        var pointer = self.lastPointer;\r\n                        self.x = pointer.x;\r\n                        self.y = pointer.y;\r\n                        self.worldX = pointer.worldX;\r\n                        self.worldY = pointer.worldY;\r\n                    }\r\n                },\r\n                BEGIN: {\r\n                    enter: function () {\r\n                        self.start();\r\n                    },\r\n                    exit: function () {\r\n                        self.stop();\r\n                    }\r\n                },\r\n                RECOGNIZED: {\r\n                    enter: function () {\r\n                        self.emit('pressstart', self, self.gameObject, self.lastPointer);\r\n                    },\r\n                    exit: function () {\r\n                        self.emit('pressend', self, self.gameObject, self.lastPointer);\r\n                    }\r\n                }\r\n            },\r\n            init: function () {\r\n                this.state = IDLE;\r\n            },\r\n            eventEmitter: false,\r\n        }\r\n        this.setRecongizedStateObject(new FSM(stateConfig));\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        super.resetFromJSON(o);\r\n        this.setDragThreshold(GetValue(o, 'threshold', 9));\r\n        this.setMinHoldTime(GetValue(o, 'time', 251));\r\n        return this;\r\n    }\r\n\r\n    onDragStart() {\r\n        this.state = BEGIN;\r\n        if (this.holdTime === 0) {\r\n            this.state = RECOGNIZED;\r\n        }\r\n    }\r\n\r\n    onDragEnd() {\r\n        this.state = IDLE;\r\n    }\r\n\r\n    onDrag() {\r\n        if (this.state === IDLE) {\r\n            return;\r\n        }\r\n\r\n        if (this.pointer.getDistance() > this.dragThreshold) {\r\n            this.state = IDLE;\r\n        }\r\n    }\r\n\r\n    preUpdate(time, delta) {\r\n        if (this.state === BEGIN) {\r\n            var holdTime = time - this.pointer.downTime;\r\n            if (holdTime >= this.holdTime) {\r\n                this.state = RECOGNIZED;\r\n            }\r\n        }\r\n    }\r\n\r\n    get isPressed() {\r\n        return (this.state === RECOGNIZED);\r\n    }\r\n\r\n    setDragThreshold(distance) {\r\n        this.dragThreshold = distance;\r\n        return this;\r\n    }\r\n\r\n    setMinHoldTime(time) {\r\n        this.holdTime = time; // ms\r\n        return this;\r\n    }\r\n}\r\n\r\nconst IDLE = 'IDLE';\r\nconst BEGIN = 'BEGIN';\r\nconst RECOGNIZED = 'RECOGNIZED';\r\n\r\nexport default Press;"]},"metadata":{},"sourceType":"module"}