{"ast":null,"code":"import OnePointerTracer from \"../onepointertracer/OnePointerTracer.js\";\nimport FSM from '../../../fsm.js';\nimport VelocityMethods from './VelocityMethods.js';\nimport DIRMODE from '../../../utils/math/angle/angletodirections/Const.js';\nimport AngleToDirections from '../../../utils/math/angle/angletodirections/AngleToDirections.js';\nconst GetValue = Phaser.Utils.Objects.GetValue;\nconst RadToDeg = Phaser.Math.RadToDeg;\n\nclass Swipe extends OnePointerTracer {\n  constructor(gameObject, config) {\n    super(gameObject, config);\n    var self = this;\n    var stateConfig = {\n      states: {\n        IDLE: {\n          enter: function () {\n            self.x = 0;\n            self.y = 0;\n            self.worldX = 0;\n            self.worldY = 0;\n          },\n          exit: function () {\n            var pointer = self.lastPointer;\n            self.x = pointer.x;\n            self.y = pointer.y;\n            self.worldX = pointer.worldX;\n            self.worldY = pointer.worldY;\n          }\n        },\n        BEGIN: {\n          enter: function () {\n            self.validDrag = false;\n          }\n        },\n        RECOGNIZED: {\n          enter: function () {\n            self.start();\n            self.updateDirectionStates();\n            self.emit('swipe', self, self.gameObject, self.lastPointer);\n          },\n          exit: function () {\n            self.stop();\n            self.clearDirectionStates();\n          }\n        }\n      },\n      init: function () {\n        this.state = IDLE;\n      },\n      eventEmitter: false\n    };\n    this.setRecongizedStateObject(new FSM(stateConfig));\n    this.clearDirectionStates();\n  }\n\n  resetFromJSON(o) {\n    super.resetFromJSON(o);\n    this.setDragThreshold(GetValue(o, 'threshold', 10));\n    this.setMinDragVelocity(GetValue(o, 'velocityThreshold', 1000));\n    this.setDirectionMode(GetValue(o, 'dir', '8dir'));\n    return this;\n  }\n\n  onDragStart() {\n    this.state = BEGIN;\n  }\n\n  onDragEnd() {\n    this.state = IDLE;\n  }\n\n  onDrag() {\n    if (this.state === BEGIN) {\n      if (!this.vaildDrag) {\n        this.vaildDrag = this.dragThreshold === 0 || this.pointer.getDistance() >= this.dragThreshold;\n      }\n\n      if (this.vaildDrag && this.dragVelocity > this.minDragVelocity) {\n        this.state = RECOGNIZED;\n      }\n    }\n  }\n\n  postUpdate(time, delta) {\n    // Clear RECOGNIZED after update()\n    if (this.state === RECOGNIZED) {\n      this.state = IDLE;\n    }\n  }\n\n  get isSwiped() {\n    return this.state === RECOGNIZED;\n  }\n\n  get dragVelocity() {\n    var velocity;\n\n    switch (this.dirMode) {\n      case 0:\n        velocity = this.getVelocityY();\n        break;\n      // up & down\n\n      case 1:\n        velocity = this.getVelocityX();\n        break;\n      // left & right\n\n      default:\n        velocity = this.getVelocity();\n        break;\n      // 4 dir, 8 dir\n    }\n\n    return velocity;\n  }\n\n  setDragThreshold(distance) {\n    this.dragThreshold = distance;\n    return this;\n  }\n\n  setMinDragVelocity(velocity) {\n    this.minDragVelocity = velocity;\n    return this;\n  }\n\n  setDirectionMode(m) {\n    if (typeof m === 'string') {\n      m = DIRMODE[m];\n    }\n\n    this.dirMode = m;\n    return this;\n  }\n\n  updateDirectionStates() {\n    var angle = RadToDeg(this.getVelocityAngle());\n    AngleToDirections(angle, this.dirMode, this);\n    return this;\n  }\n\n  clearDirectionStates() {\n    this.left = false;\n    this.right = false;\n    this.up = false;\n    this.down = false;\n    return this;\n  }\n\n}\n\nObject.assign(Swipe.prototype, VelocityMethods);\nconst IDLE = 'IDLE';\nconst BEGIN = 'BEGIN';\nconst RECOGNIZED = 'RECOGNIZED';\nexport default Swipe;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/input/gestures/swipe/Swipe.js"],"names":["OnePointerTracer","FSM","VelocityMethods","DIRMODE","AngleToDirections","GetValue","Phaser","Utils","Objects","RadToDeg","Math","Swipe","constructor","gameObject","config","self","stateConfig","states","IDLE","enter","x","y","worldX","worldY","exit","pointer","lastPointer","BEGIN","validDrag","RECOGNIZED","start","updateDirectionStates","emit","stop","clearDirectionStates","init","state","eventEmitter","setRecongizedStateObject","resetFromJSON","o","setDragThreshold","setMinDragVelocity","setDirectionMode","onDragStart","onDragEnd","onDrag","vaildDrag","dragThreshold","getDistance","dragVelocity","minDragVelocity","postUpdate","time","delta","isSwiped","velocity","dirMode","getVelocityY","getVelocityX","getVelocity","distance","m","angle","getVelocityAngle","left","right","up","down","Object","assign","prototype"],"mappings":"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","sourcesContent":["import OnePointerTracer from \"../onepointertracer/OnePointerTracer.js\";\r\nimport FSM from '../../../fsm.js';\r\nimport VelocityMethods from './VelocityMethods.js';\r\nimport DIRMODE from '../../../utils/math/angle/angletodirections/Const.js';\r\nimport AngleToDirections from '../../../utils/math/angle/angletodirections/AngleToDirections.js';\r\n\r\nconst GetValue = Phaser.Utils.Objects.GetValue;\r\nconst RadToDeg = Phaser.Math.RadToDeg;\r\n\r\nclass Swipe extends OnePointerTracer {\r\n    constructor(gameObject, config) {\r\n        super(gameObject, config);\r\n\r\n        var self = this;\r\n        var stateConfig = {\r\n            states: {\r\n                IDLE: {\r\n                    enter: function () {\r\n                        self.x = 0;\r\n                        self.y = 0;\r\n                        self.worldX = 0;\r\n                        self.worldY = 0;\r\n                    },\r\n                    exit: function () {\r\n                        var pointer = self.lastPointer;\r\n                        self.x = pointer.x;\r\n                        self.y = pointer.y;\r\n                        self.worldX = pointer.worldX;\r\n                        self.worldY = pointer.worldY;\r\n                    }\r\n                },\r\n                BEGIN: {\r\n                    enter: function () {\r\n                        self.validDrag = false;\r\n                    }\r\n                },\r\n                RECOGNIZED: {\r\n                    enter: function () {\r\n                        self.start();\r\n                        self.updateDirectionStates();\r\n                        self.emit('swipe', self, self.gameObject, self.lastPointer);\r\n                    },\r\n\r\n                    exit: function () {\r\n                        self.stop();\r\n                        self.clearDirectionStates();\r\n                    }\r\n                }\r\n            },\r\n            init: function () {\r\n                this.state = IDLE;\r\n            },\r\n            eventEmitter: false,\r\n        }\r\n        this.setRecongizedStateObject(new FSM(stateConfig));\r\n        this.clearDirectionStates();\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        super.resetFromJSON(o);\r\n        this.setDragThreshold(GetValue(o, 'threshold', 10));\r\n        this.setMinDragVelocity(GetValue(o, 'velocityThreshold', 1000));\r\n        this.setDirectionMode(GetValue(o, 'dir', '8dir'));\r\n        return this;\r\n    }\r\n\r\n    onDragStart() {\r\n        this.state = BEGIN;\r\n    }\r\n\r\n    onDragEnd() {\r\n        this.state = IDLE;\r\n    }\r\n\r\n    onDrag() {\r\n        if (this.state === BEGIN) {\r\n            if (!this.vaildDrag) {\r\n                this.vaildDrag = (this.dragThreshold === 0) || (this.pointer.getDistance() >= this.dragThreshold);\r\n            }\r\n            if (this.vaildDrag && (this.dragVelocity > this.minDragVelocity)) {\r\n                this.state = RECOGNIZED;\r\n            }\r\n        }\r\n    }\r\n\r\n    postUpdate(time, delta) {\r\n        // Clear RECOGNIZED after update()\r\n        if (this.state === RECOGNIZED) {\r\n            this.state = IDLE;\r\n        }\r\n    }\r\n\r\n    get isSwiped() {\r\n        return (this.state === RECOGNIZED);\r\n    }\r\n\r\n    get dragVelocity() {\r\n        var velocity;\r\n        switch (this.dirMode) {\r\n            case 0: velocity = this.getVelocityY(); break; // up & down\r\n            case 1: velocity = this.getVelocityX(); break; // left & right\r\n            default: velocity = this.getVelocity(); break; // 4 dir, 8 dir\r\n        }\r\n        return velocity;\r\n    }\r\n\r\n    setDragThreshold(distance) {\r\n        this.dragThreshold = distance;\r\n        return this;\r\n    }\r\n\r\n    setMinDragVelocity(velocity) {\r\n        this.minDragVelocity = velocity;\r\n        return this;\r\n    }\r\n\r\n    setDirectionMode(m) {\r\n        if (typeof (m) === 'string') {\r\n            m = DIRMODE[m];\r\n        }\r\n        this.dirMode = m;\r\n        return this;\r\n    }\r\n\r\n    updateDirectionStates() {\r\n        var angle = RadToDeg(this.getVelocityAngle());\r\n        AngleToDirections(angle, this.dirMode, this);\r\n        return this;\r\n    }\r\n\r\n    clearDirectionStates() {\r\n        this.left = false;\r\n        this.right = false;\r\n        this.up = false;\r\n        this.down = false;\r\n        return this;\r\n    }\r\n}\r\n\r\nObject.assign(\r\n    Swipe.prototype,\r\n    VelocityMethods\r\n);\r\n\r\nconst IDLE = 'IDLE';\r\nconst BEGIN = 'BEGIN';\r\nconst RECOGNIZED = 'RECOGNIZED';\r\n\r\nexport default Swipe;"]},"metadata":{},"sourceType":"module"}