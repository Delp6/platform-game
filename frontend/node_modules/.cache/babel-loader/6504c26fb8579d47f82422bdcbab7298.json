{"ast":null,"code":"var MoveAway = function (tileX, tileY, moveAwayMode) {\n  var board = this.chessData.board;\n\n  if (board === null) {\n    // chess is not in a board\n    this.lastMoveResult = false;\n    return this;\n  }\n\n  if (typeof tileX !== 'number') {\n    var config = tileX;\n    tileX = config.x;\n    tileY = config.y;\n  }\n\n  targetTileXY.x = tileX;\n  targetTileXY.y = tileY;\n\n  if (moveAwayMode === undefined) {\n    moveAwayMode = true;\n  }\n\n  var myTileXYZ = this.chessData.tileXYZ,\n      chessInfo,\n      direction;\n  var directions = board.grid.allDirections; // Initial chess info of each neighbor and current tile position\n\n  if (globChessInfo.length !== directions.length + 1) {\n    globChessInfo.length = 0; // Neighbors\n\n    for (var i = 0, cnt = directions.length; i < cnt; i++) {\n      globChessInfo.push({\n        direction: i\n      });\n    } // current tile position\n\n\n    globChessInfo.push({\n      direction: null\n    });\n  } // Get tileXY and distance of each neighbor and current tile position\n\n\n  var out;\n\n  for (var i = 0, cnt = globChessInfo.length; i < cnt; i++) {\n    chessInfo = globChessInfo[i];\n    direction = chessInfo.direction;\n\n    if (direction === null) {\n      // Current tile position\n      chessInfo.x = myTileXYZ.x;\n      chessInfo.y = myTileXYZ.y;\n    } else {\n      // Neighobrs\n      out = board.getNeighborTileXY(myTileXYZ, direction, chessInfo);\n\n      if (out === null) {\n        // Invalid neighbor tile position\n        chessInfo.x = null;\n        chessInfo.y = null;\n        chessInfo.distance = null;\n        continue;\n      }\n    }\n\n    chessInfo.distance = board.getDistance(chessInfo, targetTileXY, true);\n  }\n\n  var previousDirection = this.destinationDirection; // Sort chess info\n\n  globChessInfo.sort(function (infoA, infoB) {\n    // Invalid tile position\n    if (infoA.distance === null) {\n      return 1;\n    }\n\n    if (infoB.distance === null) {\n      return -1;\n    }\n\n    if (infoA.distance > infoB.distance) {\n      return moveAwayMode ? -1 : 1;\n    }\n\n    if (infoA.distance < infoB.distance) {\n      return moveAwayMode ? 1 : -1;\n    } // Equal-to case\n    // Diagonal\n\n\n    if (infoA.direction === previousDirection) {\n      return 1;\n    }\n\n    if (infoB.direction === previousDirection) {\n      return -1;\n    } // Current tile position\n\n\n    if (infoA.direction === null) {\n      return 1;\n    }\n\n    if (infoB.direction === null) {\n      return -1;\n    }\n\n    return 0;\n  }); // Try move to neighbor, or current tile position\n\n  for (var i = 0, cnt = globChessInfo.length; i < cnt; i++) {\n    chessInfo = globChessInfo[i];\n\n    if (chessInfo.distance === null) {\n      // Invalid tile position\n      return this;\n    }\n\n    this.moveTo(chessInfo);\n\n    if (this.lastMoveResult) {\n      return this;\n    }\n  }\n\n  return this;\n};\n\nvar targetTileXY = {\n  x: 0,\n  y: 0\n};\nvar globChessInfo = [];\nexport default MoveAway;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/moveto/MoveAway.js"],"names":["MoveAway","tileX","tileY","moveAwayMode","board","chessData","lastMoveResult","config","x","y","targetTileXY","undefined","myTileXYZ","tileXYZ","chessInfo","direction","directions","grid","allDirections","globChessInfo","length","i","cnt","push","out","getNeighborTileXY","distance","getDistance","previousDirection","destinationDirection","sort","infoA","infoB","moveTo"],"mappings":"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","sourcesContent":["var MoveAway = function (tileX, tileY, moveAwayMode) {\r\n    var board = this.chessData.board;\r\n    if (board === null) { // chess is not in a board\r\n        this.lastMoveResult = false;\r\n        return this;\r\n    }\r\n\r\n    if (typeof (tileX) !== 'number') {\r\n        var config = tileX;\r\n        tileX = config.x;\r\n        tileY = config.y;\r\n    }\r\n    targetTileXY.x = tileX;\r\n    targetTileXY.y = tileY;\r\n    if (moveAwayMode === undefined) {\r\n        moveAwayMode = true;\r\n    }\r\n\r\n    var myTileXYZ = this.chessData.tileXYZ,\r\n        chessInfo, direction;\r\n    var directions = board.grid.allDirections;\r\n    // Initial chess info of each neighbor and current tile position\r\n    if (globChessInfo.length !== (directions.length + 1)) {\r\n        globChessInfo.length = 0;\r\n        // Neighbors\r\n        for (var i = 0, cnt = directions.length; i < cnt; i++) {\r\n            globChessInfo.push({\r\n                direction: i\r\n            });\r\n        }\r\n        // current tile position\r\n        globChessInfo.push({\r\n            direction: null\r\n        });\r\n    }\r\n    // Get tileXY and distance of each neighbor and current tile position\r\n    var out;\r\n    for (var i = 0, cnt = globChessInfo.length; i < cnt; i++) {\r\n        chessInfo = globChessInfo[i];\r\n        direction = chessInfo.direction;\r\n        if (direction === null) { // Current tile position\r\n            chessInfo.x = myTileXYZ.x;\r\n            chessInfo.y = myTileXYZ.y;\r\n        } else { // Neighobrs\r\n            out = board.getNeighborTileXY(myTileXYZ, direction, chessInfo);\r\n            if (out === null) { // Invalid neighbor tile position\r\n                chessInfo.x = null;\r\n                chessInfo.y = null;\r\n                chessInfo.distance = null;\r\n                continue;\r\n            }\r\n        }\r\n        chessInfo.distance = board.getDistance(chessInfo, targetTileXY, true);\r\n    }\r\n    var previousDirection = this.destinationDirection;\r\n    // Sort chess info\r\n    globChessInfo.sort(function (infoA, infoB) {\r\n        // Invalid tile position\r\n        if (infoA.distance === null) {\r\n            return 1;\r\n        }\r\n        if (infoB.distance === null) {\r\n            return -1;\r\n        }\r\n\r\n        if (infoA.distance > infoB.distance) {\r\n            return (moveAwayMode) ? -1 : 1;\r\n        }\r\n        if (infoA.distance < infoB.distance) {\r\n            return (moveAwayMode) ? 1 : -1;\r\n        }\r\n\r\n        // Equal-to case\r\n        // Diagonal\r\n        if (infoA.direction === previousDirection) {\r\n            return 1;\r\n        }\r\n        if (infoB.direction === previousDirection) {\r\n            return -1;\r\n        }\r\n        // Current tile position\r\n        if (infoA.direction === null) {\r\n            return 1;\r\n        }\r\n        if (infoB.direction === null) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    });\r\n    // Try move to neighbor, or current tile position\r\n    for (var i = 0, cnt = globChessInfo.length; i < cnt; i++) {\r\n        chessInfo = globChessInfo[i];\r\n        if (chessInfo.distance === null) { // Invalid tile position\r\n            return this;\r\n        }\r\n        this.moveTo(chessInfo);\r\n        if (this.lastMoveResult) {\r\n            return this;\r\n        }\r\n    }\r\n    return this;\r\n}\r\n\r\nvar targetTileXY = {\r\n    x: 0,\r\n    y: 0\r\n}\r\nvar globChessInfo = [];\r\nexport default MoveAway;"]},"metadata":{},"sourceType":"module"}