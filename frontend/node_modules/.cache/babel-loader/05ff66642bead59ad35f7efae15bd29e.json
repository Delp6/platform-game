{"ast":null,"code":"import CONST from '../const.js';\nimport RandomInt from '../../../utils/math/Between.js';\nconst RANDOM = CONST['random'];\nconst DIAGONAL = CONST['diagonal'];\nconst STRAIGN = CONST['straight'];\nconst LINE = CONST['line'];\nconst ASTAR = CONST['A*'];\nconst ASTAR_LINE = CONST['A*-line'];\nconst ASTAR_RANDOM = CONST['A*-random'];\n\nvar GetNodePath = function (startNode, endNode, pathMode) {\n  var board = startNode.board;\n  var curDir, preNodeDir; // DIAGONAL, STRAIGN\n\n  var targetAngle; // LINE\n\n  var curNode = endNode,\n      preNode,\n      preNodeKeysCnt;\n  var path = [];\n\n  while (curNode.preNodes.length > 0) {\n    path.push(curNode);\n    preNodeKeysCnt = curNode.preNodes.length;\n\n    switch (pathMode) {\n      case ASTAR:\n      case ASTAR_LINE:\n      case ASTAR_RANDOM:\n        preNode = curNode.preNodes[0];\n        curNode = preNode;\n        break;\n\n      case RANDOM:\n        preNode = preNodeKeysCnt === 1 ? curNode.preNodes[0] : curNode.preNodes[RandomInt(0, preNodeKeysCnt - 1)];\n        curNode = preNode;\n        break;\n\n      case DIAGONAL:\n        for (var i = 0; i < preNodeKeysCnt; i++) {\n          preNode = curNode.preNodes[i];\n          preNodeDir = board.getNeighborTileDirection(curNode, preNode);\n\n          if (preNodeDir !== curDir) {\n            curDir = preNodeDir;\n            break;\n          }\n        }\n\n        curNode = preNode;\n        break;\n\n      case STRAIGN:\n        for (i = 0; i < preNodeKeysCnt; i++) {\n          preNode = curNode.preNodes[i];\n          preNodeDir = board.getNeighborTileDirection(curNode, preNode);\n\n          if (preNodeDir === curDir) {\n            break;\n          }\n        }\n\n        curDir = preNodeDir;\n        curNode = preNode;\n        break;\n\n      case LINE:\n        if (targetAngle === undefined) {\n          targetAngle = endNode.angleTo(startNode);\n        }\n\n        if (preNodeKeysCnt === 1) {\n          preNode = curNode.preNodes[0];\n          curNode = preNode;\n          targetAngle = endNode.angleTo(curNode);\n        } else {\n          preNode = curNode.preNodes[0];\n          var deltaAngle = Math.abs(endNode.angleTo(preNode) - targetAngle);\n          var preNodeB, deltaAngleB;\n\n          for (var i = 1; i < preNodeKeysCnt; i++) {\n            preNodeB = curNode.preNodes[i];\n            deltaAngleB = Math.abs(endNode.angleTo(preNodeB) - targetAngle);\n\n            if (deltaAngleB < deltaAngle) {\n              preNode = preNodeB;\n            }\n          }\n\n          curNode = preNode;\n        }\n\n        break;\n    }\n  }\n\n  return path.reverse();\n};\n\nexport default GetNodePath;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/pathfinder/astartsearch/GetNodePath.js"],"names":["CONST","RandomInt","RANDOM","DIAGONAL","STRAIGN","LINE","ASTAR","ASTAR_LINE","ASTAR_RANDOM","GetNodePath","startNode","endNode","pathMode","board","curDir","preNodeDir","targetAngle","curNode","preNode","preNodeKeysCnt","path","preNodes","length","push","i","getNeighborTileDirection","undefined","angleTo","deltaAngle","Math","abs","preNodeB","deltaAngleB","reverse"],"mappings":"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","sourcesContent":["import CONST from '../const.js';\r\nimport RandomInt from '../../../utils/math/Between.js';\r\n\r\nconst RANDOM = CONST['random'];\r\nconst DIAGONAL = CONST['diagonal'];\r\nconst STRAIGN = CONST['straight'];\r\nconst LINE = CONST['line'];\r\nconst ASTAR = CONST['A*'];\r\nconst ASTAR_LINE = CONST['A*-line'];\r\nconst ASTAR_RANDOM = CONST['A*-random'];\r\n\r\n\r\nvar GetNodePath = function (startNode, endNode, pathMode) {\r\n    var board = startNode.board;\r\n\r\n    var curDir, preNodeDir; // DIAGONAL, STRAIGN\r\n    var targetAngle; // LINE\r\n\r\n    var curNode = endNode,\r\n        preNode, preNodeKeysCnt;\r\n    var path = [];\r\n    while (curNode.preNodes.length > 0) {\r\n        path.push(curNode);\r\n        preNodeKeysCnt = curNode.preNodes.length;\r\n\r\n        switch (pathMode) {\r\n            case ASTAR:\r\n            case ASTAR_LINE:\r\n            case ASTAR_RANDOM:\r\n                preNode = curNode.preNodes[0];\r\n                curNode = preNode;\r\n                break;\r\n\r\n            case RANDOM:\r\n                preNode = (preNodeKeysCnt === 1) ? curNode.preNodes[0] : curNode.preNodes[RandomInt(0, preNodeKeysCnt - 1)];\r\n                curNode = preNode;\r\n                break;\r\n\r\n            case DIAGONAL:\r\n                for (var i = 0; i < preNodeKeysCnt; i++) {\r\n                    preNode = curNode.preNodes[i];\r\n                    preNodeDir = board.getNeighborTileDirection(curNode, preNode);\r\n                    if (preNodeDir !== curDir) {\r\n                        curDir = preNodeDir;\r\n                        break;\r\n                    }\r\n                }\r\n                curNode = preNode;\r\n                break;\r\n\r\n            case STRAIGN:\r\n                for (i = 0; i < preNodeKeysCnt; i++) {\r\n                    preNode = curNode.preNodes[i];\r\n                    preNodeDir = board.getNeighborTileDirection(curNode, preNode);\r\n                    if (preNodeDir === curDir) {\r\n                        break;\r\n                    }\r\n                }\r\n                curDir = preNodeDir;\r\n                curNode = preNode;\r\n                break;\r\n\r\n            case LINE:\r\n                if (targetAngle === undefined) {\r\n                    targetAngle = endNode.angleTo(startNode);\r\n                }\r\n                if (preNodeKeysCnt === 1) {\r\n                    preNode = curNode.preNodes[0];\r\n                    curNode = preNode;\r\n                    targetAngle = endNode.angleTo(curNode);\r\n                } else {\r\n                    preNode = curNode.preNodes[0];\r\n                    var deltaAngle = Math.abs(endNode.angleTo(preNode) - targetAngle);\r\n                    var preNodeB, deltaAngleB;\r\n                    for (var i = 1; i < preNodeKeysCnt; i++) {\r\n                        preNodeB = curNode.preNodes[i];\r\n                        deltaAngleB = Math.abs(endNode.angleTo(preNodeB) - targetAngle);\r\n                        if (deltaAngleB < deltaAngle) {\r\n                            preNode = preNodeB;\r\n                        }\r\n                    }\r\n                    curNode = preNode;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    return path.reverse();\r\n}\r\nexport default GetNodePath;"]},"metadata":{},"sourceType":"module"}