{"ast":null,"code":"var OnPointerDown = function (pointer) {\n  if (!this.input.enable) {\n    return;\n  }\n\n  if (!pointer.isDown) {\n    return;\n  }\n\n  if (this.input.pointer === null) {\n    // Catch new touch pointer\n    this.input.pointer = pointer;\n  }\n\n  var hitChess = OnTouchTileStart.call(this, pointer);\n\n  if (hitChess) {\n    OnDragStart.call(this, pointer);\n  }\n};\n\nvar OnTouchTileStart = function (pointer) {\n  // Get touched tileX, tileY\n  var gird = this.grid;\n  gird.saveOrigin();\n  gird.setOriginPosition(this.x, this.y);\n  var out = this.board.worldXYToTileXY(pointer.x, pointer.y, true);\n  var tileX = out.x,\n      tileY = out.y;\n  gird.restoreOrigin();\n  this.input.tilePosition.x = tileX;\n  this.input.tilePosition.y = tileY; // Get touched chess\n\n  var gameObjects = this.board.tileXYToChessArray(tileX, tileY, globChessArray);\n  var hitChess = gameObjects.length > 0;\n\n  if (hitChess) {\n    // Fire events\n    var gameObject;\n\n    for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {\n      gameObject = gameObjects[i];\n\n      if (gameObject.emit) {\n        gameObject.emit('miniboard.pointerdown', pointer);\n      }\n\n      this.emit('gameobjectdown', pointer, gameObject);\n    }\n\n    this.emit('pointerdown', pointer, this);\n  }\n\n  globChessArray.length = 0;\n  return hitChess;\n};\n\nvar OnDragStart = function (pointer) {\n  var dragData = this.input.drag; // Drag by another pointer\n\n  if (dragData.state === 1) {\n    return;\n  }\n\n  var dragPosition = dragData.position;\n  dragPosition.x = pointer.x - this.x;\n  dragPosition.y = pointer.y - this.y;\n  dragData.state = 1;\n  this.emit('dragstart', pointer, dragPosition.x, dragPosition.y);\n};\n\nvar globChessArray = [];\nexport default OnPointerDown;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/miniboard/input/OnPointerDown.js"],"names":["OnPointerDown","pointer","input","enable","isDown","hitChess","OnTouchTileStart","call","OnDragStart","gird","grid","saveOrigin","setOriginPosition","x","y","out","board","worldXYToTileXY","tileX","tileY","restoreOrigin","tilePosition","gameObjects","tileXYToChessArray","globChessArray","length","gameObject","i","cnt","emit","dragData","drag","state","dragPosition","position"],"mappings":"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","sourcesContent":["var OnPointerDown = function (pointer) {\r\n    if (!this.input.enable) {\r\n        return;\r\n    }\r\n    if (!pointer.isDown) {\r\n        return;\r\n    }\r\n\r\n    if (this.input.pointer === null) { // Catch new touch pointer\r\n        this.input.pointer = pointer;\r\n    }\r\n\r\n    var hitChess = OnTouchTileStart.call(this, pointer);\r\n    if (hitChess) {\r\n        OnDragStart.call(this, pointer);\r\n    }\r\n}\r\n\r\nvar OnTouchTileStart = function (pointer) {\r\n    // Get touched tileX, tileY\r\n    var gird = this.grid;\r\n    gird.saveOrigin();\r\n    gird.setOriginPosition(this.x, this.y);\r\n    var out = this.board.worldXYToTileXY(pointer.x, pointer.y, true);\r\n    var tileX = out.x,\r\n        tileY = out.y;\r\n    gird.restoreOrigin();\r\n    this.input.tilePosition.x = tileX;\r\n    this.input.tilePosition.y = tileY;\r\n\r\n    // Get touched chess\r\n    var gameObjects = this.board.tileXYToChessArray(tileX, tileY, globChessArray);\r\n    var hitChess = (gameObjects.length > 0);\r\n    if (hitChess) {\r\n        // Fire events\r\n        var gameObject;\r\n        for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {\r\n            gameObject = gameObjects[i];\r\n            if (gameObject.emit) {\r\n                gameObject.emit('miniboard.pointerdown', pointer);\r\n            }\r\n            this.emit('gameobjectdown', pointer, gameObject);\r\n        }\r\n        this.emit('pointerdown', pointer, this);\r\n    }\r\n    globChessArray.length = 0;\r\n    return hitChess;\r\n}\r\n\r\nvar OnDragStart = function (pointer) {\r\n    var dragData = this.input.drag;\r\n    // Drag by another pointer\r\n    if (dragData.state === 1) {\r\n        return;\r\n    }\r\n\r\n    var dragPosition = dragData.position;\r\n    dragPosition.x = pointer.x - this.x;\r\n    dragPosition.y = pointer.y - this.y;\r\n    dragData.state = 1;\r\n    this.emit('dragstart', pointer, dragPosition.x, dragPosition.y);\r\n}\r\n\r\nvar globChessArray = [];\r\n\r\nexport default OnPointerDown;"]},"metadata":{},"sourceType":"module"}