{"ast":null,"code":"import Methods from './Methods.js';\nimport GetChessData from '../chess/GetChessData.js';\nimport CONST from './const.js';\nimport GetValue from '../../utils/object/GetValue.js';\nconst BLOCKER = CONST.BLOCKER;\nconst STOP = CONST.STOP;\n\nclass Monopoly {\n  constructor(gameObject, config) {\n    this.gameObject = gameObject;\n    this.chessData = GetChessData(gameObject);\n    this.resetFromJSON(config);\n  }\n\n  resetFromJSON(o) {\n    this.preTileXY = GetValue(o, 'preTileXY', undefined);\n    var costCallback = GetValue(o, 'costCallback', undefined);\n    var costCallbackScope = GetValue(o, 'costCallbackScope', undefined);\n\n    if (costCallback === undefined) {\n      costCallback = GetValue(o, 'cost', 1);\n    }\n\n    this.setFace(GetValue(o, 'face', 0));\n    this.setPathMode(GetValue(o, 'pathMode', 0));\n    this.setPathTileZ(GetValue(o, 'pathTileZ', 0));\n    this.setCostFunction(costCallback, costCallbackScope);\n    return this;\n  }\n\n  boot() {\n    if (this.gameObject.once) {\n      // oops, bob object does not have event emitter\n      this.gameObject.on('destroy', this.destroy, this);\n    }\n  }\n\n  shutdown() {\n    this.gameObject = undefined;\n    this.chessData = undefined;\n    return this;\n  }\n\n  destroy() {\n    this.shutdown();\n    return this;\n  }\n\n  setFace(direction) {\n    direction = this.board.grid.directionNormalize(direction);\n    this.face = direction;\n    return this;\n  }\n\n  setPathMode(mode) {\n    if (typeof mode === 'string') {\n      mode = PATHMODE[mode];\n    }\n\n    this.pathMode = mode;\n    return this;\n  }\n\n  setCostFunction(callback, scope) {\n    this.costCallback = callback;\n    this.costCallbackScope = scope;\n    return this;\n  }\n\n  setPathTileZ(value) {\n    if (value === undefined) {\n      value = true;\n    }\n\n    this.pathTileZ = value;\n    return this;\n  }\n\n  get BLOCKER() {\n    return BLOCKER;\n  }\n\n  get STOP() {\n    return STOP;\n  }\n\n  get board() {\n    return this.chessData.board;\n  }\n\n}\n\nObject.assign(Monopoly.prototype, Methods);\nconst PATHMODE = {\n  'forward': 0,\n  'random': 1\n};\nexport default Monopoly;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/monopoly/Monopoly.js"],"names":["Methods","GetChessData","CONST","GetValue","BLOCKER","STOP","Monopoly","constructor","gameObject","config","chessData","resetFromJSON","o","preTileXY","undefined","costCallback","costCallbackScope","setFace","setPathMode","setPathTileZ","setCostFunction","boot","once","on","destroy","shutdown","direction","board","grid","directionNormalize","face","mode","PATHMODE","pathMode","callback","scope","value","pathTileZ","Object","assign","prototype"],"mappings":"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","sourcesContent":["import Methods from './Methods.js';\r\nimport GetChessData from '../chess/GetChessData.js';\r\nimport CONST from './const.js';\r\nimport GetValue from '../../utils/object/GetValue.js';\r\n\r\nconst BLOCKER = CONST.BLOCKER;\r\nconst STOP = CONST.STOP;\r\n\r\nclass Monopoly {\r\n    constructor(gameObject, config) {\r\n        this.gameObject = gameObject;\r\n        this.chessData = GetChessData(gameObject);\r\n        this.resetFromJSON(config);\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        this.preTileXY = GetValue(o, 'preTileXY', undefined);\r\n        var costCallback = GetValue(o, 'costCallback', undefined);\r\n        var costCallbackScope = GetValue(o, 'costCallbackScope', undefined);\r\n        if (costCallback === undefined) {\r\n            costCallback = GetValue(o, 'cost', 1);\r\n        }\r\n        this.setFace(GetValue(o, 'face', 0));\r\n        this.setPathMode(GetValue(o, 'pathMode', 0));\r\n        this.setPathTileZ(GetValue(o, 'pathTileZ', 0));\r\n        this.setCostFunction(costCallback, costCallbackScope);\r\n        return this;\r\n    }\r\n\r\n    boot() {\r\n        if (this.gameObject.once) { // oops, bob object does not have event emitter\r\n            this.gameObject.on('destroy', this.destroy, this);\r\n        }\r\n    }\r\n\r\n    shutdown() {\r\n        this.gameObject = undefined;\r\n        this.chessData = undefined;\r\n        return this;\r\n    }\r\n\r\n    destroy() {\r\n        this.shutdown();\r\n        return this;\r\n    }\r\n\r\n    setFace(direction) {\r\n        direction = this.board.grid.directionNormalize(direction);\r\n        this.face = direction;\r\n        return this;\r\n    }\r\n\r\n    setPathMode(mode) {\r\n        if (typeof (mode) === 'string') {\r\n            mode = PATHMODE[mode];\r\n        }\r\n        this.pathMode = mode;\r\n        return this;\r\n    }\r\n\r\n    setCostFunction(callback, scope) {\r\n        this.costCallback = callback;\r\n        this.costCallbackScope = scope;\r\n        return this;\r\n    }\r\n\r\n    setPathTileZ(value) {\r\n        if (value === undefined) {\r\n            value = true;\r\n        }\r\n        this.pathTileZ = value;\r\n        return this;\r\n    }\r\n\r\n    get BLOCKER() {\r\n        return BLOCKER;\r\n    }\r\n\r\n    get STOP() {\r\n        return STOP;\r\n    }\r\n\r\n    get board() {\r\n        return this.chessData.board;\r\n    }\r\n}\r\n\r\nObject.assign(\r\n    Monopoly.prototype,\r\n    Methods\r\n);\r\n\r\nconst PATHMODE = {\r\n    'forward': 0,\r\n    'random': 1\r\n}\r\nexport default Monopoly;"]},"metadata":{},"sourceType":"module"}