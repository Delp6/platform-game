{"ast":null,"code":"var GetTileXY = function (worldX, worldY, out) {\n  if (out === undefined) {\n    out = {};\n  } else if (out === true) {\n    out = globTileXY;\n  }\n\n  worldX -= this.x;\n  worldY -= this.y;\n  var tmpx = worldX / this.width;\n  var tmpy = worldY / this.height;\n\n  switch (this.mode) {\n    case 0:\n      // orthogonal\n      out.x = Math.round(tmpx);\n      out.y = Math.round(tmpy);\n      break;\n\n    case 1:\n      // isometric            \n      out.x = Math.round(+tmpx + tmpy);\n      out.y = Math.round(-tmpx + tmpy);\n      break;\n  }\n\n  return out;\n};\n\nvar globTileXY = {};\nexport default GetTileXY;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/utils/grid/quad/GetTileXY.js"],"names":["GetTileXY","worldX","worldY","out","undefined","globTileXY","x","y","tmpx","width","tmpy","height","mode","Math","round"],"mappings":"AAAA,IAAIA,SAAS,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,GAA1B,EAA+B;AAC3C,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AACnBD,IAAAA,GAAG,GAAG,EAAN;AACH,GAFD,MAEO,IAAIA,GAAG,KAAK,IAAZ,EAAkB;AACrBA,IAAAA,GAAG,GAAGE,UAAN;AACH;;AAEDJ,EAAAA,MAAM,IAAI,KAAKK,CAAf;AACAJ,EAAAA,MAAM,IAAI,KAAKK,CAAf;AACA,MAAIC,IAAI,GAAGP,MAAM,GAAG,KAAKQ,KAAzB;AACA,MAAIC,IAAI,GAAGR,MAAM,GAAG,KAAKS,MAAzB;;AACA,UAAQ,KAAKC,IAAb;AACI,SAAK,CAAL;AAAQ;AACJT,MAAAA,GAAG,CAACG,CAAJ,GAAQO,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAR;AACAL,MAAAA,GAAG,CAACI,CAAJ,GAAQM,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAR;AACA;;AACJ,SAAK,CAAL;AAAQ;AACJP,MAAAA,GAAG,CAACG,CAAJ,GAAQO,IAAI,CAACC,KAAL,CAAW,CAACN,IAAD,GAAQE,IAAnB,CAAR;AACAP,MAAAA,GAAG,CAACI,CAAJ,GAAQM,IAAI,CAACC,KAAL,CAAW,CAACN,IAAD,GAAQE,IAAnB,CAAR;AACA;AARR;;AAUA,SAAOP,GAAP;AACH,CAtBD;;AAwBA,IAAIE,UAAU,GAAG,EAAjB;AAEA,eAAeL,SAAf","sourcesContent":["var GetTileXY = function (worldX, worldY, out) {\r\n    if (out === undefined) {\r\n        out = {};\r\n    } else if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    worldX -= this.x;\r\n    worldY -= this.y;\r\n    var tmpx = worldX / this.width;\r\n    var tmpy = worldY / this.height;\r\n    switch (this.mode) {\r\n        case 0: // orthogonal\r\n            out.x = Math.round(tmpx);\r\n            out.y = Math.round(tmpy);\r\n            break;\r\n        case 1: // isometric            \r\n            out.x = Math.round(+tmpx + tmpy);\r\n            out.y = Math.round(-tmpx + tmpy);\r\n            break;\r\n    }\r\n    return out;\r\n}\r\n\r\nvar globTileXY = {};\r\n\r\nexport default GetTileXY;"]},"metadata":{},"sourceType":"module"}