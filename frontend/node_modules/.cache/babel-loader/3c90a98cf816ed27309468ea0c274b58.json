{"ast":null,"code":"import CONST from './const.js';\nconst AREA_MODE = CONST.AREA_MODE;\nconst INFINITY = CONST.INFINITY; // undefined\n\nvar FindArea = function (movingPoints, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (this.board === null) {\n    // chess is not in board\n    return out;\n  }\n\n  if (movingPoints !== INFINITY && movingPoints <= 0) {\n    return out;\n  }\n\n  var startTileXYZ = this.chessData.tileXYZ,\n      startTileX = startTileXYZ.x,\n      startTileY = startTileXYZ.y;\n  this.aStarSearch(startTileXYZ, null, movingPoints, AREA_MODE); // output : this.nodeManager.getAllNodes()\n\n  var nodes = this.nodeManager.getAllNodes(),\n      node,\n      nodesList = [];\n\n  for (var key in nodes) {\n    node = nodes[key]; // not include start node\n\n    if (node.x === startTileX && node.y === startTileY) {\n      continue;\n    } // not include open node\n\n\n    if (!node.closed) {\n      continue;\n    }\n\n    nodesList.push(node);\n  } // sort by sn (creating order)\n\n\n  nodesList.sort(function (nodeA, nodeB) {\n    var snA = nodeA.sn;\n    var snB = nodeB.sn;\n    return snA > snB ? 1 : snA < snB ? -1 : 0;\n  });\n\n  for (var i = 0, cnt = nodesList.length; i < cnt; i++) {\n    node = nodesList[i];\n    out.push({\n      x: node.x,\n      y: node.y,\n      cost: node.g\n    });\n  }\n\n  return out;\n};\n\nexport default FindArea;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/pathfinder/FindArea.js"],"names":["CONST","AREA_MODE","INFINITY","FindArea","movingPoints","out","undefined","board","startTileXYZ","chessData","tileXYZ","startTileX","x","startTileY","y","aStarSearch","nodes","nodeManager","getAllNodes","node","nodesList","key","closed","push","sort","nodeA","nodeB","snA","sn","snB","i","cnt","length","cost","g"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AAEA,MAAMC,SAAS,GAAGD,KAAK,CAACC,SAAxB;AACA,MAAMC,QAAQ,GAAGF,KAAK,CAACE,QAAvB,C,CAAkC;;AAElC,IAAIC,QAAQ,GAAG,UAAUC,YAAV,EAAwBC,GAAxB,EAA6B;AACxC,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AACnBD,IAAAA,GAAG,GAAG,EAAN;AACH;;AACD,MAAI,KAAKE,KAAL,KAAe,IAAnB,EAAyB;AAAE;AACvB,WAAOF,GAAP;AACH;;AACD,MAAKD,YAAY,KAAKF,QAAlB,IAAgCE,YAAY,IAAI,CAApD,EAAwD;AACpD,WAAOC,GAAP;AACH;;AAED,MAAIG,YAAY,GAAG,KAAKC,SAAL,CAAeC,OAAlC;AAAA,MACIC,UAAU,GAAGH,YAAY,CAACI,CAD9B;AAAA,MAEIC,UAAU,GAAGL,YAAY,CAACM,CAF9B;AAGA,OAAKC,WAAL,CAAiBP,YAAjB,EAA+B,IAA/B,EAAqCJ,YAArC,EAAmDH,SAAnD,EAdwC,CAexC;;AACA,MAAIe,KAAK,GAAG,KAAKC,WAAL,CAAiBC,WAAjB,EAAZ;AAAA,MACIC,IADJ;AAAA,MACUC,SAAS,GAAG,EADtB;;AAEA,OAAK,IAAIC,GAAT,IAAgBL,KAAhB,EAAuB;AACnBG,IAAAA,IAAI,GAAGH,KAAK,CAACK,GAAD,CAAZ,CADmB,CAEnB;;AACA,QAAKF,IAAI,CAACP,CAAL,KAAWD,UAAZ,IAA4BQ,IAAI,CAACL,CAAL,KAAWD,UAA3C,EAAwD;AACpD;AACH,KALkB,CAMnB;;;AACA,QAAI,CAACM,IAAI,CAACG,MAAV,EAAkB;AACd;AACH;;AACDF,IAAAA,SAAS,CAACG,IAAV,CAAeJ,IAAf;AACH,GA7BuC,CA8BxC;;;AACAC,EAAAA,SAAS,CAACI,IAAV,CAAe,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AACnC,QAAIC,GAAG,GAAGF,KAAK,CAACG,EAAhB;AACA,QAAIC,GAAG,GAAGH,KAAK,CAACE,EAAhB;AACA,WAAQD,GAAG,GAAGE,GAAP,GAAc,CAAd,GACFF,GAAG,GAAGE,GAAP,GAAc,CAAC,CAAf,GACA,CAFJ;AAGH,GAND;;AAOA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGX,SAAS,CAACY,MAAhC,EAAwCF,CAAC,GAAGC,GAA5C,EAAiDD,CAAC,EAAlD,EAAsD;AAClDX,IAAAA,IAAI,GAAGC,SAAS,CAACU,CAAD,CAAhB;AACAzB,IAAAA,GAAG,CAACkB,IAAJ,CAAS;AACLX,MAAAA,CAAC,EAAEO,IAAI,CAACP,CADH;AAELE,MAAAA,CAAC,EAAEK,IAAI,CAACL,CAFH;AAGLmB,MAAAA,IAAI,EAAEd,IAAI,CAACe;AAHN,KAAT;AAKH;;AACD,SAAO7B,GAAP;AACH,CA/CD;;AAgDA,eAAeF,QAAf","sourcesContent":["import CONST from './const.js';\r\n\r\nconst AREA_MODE = CONST.AREA_MODE;\r\nconst INFINITY = CONST.INFINITY;  // undefined\r\n\r\nvar FindArea = function (movingPoints, out) {\r\n    if (out === undefined) {\r\n        out = [];\r\n    }\r\n    if (this.board === null) { // chess is not in board\r\n        return out;\r\n    }\r\n    if ((movingPoints !== INFINITY) && (movingPoints <= 0)) {\r\n        return out;\r\n    }\r\n\r\n    var startTileXYZ = this.chessData.tileXYZ,\r\n        startTileX = startTileXYZ.x,\r\n        startTileY = startTileXYZ.y;\r\n    this.aStarSearch(startTileXYZ, null, movingPoints, AREA_MODE);\r\n    // output : this.nodeManager.getAllNodes()\r\n    var nodes = this.nodeManager.getAllNodes(),\r\n        node, nodesList = [];\r\n    for (var key in nodes) {\r\n        node = nodes[key];\r\n        // not include start node\r\n        if ((node.x === startTileX) && (node.y === startTileY)) {\r\n            continue;\r\n        }\r\n        // not include open node\r\n        if (!node.closed) {\r\n            continue;\r\n        }\r\n        nodesList.push(node);\r\n    }\r\n    // sort by sn (creating order)\r\n    nodesList.sort(function (nodeA, nodeB) {\r\n        var snA = nodeA.sn;\r\n        var snB = nodeB.sn;\r\n        return (snA > snB) ? 1 :\r\n            (snA < snB) ? -1 :\r\n            0;\r\n    });\r\n    for (var i = 0, cnt = nodesList.length; i < cnt; i++) {\r\n        node = nodesList[i];\r\n        out.push({\r\n            x: node.x,\r\n            y: node.y,\r\n            cost: node.g\r\n        });\r\n    }\r\n    return out;\r\n}\r\nexport default FindArea;"]},"metadata":{},"sourceType":"module"}