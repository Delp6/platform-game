{"ast":null,"code":"var OnPointerMove = function (pointer) {\n  if (!this.input.enable) {\n    return;\n  }\n\n  OnTouchTileMove.call(this, pointer);\n  OnDrag.call(this, pointer);\n};\n\nvar OnTouchTileMove = function (pointer) {\n  // Get touched tileX, tileY\n  var gird = this.grid;\n  gird.saveOrigin();\n  gird.setOriginPosition(this.x, this.y);\n  var out = this.board.worldXYToTileXY(pointer.x, pointer.y, true);\n  var tileX = out.x,\n      tileY = out.y;\n  gird.restoreOrigin();\n\n  if (this.input.tilePosition.x === tileX && this.input.tilePosition.y === tileY) {\n    // Tile position dose not change\n    return;\n  }\n\n  this.input.tilePosition.x = tileX;\n  this.input.tilePosition.y = tileY; // Get touched chess\n\n  var gameObjects = this.board.tileXYToChessArray(tileX, tileY, globChessArray);\n  var hitChess = gameObjects.length > 0;\n\n  if (hitChess) {\n    // Fire events\n    var gameObject;\n\n    for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {\n      gameObject = gameObjects[i];\n\n      if (gameObject.emit) {\n        gameObject.emit('miniboard.pointermove', pointer);\n      }\n\n      this.emit('gameobjectmove', pointer, gameObject);\n    }\n\n    this.emit('pointermove', pointer, this);\n  } else {\n    // Move outside\n    if (this.input.pointer === pointer) {\n      // Release touch pointer\n      this.input.pointer = null;\n    }\n  }\n\n  globChessArray.length = 0; // Not dragging\n\n  if (this.input.drag.state === 0) {\n    if (this.input.pointer === pointer) {\n      if (!hitChess) {\n        this.input.pointer = null; // Release touch pointer\n      }\n    } else if (this.input.pointer === null) {\n      this.input.pointer = pointer; // Catch new touch pointer\n    }\n  }\n};\n\nvar OnDrag = function (pointer) {\n  var dragData = this.input.drag; // Not dragging\n\n  if (dragData.state === 0) {\n    return;\n  }\n\n  var dragPosition = dragData.position;\n  var dragX = pointer.x - dragPosition.x;\n  var dragY = pointer.y - dragPosition.y;\n  this.emit('drag', pointer, dragX, dragY);\n};\n\nvar globChessArray = [];\nexport default OnPointerMove;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/miniboard/input/OnPointerMove.js"],"names":["OnPointerMove","pointer","input","enable","OnTouchTileMove","call","OnDrag","gird","grid","saveOrigin","setOriginPosition","x","y","out","board","worldXYToTileXY","tileX","tileY","restoreOrigin","tilePosition","gameObjects","tileXYToChessArray","globChessArray","hitChess","length","gameObject","i","cnt","emit","drag","state","dragData","dragPosition","position","dragX","dragY"],"mappings":"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","sourcesContent":["var OnPointerMove = function (pointer) {\r\n    if (!this.input.enable) {\r\n        return;\r\n    }\r\n\r\n    OnTouchTileMove.call(this, pointer);\r\n    OnDrag.call(this, pointer);\r\n}\r\n\r\nvar OnTouchTileMove = function (pointer) {\r\n    // Get touched tileX, tileY\r\n    var gird = this.grid;\r\n    gird.saveOrigin();\r\n    gird.setOriginPosition(this.x, this.y);\r\n    var out = this.board.worldXYToTileXY(pointer.x, pointer.y, true);\r\n    var tileX = out.x,\r\n        tileY = out.y;\r\n    gird.restoreOrigin();\r\n\r\n    if ((this.input.tilePosition.x === tileX) && (this.input.tilePosition.y === tileY)) {\r\n        // Tile position dose not change\r\n        return;\r\n    }\r\n    this.input.tilePosition.x = tileX;\r\n    this.input.tilePosition.y = tileY;\r\n\r\n    // Get touched chess\r\n    var gameObjects = this.board.tileXYToChessArray(tileX, tileY, globChessArray);\r\n    var hitChess = (gameObjects.length > 0);\r\n    if (hitChess) {\r\n        // Fire events\r\n        var gameObject;\r\n        for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {\r\n            gameObject = gameObjects[i];\r\n            if (gameObject.emit) {\r\n                gameObject.emit('miniboard.pointermove', pointer);\r\n            }\r\n            this.emit('gameobjectmove', pointer, gameObject);\r\n        }\r\n        this.emit('pointermove', pointer, this);\r\n    } else {\r\n        // Move outside\r\n        if (this.input.pointer === pointer) { // Release touch pointer\r\n            this.input.pointer = null;\r\n        }\r\n    }\r\n    globChessArray.length = 0;\r\n\r\n    // Not dragging\r\n    if (this.input.drag.state === 0) {\r\n        if (this.input.pointer === pointer) {\r\n            if (!hitChess) {\r\n                this.input.pointer = null; // Release touch pointer\r\n            }\r\n        } else if (this.input.pointer === null) {\r\n            this.input.pointer = pointer; // Catch new touch pointer\r\n        }\r\n    }\r\n}\r\n\r\nvar OnDrag = function (pointer) {\r\n    var dragData = this.input.drag;\r\n    // Not dragging\r\n    if (dragData.state === 0) {\r\n        return;\r\n    }\r\n\r\n    var dragPosition = dragData.position;\r\n    var dragX = pointer.x - dragPosition.x;\r\n    var dragY = pointer.y - dragPosition.y;\r\n    this.emit('drag', pointer, dragX, dragY);\r\n}\r\n\r\nvar globChessArray = [];\r\n\r\nexport default OnPointerMove;"]},"metadata":{},"sourceType":"module"}