{"ast":null,"code":"import CreateChessData from '../chess/GetChessData.js';\nimport IsMiniBoardObject from './../miniboard/IsMiniBoardObject.js';\nconst Base = Phaser.GameObjects.Polygon;\n\nclass Shape extends Base {\n  constructor(board, tileX, tileY, tileZ, fillColor, fillAlpha, addToBoard) {\n    if (addToBoard === undefined) {\n      addToBoard = true;\n    } // Chess-Container\n\n\n    var isMiniBoard = IsMiniBoardObject(board),\n        miniBoard;\n\n    if (isMiniBoard) {\n      miniBoard = board;\n      board = miniBoard.board;\n    }\n\n    var scene = board.scene;\n    var worldX, worldY;\n\n    if (addToBoard) {\n      worldX = 0;\n      worldY = 0;\n    } else {\n      worldX = tileX;\n      worldY = tileY;\n    }\n\n    var points = board.getGridPoints(undefined, undefined, true);\n    shiftToO(points);\n    super(scene, worldX, worldY, points, fillColor, fillAlpha);\n\n    if (addToBoard) {\n      if (isMiniBoard) {\n        // Chess-Container\n        miniBoard.addChess(this, tileX, tileY, tileZ);\n      } else {\n        board.addChess(this, tileX, tileY, tileZ, true);\n      }\n    } else {\n      CreateChessData(this);\n    }\n  }\n\n}\n\nvar shiftToO = function (points) {\n  var minX = Infinity;\n  var minY = Infinity;\n  var point;\n\n  for (var i = 0, cnt = points.length; i < cnt; i++) {\n    point = points[i];\n    minX = Math.min(minX, point.x);\n    minY = Math.min(minY, point.y);\n  }\n\n  if (minX === 0 && minY === 0) {\n    return points;\n  }\n\n  for (var i = 0, cnt = points.length; i < cnt; i++) {\n    point = points[i];\n    point.x -= minX;\n    point.y -= minY;\n  }\n\n  return points;\n};\n\nexport default Shape;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/shape/Shape.js"],"names":["CreateChessData","IsMiniBoardObject","Base","Phaser","GameObjects","Polygon","Shape","constructor","board","tileX","tileY","tileZ","fillColor","fillAlpha","addToBoard","undefined","isMiniBoard","miniBoard","scene","worldX","worldY","points","getGridPoints","shiftToO","addChess","minX","Infinity","minY","point","i","cnt","length","Math","min","x","y"],"mappings":"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","sourcesContent":["import CreateChessData from '../chess/GetChessData.js';\r\nimport IsMiniBoardObject from './../miniboard/IsMiniBoardObject.js';\r\n\r\nconst Base = Phaser.GameObjects.Polygon;\r\nclass Shape extends Base {\r\n    constructor(board, tileX, tileY, tileZ, fillColor, fillAlpha, addToBoard) {\r\n        if (addToBoard === undefined) {\r\n            addToBoard = true;\r\n        }\r\n\r\n        // Chess-Container\r\n        var isMiniBoard = IsMiniBoardObject(board),\r\n            miniBoard;\r\n        if (isMiniBoard) {\r\n            miniBoard = board;\r\n            board = miniBoard.board;\r\n        }\r\n\r\n        var scene = board.scene;\r\n        var worldX, worldY;\r\n        if (addToBoard) {\r\n            worldX = 0;\r\n            worldY = 0;\r\n        } else {\r\n            worldX = tileX;\r\n            worldY = tileY;\r\n        }\r\n        var points = board.getGridPoints(undefined, undefined, true);\r\n        shiftToO(points);\r\n        super(scene, worldX, worldY, points, fillColor, fillAlpha);\r\n\r\n        if (addToBoard) {\r\n            if (isMiniBoard) { // Chess-Container\r\n                miniBoard.addChess(this, tileX, tileY, tileZ);\r\n            } else {\r\n                board.addChess(this, tileX, tileY, tileZ, true);\r\n            }\r\n        } else {\r\n            CreateChessData(this);\r\n        }\r\n    }\r\n}\r\n\r\nvar shiftToO = function (points) {\r\n    var minX = Infinity;\r\n    var minY = Infinity;\r\n    var point;\r\n    for (var i = 0, cnt = points.length; i < cnt; i++) {\r\n        point = points[i];\r\n        minX = Math.min(minX, point.x);\r\n        minY = Math.min(minY, point.y);\r\n    }\r\n    if ((minX === 0) && (minY === 0)) {\r\n        return points;\r\n    }\r\n    for (var i = 0, cnt = points.length; i < cnt; i++) {\r\n        point = points[i];\r\n        point.x -= minX;\r\n        point.y -= minY;\r\n    }\r\n    return points;\r\n}\r\n\r\nexport default Shape;"]},"metadata":{},"sourceType":"module"}