{"ast":null,"code":"import ChessBank from './ChessBank.js';\nimport GetTileDirection from './GetTileDirection.js';\nimport IsPlainObject from '../../utils/object/IsPlainObject.js';\nconst uidKey = ChessBank.uidKey;\n\nclass Chess {\n  constructor(parent, uid) {\n    this.parent = parent;\n    ChessBank.add(this, uid); // uid is stored in `this.$uid`\n\n    this.board = null;\n    this.blocker = false;\n    this.boot();\n  }\n\n  boot() {\n    var type = typeof this.parent;\n\n    if (type !== 'number' && type !== 'string' && this.parent.on) {\n      this.parent.on('destroy', this.destroy, this);\n    }\n  }\n\n  destroy() {\n    if (this.board) {\n      this.board.removeChess(this[uidKey]);\n    }\n\n    ChessBank.remove(this[uidKey]);\n    this.parent = undefined;\n    this.board = null;\n  }\n\n  setBoard(board) {\n    this.board = board;\n    return this;\n  }\n\n  get tileXYZ() {\n    if (this.board == null) {\n      return null;\n    }\n\n    return this.board.chessToTileXYZ(this[uidKey]);\n  }\n\n  setTileZ(tileZ) {\n    if (this.board == null) {\n      return this;\n    }\n\n    var tileXYZ = this.tileXYZ;\n    this.board.addChess(this.$uid, tileXYZ.x, tileXYZ.y, tileZ, false);\n  }\n\n  setBlocker(value) {\n    if (value === undefined) {\n      value = true;\n    }\n\n    this.blocker = value;\n    return this;\n  }\n\n  setBlockEdge(direction, value) {\n    if (this.blocker === false) {\n      this.blocker = {};\n    }\n\n    var blocker = this.blocker;\n\n    if (IsPlainObject(direction)) {\n      var blockEdges = direction;\n\n      for (direction in blockEdges) {\n        blocker[direction] = blockEdges[direction];\n      }\n    } else {\n      if (value === undefined) {\n        value = true;\n      }\n\n      blocker[direction] = value;\n    }\n\n    return this;\n  }\n\n  getBlockEdge(direction) {\n    var blocker = this.blocker;\n\n    if (blocker === false) {\n      return false;\n    }\n\n    if (!blocker.hasOwnProperty(direction)) {\n      return false;\n    } else {\n      return blocker[direction];\n    }\n  }\n\n}\n\nvar methods = {\n  getTileDirection: GetTileDirection\n};\nObject.assign(Chess.prototype, methods);\nexport default Chess;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/chess/ChessData.js"],"names":["ChessBank","GetTileDirection","IsPlainObject","uidKey","Chess","constructor","parent","uid","add","board","blocker","boot","type","on","destroy","removeChess","remove","undefined","setBoard","tileXYZ","chessToTileXYZ","setTileZ","tileZ","addChess","$uid","x","y","setBlocker","value","setBlockEdge","direction","blockEdges","getBlockEdge","hasOwnProperty","methods","getTileDirection","Object","assign","prototype"],"mappings":"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","sourcesContent":["import ChessBank from './ChessBank.js';\r\nimport GetTileDirection from './GetTileDirection.js';\r\nimport IsPlainObject from '../../utils/object/IsPlainObject.js';\r\n\r\nconst uidKey = ChessBank.uidKey;\r\n\r\nclass Chess {\r\n    constructor(parent, uid) {\r\n        this.parent = parent;\r\n        ChessBank.add(this, uid); // uid is stored in `this.$uid`\r\n        this.board = null;\r\n        this.blocker = false;\r\n        this.boot();\r\n    }\r\n\r\n    boot() {\r\n        var type = typeof (this.parent);\r\n        if ((type !== 'number') && (type !== 'string') && this.parent.on) {\r\n            this.parent.on('destroy', this.destroy, this);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        if (this.board) {\r\n            this.board.removeChess(this[uidKey]);\r\n        }\r\n        ChessBank.remove(this[uidKey]);\r\n\r\n        this.parent = undefined;\r\n        this.board = null;\r\n    }\r\n\r\n    setBoard(board) {\r\n        this.board = board;\r\n        return this;\r\n    }\r\n\r\n    get tileXYZ() {\r\n        if (this.board == null) {\r\n            return null;\r\n        }\r\n        return this.board.chessToTileXYZ(this[uidKey]);\r\n    }\r\n\r\n    setTileZ(tileZ) {\r\n        if (this.board == null) {\r\n            return this;\r\n        }\r\n        var tileXYZ = this.tileXYZ;\r\n        this.board.addChess(this.$uid, tileXYZ.x, tileXYZ.y, tileZ, false);\r\n    }\r\n\r\n    setBlocker(value) {\r\n        if (value === undefined) {\r\n            value = true;\r\n        }\r\n        this.blocker = value;\r\n        return this;\r\n    }\r\n\r\n    setBlockEdge(direction, value) {\r\n        if (this.blocker === false) {\r\n            this.blocker = {};\r\n        }\r\n        var blocker = this.blocker;\r\n        if (IsPlainObject(direction)) {\r\n            var blockEdges = direction;\r\n            for (direction in blockEdges) {\r\n                blocker[direction] = blockEdges[direction];\r\n            }\r\n        } else {\r\n            if (value === undefined) {\r\n                value = true;\r\n            }\r\n            blocker[direction] = value;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    getBlockEdge(direction) {\r\n        var blocker = this.blocker;\r\n        if (blocker === false) {\r\n            return false;\r\n        }\r\n\r\n        if (!blocker.hasOwnProperty(direction)) {\r\n            return false;\r\n        } else {\r\n            return blocker[direction];\r\n        }\r\n    }\r\n}\r\n\r\nvar methods = {\r\n    getTileDirection: GetTileDirection\r\n};\r\nObject.assign(\r\n    Chess.prototype,\r\n    methods\r\n);\r\nexport default Chess;"]},"metadata":{},"sourceType":"module"}