{"ast":null,"code":"const ArrayUtils = Phaser.Utils.Array;\nexport default {\n  getChildren() {\n    return this.children;\n  },\n\n  getAllChildren(out) {\n    if (out === undefined) {\n      out = [];\n    }\n\n    var myCildren = this.children,\n        myChild;\n\n    for (var i = 0, cnt = myCildren.length; i < cnt; i++) {\n      myChild = myCildren[i];\n      out.push(myChild);\n\n      if (myChild.hasOwnProperty('isRexContainerLite')) {\n        out.push(...myChild.getAllChildren());\n      }\n    }\n\n    return out;\n  },\n\n  contains(gameObject) {\n    // Override Base.contains method\n    var parent = this.getParent(gameObject);\n\n    if (!parent) {\n      return false;\n    } else if (parent === this) {\n      return true;\n    } else {\n      return this.contains(parent);\n    }\n  },\n\n  getByName(name, recursive) {\n    if (!recursive) {\n      return ArrayUtils.GetFirst(this.children, 'name', name); // object, or null if not found\n    } else {\n      // recursive\n      // Breadth-first search\n      var queue = [this];\n      var parent, child;\n\n      while (queue.length) {\n        parent = queue.shift();\n\n        for (var i = 0, cnt = parent.children.length; i < cnt; i++) {\n          child = parent.children[i];\n\n          if (child.name === name) {\n            return child;\n          } else if (child.isRexContainerLite) {\n            queue.push(child);\n          }\n        }\n      }\n\n      return null;\n    }\n  },\n\n  getRandom(startIndex, length) {\n    return ArrayUtils.GetRandom(this.children, startIndex, length);\n  },\n\n  getFirst(property, value, startIndex, endIndex) {\n    return ArrayUtils.GetFirstElement(this.children, property, value, startIndex, endIndex);\n  },\n\n  getAll(property, value, startIndex, endIndex) {\n    return ArrayUtils.GetAll(this.children, property, value, startIndex, endIndex);\n  },\n\n  count(property, value, startIndex, endIndex) {\n    return ArrayUtils.CountAllMatching(this.children, property, value, startIndex, endIndex);\n  },\n\n  swap(child1, child2) {\n    ArrayUtils.Swap(this.children, child1, child2);\n    return this;\n  },\n\n  moveTo(child, index) {\n    ArrayUtils.MoveTo(this.children, child, index);\n    return this;\n  },\n\n  setAll(property, value, startIndex, endIndex) {\n    ArrayUtils.SetAll(this.children, property, value, startIndex, endIndex);\n    return this;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/gameobjects/containerlite/Children.js"],"names":["ArrayUtils","Phaser","Utils","Array","getChildren","children","getAllChildren","out","undefined","myCildren","myChild","i","cnt","length","push","hasOwnProperty","contains","gameObject","parent","getParent","getByName","name","recursive","GetFirst","queue","child","shift","isRexContainerLite","getRandom","startIndex","GetRandom","getFirst","property","value","endIndex","GetFirstElement","getAll","GetAll","count","CountAllMatching","swap","child1","child2","Swap","moveTo","index","MoveTo","setAll","SetAll"],"mappings":"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","sourcesContent":["const ArrayUtils = Phaser.Utils.Array;\r\n\r\nexport default {\r\n    getChildren() {\r\n        return this.children;\r\n    },\r\n\r\n    getAllChildren(out) {\r\n        if (out === undefined) {\r\n            out = [];\r\n        }\r\n        var myCildren = this.children,\r\n            myChild;\r\n        for (var i = 0, cnt = myCildren.length; i < cnt; i++) {\r\n            myChild = myCildren[i];\r\n            out.push(myChild);\r\n\r\n            if (myChild.hasOwnProperty('isRexContainerLite')) {\r\n                out.push(...myChild.getAllChildren());\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    contains(gameObject) { // Override Base.contains method\r\n        var parent = this.getParent(gameObject);\r\n        if (!parent) {\r\n            return false;\r\n        } else if (parent === this) {\r\n            return true;\r\n        } else {\r\n            return this.contains(parent);\r\n        }\r\n    },\r\n\r\n    getByName(name, recursive) {\r\n        if (!recursive) {\r\n            return ArrayUtils.GetFirst(this.children, 'name', name); // object, or null if not found\r\n\r\n        } else { // recursive\r\n            // Breadth-first search\r\n            var queue = [this];\r\n            var parent, child;\r\n            while (queue.length) {\r\n                parent = queue.shift();\r\n\r\n                for (var i = 0, cnt = parent.children.length; i < cnt; i++) {\r\n                    child = parent.children[i];\r\n                    if (child.name === name) {\r\n                        return child;\r\n                    } else if (child.isRexContainerLite) {\r\n                        queue.push(child);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n\r\n        }\r\n\r\n    },\r\n\r\n    getRandom(startIndex, length) {\r\n        return ArrayUtils.GetRandom(this.children, startIndex, length);\r\n    },\r\n\r\n    getFirst(property, value, startIndex, endIndex) {\r\n        return ArrayUtils.GetFirstElement(this.children, property, value, startIndex, endIndex);\r\n    },\r\n\r\n    getAll(property, value, startIndex, endIndex) {\r\n        return ArrayUtils.GetAll(this.children, property, value, startIndex, endIndex);\r\n    },\r\n\r\n    count(property, value, startIndex, endIndex) {\r\n        return ArrayUtils.CountAllMatching(this.children, property, value, startIndex, endIndex);\r\n    },\r\n\r\n    swap(child1, child2) {\r\n        ArrayUtils.Swap(this.children, child1, child2);\r\n        return this;\r\n    },\r\n\r\n    moveTo(child, index) {\r\n        ArrayUtils.MoveTo(this.children, child, index);\r\n        return this;\r\n    },\r\n\r\n    setAll(property, value, startIndex, endIndex) {\r\n        ArrayUtils.SetAll(this.children, property, value, startIndex, endIndex);\r\n        return this;\r\n    },\r\n};"]},"metadata":{},"sourceType":"module"}