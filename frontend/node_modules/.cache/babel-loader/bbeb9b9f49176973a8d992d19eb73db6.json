{"ast":null,"code":"import IsPlainObject from '../../../utils/object/IsPlainObject.js';\nimport GetValue from '../../../utils/object/GetValue.js';\n\nvar GetTileXYAtDirection = function (chess, directions, distance, out) {\n  var srcTileXY = this.chessToTileXYZ(chess);\n\n  if (typeof directions === 'string') {\n    if (directions.indexOf(',') === -1) {\n      directions = parseInt(directions);\n    } else {\n      directions = directions.split(',');\n    }\n  }\n\n  var isNumberDirection = typeof directions === 'number';\n  var isNumberDistance = typeof distance === 'number';\n\n  if (isNumberDirection && isNumberDistance) {\n    out = this.grid.getTileXYAtDirection(srcTileXY.x, srcTileXY.y, directions, distance, out); // directions is a number, distance is a number, return a singl tileXY\n\n    this.getWrapTileXY(out.x, out.y, out);\n\n    if (out.x == null || out.y == null) {\n      out = null;\n    }\n  } else {\n    if (out === undefined) {\n      out = [];\n    }\n\n    if (directions == null) {\n      directions = this.grid.allDirections;\n    }\n\n    var resultTileXY;\n\n    if (isNumberDirection) {\n      // directions is a number, distance is an object or list\n      if (IsPlainObject(distance)) {\n        var endIdx = GetValue(distance, 'end', 1);\n        var startIdx = GetValue(distance, 'start', endIdx > 0 ? 1 : -1);\n        var step = GetValue(distance, 'step', endIdx >= startIdx ? 1 : -1);\n\n        if (startIdx === endIdx) {\n          resultTileXY = this.getTileXYAtDirection(srcTileXY, directions, endIdx); // return a single tileXY\n\n          if (resultTileXY !== null) {\n            out.push(resultTileXY);\n          }\n        } else if (startIdx < endIdx) {\n          for (var i = startIdx; i <= endIdx; i += step) {\n            resultTileXY = this.getTileXYAtDirection(srcTileXY, directions, i); // return a single tileXY\n\n            if (resultTileXY !== null) {\n              out.push(resultTileXY);\n            }\n          }\n        } else {\n          for (var i = startIdx; i >= endIdx; i += step) {\n            resultTileXY = this.getTileXYAtDirection(srcTileXY, directions, i); // return a single tileXY\n\n            if (resultTileXY !== null) {\n              out.push(resultTileXY);\n            }\n          }\n        }\n      } else {\n        // Is array\n        for (var i = 0, cnt = distance.length; i < cnt; i++) {\n          resultTileXY = this.getTileXYAtDirection(srcTileXY, directions, distance[i]);\n\n          if (resultTileXY !== null) {\n            out.push(resultTileXY);\n          }\n        }\n      }\n    } else {\n      // directions is a list\n      for (var i = 0, cnt = directions.length; i < cnt; i++) {\n        if (isNumberDistance) {\n          // return a single tileXY\n          resultTileXY = this.getTileXYAtDirection(srcTileXY, directions[i], distance);\n\n          if (resultTileXY !== null) {\n            out.push(resultTileXY);\n          }\n        } else {\n          // append an array of tileXY\n          this.getTileXYAtDirection(srcTileXY, directions[i], distance, out);\n        }\n      }\n    }\n  }\n\n  return out;\n};\n\nexport default GetTileXYAtDirection;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/board/neighbors/GetTileXYAtDirection.js"],"names":["IsPlainObject","GetValue","GetTileXYAtDirection","chess","directions","distance","out","srcTileXY","chessToTileXYZ","indexOf","parseInt","split","isNumberDirection","isNumberDistance","grid","getTileXYAtDirection","x","y","getWrapTileXY","undefined","allDirections","resultTileXY","endIdx","startIdx","step","push","i","cnt","length"],"mappings":"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","sourcesContent":["import IsPlainObject from '../../../utils/object/IsPlainObject.js';\r\nimport GetValue from '../../../utils/object/GetValue.js';\r\n\r\nvar GetTileXYAtDirection = function (chess, directions, distance, out) {\r\n    var srcTileXY = this.chessToTileXYZ(chess);\r\n\r\n    if (typeof (directions) === 'string') {\r\n        if (directions.indexOf(',') === -1) {\r\n            directions = parseInt(directions);\r\n        } else {\r\n            directions = directions.split(',');\r\n        }\r\n    }\r\n\r\n    var isNumberDirection = (typeof (directions) === 'number');\r\n    var isNumberDistance = (typeof (distance) === 'number');\r\n    if (isNumberDirection && isNumberDistance) {\r\n        out = this.grid.getTileXYAtDirection(srcTileXY.x, srcTileXY.y, directions, distance, out);  // directions is a number, distance is a number, return a singl tileXY\r\n        this.getWrapTileXY(out.x, out.y, out);\r\n        if ((out.x == null) || (out.y == null)) {\r\n            out = null;\r\n        }\r\n\r\n    } else {\r\n        if (out === undefined) {\r\n            out = [];\r\n        }\r\n        if (directions == null) {\r\n            directions = this.grid.allDirections;\r\n        }\r\n\r\n        var resultTileXY;\r\n        if (isNumberDirection) {  // directions is a number, distance is an object or list\r\n            if (IsPlainObject(distance)) {\r\n                var endIdx = GetValue(distance, 'end', 1);\r\n                var startIdx = GetValue(distance, 'start', (endIdx > 0) ? 1 : -1);\r\n                var step = GetValue(distance, 'step', ((endIdx >= startIdx) ? 1 : -1));\r\n                if (startIdx === endIdx) {\r\n                    resultTileXY = this.getTileXYAtDirection(srcTileXY, directions, endIdx); // return a single tileXY\r\n                    if (resultTileXY !== null) {\r\n                        out.push(resultTileXY);\r\n                    }\r\n                } else if (startIdx < endIdx) {\r\n                    for (var i = startIdx; i <= endIdx; i += step) {\r\n                        resultTileXY = this.getTileXYAtDirection(srcTileXY, directions, i); // return a single tileXY\r\n                        if (resultTileXY !== null) {\r\n                            out.push(resultTileXY);\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (var i = startIdx; i >= endIdx; i += step) {\r\n                        resultTileXY = this.getTileXYAtDirection(srcTileXY, directions, i); // return a single tileXY\r\n                        if (resultTileXY !== null) {\r\n                            out.push(resultTileXY);\r\n                        }\r\n                    }\r\n                }\r\n            } else { // Is array\r\n                for (var i = 0, cnt = distance.length; i < cnt; i++) {\r\n                    resultTileXY = this.getTileXYAtDirection(srcTileXY, directions, distance[i]);\r\n                    if (resultTileXY !== null) {\r\n                        out.push(resultTileXY);\r\n                    }\r\n                }\r\n            }\r\n        } else { // directions is a list\r\n            for (var i = 0, cnt = directions.length; i < cnt; i++) {\r\n                if (isNumberDistance) { // return a single tileXY\r\n                    resultTileXY = this.getTileXYAtDirection(srcTileXY, directions[i], distance);\r\n                    if (resultTileXY !== null) {\r\n                        out.push(resultTileXY);\r\n                    }\r\n                } else { // append an array of tileXY\r\n                    this.getTileXYAtDirection(srcTileXY, directions[i], distance, out);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return out;\r\n}\r\nexport default GetTileXYAtDirection;"]},"metadata":{},"sourceType":"module"}