{"ast":null,"code":"import EE from '../../utils/eventemitter/EventEmitter.js';\nimport LogicMethods from './LogicMethods.js';\nimport BoardData from './boarddata/BoardData.js';\nimport DefaultGrids from '../grid/index.js';\nimport GetValue from '../../utils/object/GetValue.js';\nimport IsPlainObject from '../../utils/object/IsPlainObject.js';\n\nclass Board extends EE {\n  constructor(scene, config) {\n    super();\n    this.scene = scene;\n    this.boardData = new BoardData();\n    this.resetFromJSON(config);\n    this.boot();\n  }\n\n  resetFromJSON(o) {\n    this.isBoard = GetValue(o, 'isBoard', true);\n    this.setGrid(GetValue(o, 'grid', undefined));\n    this.setWrapMode(GetValue(o, 'wrap', false));\n    this.setInfinityMode(GetValue(o, 'inifinity', false));\n    this.setBoardWidth(GetValue(o, 'width', 0));\n    this.setBoardHeight(GetValue(o, 'height', 0));\n    return this;\n  }\n\n  boot() {\n    if (this.scene) {\n      this.scene.events.once('shutdown', this.destroy, this);\n    }\n  }\n\n  shutdown() {\n    this.removeAllChess(true, true);\n    super.shutdown();\n    this.boardData.shutdown();\n    this.scene = undefined;\n    this.boardData = undefined;\n    return this;\n  }\n\n  destroy() {\n    this.emit('destroy');\n    this.shutdown();\n    return this;\n  }\n\n  setGrid(grid) {\n    if (IsPlainObject(grid)) {\n      var config = grid;\n      var gridType = GetValue(config, 'gridType', 'quadGrid');\n      var grid = new DefaultGrids[gridType](config);\n    }\n\n    this.grid = grid;\n    return this;\n  }\n\n  setWrapMode(mode) {\n    if (mode === undefined) {\n      mode = true;\n    }\n\n    this.wrapMode = mode;\n    return this;\n  }\n\n  setInfinityMode(mode) {\n    if (mode === undefined) {\n      mode = true;\n    }\n\n    this.infinityMode = mode;\n    return this;\n  }\n\n  setBoardSize(width, height) {\n    this.setBoardWidth(width);\n    this.setBoardHeight(height);\n    return this;\n  }\n\n  exists(gameObject) {\n    // game object or uid\n    return this.boardData.exists(this.getChessUID(gameObject));\n  }\n\n  get chessCount() {\n    return this.boardData.chessCount;\n  }\n\n  clear(destroy) {\n    if (destroy === undefined) {\n      destroy = true;\n    }\n\n    this.removeAllChess(destroy, true);\n    this.boardData.clear();\n    return this;\n  }\n\n}\n\nObject.assign(Board.prototype, LogicMethods);\nexport default Board;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/board/LogicBoard.js"],"names":["EE","LogicMethods","BoardData","DefaultGrids","GetValue","IsPlainObject","Board","constructor","scene","config","boardData","resetFromJSON","boot","o","isBoard","setGrid","undefined","setWrapMode","setInfinityMode","setBoardWidth","setBoardHeight","events","once","destroy","shutdown","removeAllChess","emit","grid","gridType","mode","wrapMode","infinityMode","setBoardSize","width","height","exists","gameObject","getChessUID","chessCount","clear","Object","assign","prototype"],"mappings":"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","sourcesContent":["import EE from '../../utils/eventemitter/EventEmitter.js';\r\nimport LogicMethods from './LogicMethods.js';\r\nimport BoardData from './boarddata/BoardData.js';\r\nimport DefaultGrids from '../grid/index.js';\r\nimport GetValue from '../../utils/object/GetValue.js';\r\nimport IsPlainObject from '../../utils/object/IsPlainObject.js';\r\n\r\nclass Board extends EE {\r\n    constructor(scene, config) {\r\n        super();\r\n\r\n        this.scene = scene;\r\n        this.boardData = new BoardData();\r\n        this.resetFromJSON(config);\r\n        this.boot();\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        this.isBoard = GetValue(o, 'isBoard', true);\r\n        this.setGrid(GetValue(o, 'grid', undefined));\r\n        this.setWrapMode(GetValue(o, 'wrap', false));\r\n        this.setInfinityMode(GetValue(o, 'inifinity', false));\r\n        this.setBoardWidth(GetValue(o, 'width', 0));\r\n        this.setBoardHeight(GetValue(o, 'height', 0));\r\n        return this;\r\n    }\r\n\r\n    boot() {\r\n        if (this.scene) {\r\n            this.scene.events.once('shutdown', this.destroy, this);\r\n        }\r\n    }\r\n\r\n    shutdown() {\r\n        this.removeAllChess(true, true);\r\n        super.shutdown();\r\n        this.boardData.shutdown();\r\n\r\n        this.scene = undefined;\r\n        this.boardData = undefined;\r\n        return this;\r\n    }\r\n\r\n    destroy() {\r\n        this.emit('destroy');\r\n        this.shutdown();\r\n        return this;\r\n    }\r\n\r\n    setGrid(grid) {\r\n        if (IsPlainObject(grid)) {\r\n            var config = grid;\r\n            var gridType = GetValue(config, 'gridType', 'quadGrid');\r\n            var grid = new DefaultGrids[gridType](config);\r\n        }\r\n        this.grid = grid;\r\n        return this;\r\n    }\r\n\r\n    setWrapMode(mode) {\r\n        if (mode === undefined) {\r\n            mode = true;\r\n        }\r\n        this.wrapMode = mode;\r\n        return this;\r\n    }\r\n\r\n    setInfinityMode(mode) {\r\n        if (mode === undefined) {\r\n            mode = true;\r\n        }\r\n        this.infinityMode = mode;\r\n        return this;\r\n    }\r\n\r\n    setBoardSize(width, height) {\r\n        this.setBoardWidth(width);\r\n        this.setBoardHeight(height);\r\n        return this;\r\n    }\r\n\r\n    exists(gameObject) {\r\n        // game object or uid\r\n        return this.boardData.exists(this.getChessUID(gameObject));\r\n    }\r\n\r\n    get chessCount() {\r\n        return this.boardData.chessCount;\r\n    }\r\n\r\n    clear(destroy) {\r\n        if (destroy === undefined) {\r\n            destroy = true;\r\n        }\r\n        this.removeAllChess(destroy, true);\r\n        this.boardData.clear();\r\n        return this;\r\n    }\r\n}\r\n\r\nObject.assign(\r\n    Board.prototype,\r\n    LogicMethods\r\n);\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}