{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kmode\\\\Documents\\\\ProjektyFullStack\\\\war-of-champions\\\\frontend\\\\src\\\\phaser\\\\PhaserMain.js\";\nimport { IonPhaser } from \"@ion-phaser/react\";\nimport React from \"react\";\nimport Phaser from \"phaser\";\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\n\nconst PhaserMain = () => {\n  let player;\n  let cursors;\n  let layer;\n  const gameState = {\n    initialize: true,\n    game: {\n      width: 960,\n      height: 600,\n      type: Phaser.AUTO,\n      scene: {\n        key: \"main\",\n        preload: preload,\n        create: create,\n        update: update\n      },\n      physics: {\n        default: \"arcade\",\n        arcade: {\n          gravity: {\n            y: 500\n          },\n          debug: false\n        }\n      }\n    }\n  };\n\n  function preload() {\n    /*this.load.image(\"environment\", \"assets/environment_forest.png\");*/\n    this.load.atlas('player', 'assets/adventurer.png', 'assets/adventurer.json');\n  }\n\n  function create() {\n    player = this.physics.add.sprite(100, 450, \"adventurer\");\n    player.setBounce(0.35);\n    player.setCollideWorldBounds(true);\n    cursors = this.input.keyboard.createCursorKeys();\n    this.anims.create({\n      key: 'left',\n      frames: this.anims.generateFrameNumbers('adventurer', {\n        start: 0,\n        end: 3\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    this.anims.create({\n      key: 'turn',\n      frames: [{\n        key: 'adventurer',\n        frame: 4\n      }],\n      frameRate: 20\n    });\n    this.anims.create({\n      key: 'right',\n      frames: this.anims.generateFrameNumbers('adventurer', {\n        start: 5,\n        end: 8\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n  }\n\n  function update() {\n    if (cursors.left.isDown) {\n      player.setVelocityX(-160);\n      player.anims.play('left', true);\n    } else if (cursors.right.isDown) {\n      player.setVelocityX(160);\n      player.anims.play('right', true);\n    } else {\n      player.setVelocityX(0);\n      player.anims.play('turn');\n    }\n\n    if (cursors.up.isDown && player.body.touching.down) {\n      player.setVelocityY(-330);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IonPhaser, {\n    game: gameState.game,\n    initialize: gameState.initialize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default PhaserMain;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/src/phaser/PhaserMain.js"],"names":["IonPhaser","React","Phaser","BoardPlugin","PhaserMain","player","cursors","layer","gameState","initialize","game","width","height","type","AUTO","scene","key","preload","create","update","physics","default","arcade","gravity","y","debug","load","atlas","add","sprite","setBounce","setCollideWorldBounds","input","keyboard","createCursorKeys","anims","frames","generateFrameNumbers","start","end","frameRate","repeat","frame","left","isDown","setVelocityX","play","right","up","body","touching","down","setVelocityY"],"mappings":"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","sourcesContent":["import {IonPhaser} from \"@ion-phaser/react\";\r\nimport React from \"react\";\r\nimport Phaser from \"phaser\";\r\nimport BoardPlugin from 'phaser3-rex-plugins/plugins/board-plugin.js';\r\n\r\n\r\nconst PhaserMain = () => {\r\n\r\n    let player;\r\n    let cursors;\r\n    let layer;\r\n\r\n    const gameState = {\r\n        initialize: true,\r\n        game: {\r\n            width: 960,\r\n            height: 600,\r\n            type: Phaser.AUTO,\r\n            scene: {\r\n                key: \"main\",\r\n                preload: preload,\r\n                create: create,\r\n                update: update,\r\n            },\r\n            physics: {\r\n                default: \"arcade\",\r\n                arcade: {\r\n                    gravity: {y: 500},\r\n                    debug: false\r\n                }\r\n            },\r\n        }\r\n    }\r\n\r\n    function preload() {\r\n        /*this.load.image(\"environment\", \"assets/environment_forest.png\");*/\r\n        this.load.atlas('player', 'assets/adventurer.png', 'assets/adventurer.json');\r\n\r\n    }\r\n\r\n    function create() {\r\n        player = this.physics.add.sprite(100, 450, \"adventurer\");\r\n        player.setBounce(0.35);\r\n        player.setCollideWorldBounds(true);\r\n        cursors = this.input.keyboard.createCursorKeys();\r\n\r\n\r\n        this.anims.create({\r\n            key: 'left',\r\n            frames: this.anims.generateFrameNumbers('adventurer', { start: 0, end: 3 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n\r\n        this.anims.create({\r\n            key: 'turn',\r\n            frames: [ { key: 'adventurer', frame: 4 } ],\r\n            frameRate: 20\r\n        });\r\n\r\n        this.anims.create({\r\n            key: 'right',\r\n            frames: this.anims.generateFrameNumbers('adventurer', { start: 5, end: 8 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n    }\r\n\r\n    function update() {\r\n        if (cursors.left.isDown)\r\n        {\r\n            player.setVelocityX(-160);\r\n\r\n            player.anims.play('left', true);\r\n        }\r\n        else if (cursors.right.isDown)\r\n        {\r\n            player.setVelocityX(160);\r\n\r\n            player.anims.play('right', true);\r\n        }\r\n        else\r\n        {\r\n            player.setVelocityX(0);\r\n\r\n            player.anims.play('turn');\r\n        }\r\n\r\n        if (cursors.up.isDown && player.body.touching.down)\r\n        {\r\n            player.setVelocityY(-330);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <IonPhaser game={gameState.game} initialize={gameState.initialize}/>\r\n        </>\r\n    );\r\n}\r\nexport default PhaserMain;"]},"metadata":{},"sourceType":"module"}