{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kmode\\\\Documents\\\\ProjektyFullStack\\\\war-of-champions\\\\frontend\\\\src\\\\App.js\";\nimport React from 'react';\nimport './styles/app.scss';\nimport Phaser from 'phaser';\nimport { IonPhaser } from '@ion-phaser/react';\n\nfunction App() {\n  const gameState = {\n    initialize: true,\n    game: {\n      width: 800,\n      height: 600,\n      type: Phaser.AUTO,\n      scene: {\n        preload: preload,\n        create: create,\n        update: update\n      },\n      physics: {\n        default: 'arcade',\n        arcade: {\n          gravity: {\n            y: 300\n          },\n          debug: false\n        }\n      }\n    }\n  };\n\n  function preload() {\n    this.load.image('sky', 'assets/sky.png');\n    this.load.image('ground', 'assets/platform.png');\n    this.load.image('star', 'assets/star.png');\n    this.load.image('bomb', 'assets/bomb.png');\n    this.load.spritesheet('dude', 'assets/dude.png', {\n      frameWidth: 32,\n      frameHeight: 48\n    });\n  }\n\n  function create() {\n    {\n      this.add.image(400, 300, 'sky');\n      this.add.image(400, 300, 'star');\n      let platforms = this.physics.add.staticGroup();\n      platforms.create(400, 568, 'ground').setScale(2).refreshBody();\n      platforms.create(600, 400, 'ground');\n      platforms.create(50, 250, 'ground');\n      platforms.create(750, 220, 'ground');\n    }\n  }\n\n  function update() {}\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      minHeight: \"100vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IonPhaser, {\n    game: gameState.game,\n    initialize: gameState.initialize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/src/App.js"],"names":["React","Phaser","IonPhaser","App","gameState","initialize","game","width","height","type","AUTO","scene","preload","create","update","physics","default","arcade","gravity","y","debug","load","image","spritesheet","frameWidth","frameHeight","add","platforms","staticGroup","setScale","refreshBody","minHeight"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,mBAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,SAAT,QAA0B,mBAA1B;;AAEA,SAASC,GAAT,GAAe;AAGX,QAAMC,SAAS,GAAG;AACdC,IAAAA,UAAU,EAAE,IADE;AAEdC,IAAAA,IAAI,EAAE;AACFC,MAAAA,KAAK,EAAE,GADL;AAEFC,MAAAA,MAAM,EAAE,GAFN;AAGFC,MAAAA,IAAI,EAAER,MAAM,CAACS,IAHX;AAIFC,MAAAA,KAAK,EAAE;AACHC,QAAAA,OAAO,EAAEA,OADN;AAEHC,QAAAA,MAAM,EAAEA,MAFL;AAGHC,QAAAA,MAAM,EAAEA;AAHL,OAJL;AASFC,MAAAA,OAAO,EAAE;AACLC,QAAAA,OAAO,EAAE,QADJ;AAELC,QAAAA,MAAM,EAAE;AACJC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,CAAC,EAAE;AAAL,WADL;AAEJC,UAAAA,KAAK,EAAE;AAFH;AAFH;AATP;AAFQ,GAAlB;;AAoBA,WAASR,OAAT,GAAmB;AACf,SAAKS,IAAL,CAAUC,KAAV,CAAgB,KAAhB,EAAuB,gBAAvB;AACA,SAAKD,IAAL,CAAUC,KAAV,CAAgB,QAAhB,EAA0B,qBAA1B;AACA,SAAKD,IAAL,CAAUC,KAAV,CAAgB,MAAhB,EAAwB,iBAAxB;AACA,SAAKD,IAAL,CAAUC,KAAV,CAAgB,MAAhB,EAAwB,iBAAxB;AACA,SAAKD,IAAL,CAAUE,WAAV,CAAsB,MAAtB,EACI,iBADJ,EAEI;AAAEC,MAAAA,UAAU,EAAE,EAAd;AAAkBC,MAAAA,WAAW,EAAE;AAA/B,KAFJ;AAIH;;AAGD,WAASZ,MAAT,GAAkB;AACd;AACI,WAAKa,GAAL,CAASJ,KAAT,CAAe,GAAf,EAAoB,GAApB,EAAyB,KAAzB;AACA,WAAKI,GAAL,CAASJ,KAAT,CAAe,GAAf,EAAoB,GAApB,EAAyB,MAAzB;AAEA,UAAIK,SAAS,GAAG,KAAKZ,OAAL,CAAaW,GAAb,CAAiBE,WAAjB,EAAhB;AACAD,MAAAA,SAAS,CAACd,MAAV,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B,QAA3B,EAAqCgB,QAArC,CAA8C,CAA9C,EAAiDC,WAAjD;AACAH,MAAAA,SAAS,CAACd,MAAV,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B,QAA3B;AACAc,MAAAA,SAAS,CAACd,MAAV,CAAiB,EAAjB,EAAqB,GAArB,EAA0B,QAA1B;AACAc,MAAAA,SAAS,CAACd,MAAV,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B,QAA3B;AAEH;AACJ;;AACD,WAASC,MAAT,GAAkB,CACjB;;AACH,sBACE;AAAK,IAAA,KAAK,EAAE;AAACiB,MAAAA,SAAS,EAAE;AAAZ,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAE3B,SAAS,CAACE,IAA3B;AAAiC,IAAA,UAAU,EAAEF,SAAS,CAACC,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADF;AAKD;;AAED,eAAeF,GAAf","sourcesContent":["import React from 'react';\nimport './styles/app.scss';\nimport Phaser from 'phaser';\nimport { IonPhaser } from '@ion-phaser/react';\n\nfunction App() {\n\n\n    const gameState = {\n        initialize: true,\n        game: {\n            width: 800,\n            height: 600,\n            type: Phaser.AUTO,\n            scene: {\n                preload: preload,\n                create: create,\n                update: update,\n                },\n            physics: {\n                default: 'arcade',\n                arcade: {\n                    gravity: { y: 300 },\n                    debug: false\n                }\n            },\n            },\n        }\n    function preload() {\n        this.load.image('sky', 'assets/sky.png');\n        this.load.image('ground', 'assets/platform.png');\n        this.load.image('star', 'assets/star.png');\n        this.load.image('bomb', 'assets/bomb.png');\n        this.load.spritesheet('dude',\n            'assets/dude.png',\n            { frameWidth: 32, frameHeight: 48 }\n        );\n    }\n\n\n    function create() {\n        {\n            this.add.image(400, 300, 'sky');\n            this.add.image(400, 300, 'star');\n\n            let platforms = this.physics.add.staticGroup();\n            platforms.create(400, 568, 'ground').setScale(2).refreshBody();\n            platforms.create(600, 400, 'ground');\n            platforms.create(50, 250, 'ground');\n            platforms.create(750, 220, 'ground');\n\n        }\n    }\n    function update() {\n    }\n  return (\n    <div style={{minHeight: \"100vh\"}}>\n        <IonPhaser game={gameState.game} initialize={gameState.initialize} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}