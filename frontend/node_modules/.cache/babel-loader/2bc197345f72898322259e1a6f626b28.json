{"ast":null,"code":"import TickTask from '../../../utils/ticktask/TickTask.js';\nimport GetSceneObject from '../../../utils/system/GetSceneObject.js';\nconst GetValue = Phaser.Utils.Objects.GetValue;\n\nclass OnePointerTracer extends TickTask {\n  constructor(gameObject, config) {\n    var scene = GetSceneObject(gameObject);\n\n    if (scene === gameObject) {\n      gameObject = undefined;\n    }\n\n    super(scene, config);\n    this.scene = scene;\n    this.gameObject = gameObject;\n\n    if (gameObject) {\n      gameObject.setInteractive(GetValue(config, \"inputConfig\", undefined));\n    }\n\n    this._enable = undefined;\n    this.resetFromJSON(config);\n    this.boot();\n  }\n\n  resetFromJSON(o) {\n    this.setEnable(GetValue(o, \"enable\", true));\n\n    if (this.gameObject === undefined) {\n      this.bounds = GetValue(o, 'bounds', undefined);\n    } else {\n      this.bounds = undefined;\n    }\n\n    this.tracerState = TOUCH0; // this.recongizedState = new stateClass(this);\n\n    this.pointer = undefined;\n    this.lastPointer = undefined; // Last catched pointer\n\n    this.movedState = false;\n    this.isTouchingAnyObject = false;\n    return this;\n  }\n\n  boot() {\n    super.boot();\n\n    if (this.gameObject) {\n      this.gameObject.on('pointerdown', this.onPointerDown, this);\n    } else {\n      this.scene.input.on('pointerdown', this.onPointerDown, this);\n    }\n\n    this.scene.input.on('pointerup', this.onPointerUp, this);\n    this.scene.input.on('pointermove', this.onPointerMove, this);\n    this.scene.events.once('shutdown', this.destroy, this);\n  }\n\n  shutdown() {\n    if (this.gameObject) {\n      this.gameObject.off('pointerdown', this.onPointerDown, this);\n    } else if (this.scene) {\n      this.scene.input.off('pointerdown', this.onPointerDown, this);\n    }\n\n    if (this.scene) {\n      this.scene.input.off('pointerup', this.onPointerUp, this);\n      this.scene.input.off('pointermove', this.onPointerMove, this);\n      this.scene.events.off('destroy', this.destroy, this);\n      this.scene = undefined;\n    }\n\n    this.scene = undefined;\n    this.gameObject = undefined;\n    this.bounds = undefined;\n    this.pointer = undefined;\n    this.lastPointer = undefined; // Last catched pointer\n\n    this.movedState = false;\n    super.shutdown();\n  }\n\n  destroy() {\n    this.shutdown();\n  }\n\n  get enable() {\n    return this._enable;\n  }\n\n  set enable(e) {\n    if (this._enable === e) {\n      return;\n    }\n\n    if (!e) {\n      this.dragCancel();\n    }\n\n    this._enable = e;\n    return this;\n  }\n\n  setEnable(e) {\n    if (e === undefined) {\n      e = true;\n    }\n\n    this.enable = e;\n    return this;\n  }\n\n  toggleEnable() {\n    this.setEnable(!this.enable);\n    return this;\n  }\n\n  onPointerDown(pointer, gameObjects) {\n    if (!this.enable) {\n      return;\n    }\n\n    if (this.pointer !== undefined) {\n      return;\n    }\n\n    var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;\n\n    if (!isInsideBounds) {\n      return;\n    }\n\n    if (this.pointer === pointer) {\n      return;\n    }\n\n    this.pointer = pointer;\n    this.lastPointer = pointer;\n    this.movedState = false;\n    this.tracerState = TOUCH1;\n\n    if (this.gameObject === undefined) {\n      this.isTouchingAnyObject = gameObjects.length > 0;\n    }\n\n    this.onDragStart();\n  }\n\n  onPointerUp(pointer) {\n    if (!this.enable) {\n      return;\n    }\n\n    var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;\n\n    if (!isInsideBounds) {\n      return;\n    }\n\n    if (this.pointer !== pointer) {\n      return;\n    }\n\n    this.pointer = undefined;\n    this.movedState = false;\n    this.tracerState = TOUCH0;\n    this.onDragEnd();\n  }\n\n  onPointerMove(pointer) {\n    if (!this.enable) {\n      return;\n    }\n\n    if (pointer.isDown) {\n      var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;\n      var isCatchedPointer = this.pointer === pointer;\n\n      if (!isCatchedPointer && isInsideBounds) {// Pointer moves into bounds\n        // this.onPointerDown(pointer);\n      } else if (isCatchedPointer && !isInsideBounds) {\n        // Pointer moves out of bounds\n        this.onPointerUp(pointer);\n      } else {\n        // Pointer drags in bounds\n        if (!this.movedState) {\n          this.movedState = pointer.x !== pointer.downX || pointer.y !== pointer.downY;\n        }\n\n        if (this.movedState) {\n          this.onDrag();\n        }\n      }\n    } else {// var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;\n      // var isLastCatchedPointer = (this.lastPointer === pointer);\n      // if (isLastCatchedPointer && isInsideBounds) {\n      //     this.onLastPointerMove();\n      // }\n    }\n  }\n\n  dragCancel() {\n    if (this.tracerState === TOUCH1) {\n      this.onDragEnd();\n    }\n\n    this.pointer = undefined;\n    this.tracerState = TOUCH0;\n    return this;\n  }\n\n  onDragStart() {\n    this.emit('dragstart', this);\n  }\n\n  onDragEnd() {\n    this.emit('dragend', this);\n  }\n\n  onDrag() {\n    this.emit('drag', this);\n  } // onLastPointerMove() { }\n\n\n  preUpdate(time, delta) {}\n\n  postUpdate(time, delta) {}\n\n  startTicking() {\n    super.startTicking();\n    this.scene.events.on('preupdate', this.preUpdate, this);\n    this.scene.events.on('postupdate', this.postUpdate, this);\n  }\n\n  stopTicking() {\n    super.stopTicking();\n\n    if (this.scene) {\n      // Scene might be destoryed\n      this.scene.events.off('preupdate', this.preUpdate, this);\n      this.scene.events.off('postupdate', this.postUpdate, this);\n    }\n  }\n\n  setRecongizedStateObject(stateObject) {\n    this.recongizedState = stateObject;\n    return this;\n  }\n\n  get state() {\n    return this.recongizedState.state;\n  }\n\n  set state(newState) {\n    this.recongizedState.state = newState;\n  }\n\n  cancel() {\n    this.state = IDLE;\n    return this;\n  }\n\n}\n\nconst TOUCH0 = 0;\nconst TOUCH1 = 1;\nconst IDLE = 'IDLE';\nexport default OnePointerTracer;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/input/gestures/onepointertracer/OnePointerTracer.js"],"names":["TickTask","GetSceneObject","GetValue","Phaser","Utils","Objects","OnePointerTracer","constructor","gameObject","config","scene","undefined","setInteractive","_enable","resetFromJSON","boot","o","setEnable","bounds","tracerState","TOUCH0","pointer","lastPointer","movedState","isTouchingAnyObject","on","onPointerDown","input","onPointerUp","onPointerMove","events","once","destroy","shutdown","off","enable","e","dragCancel","toggleEnable","gameObjects","isInsideBounds","contains","x","y","TOUCH1","length","onDragStart","onDragEnd","isDown","isCatchedPointer","downX","downY","onDrag","emit","preUpdate","time","delta","postUpdate","startTicking","stopTicking","setRecongizedStateObject","stateObject","recongizedState","state","newState","cancel","IDLE"],"mappings":"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","sourcesContent":["import TickTask from '../../../utils/ticktask/TickTask.js';\r\nimport GetSceneObject from '../../../utils/system/GetSceneObject.js';\r\n\r\nconst GetValue = Phaser.Utils.Objects.GetValue;\r\n\r\nclass OnePointerTracer extends TickTask {\r\n    constructor(gameObject, config) {\r\n        var scene = GetSceneObject(gameObject);\r\n        if (scene === gameObject) {\r\n            gameObject = undefined;\r\n        }\r\n        super(scene, config);\r\n\r\n        this.scene = scene;\r\n        this.gameObject = gameObject;\r\n        if (gameObject) {\r\n            gameObject.setInteractive(GetValue(config, \"inputConfig\", undefined));\r\n        }\r\n        this._enable = undefined;\r\n        this.resetFromJSON(config);\r\n        this.boot();\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        this.setEnable(GetValue(o, \"enable\", true));\r\n\r\n        if (this.gameObject === undefined) {\r\n            this.bounds = GetValue(o, 'bounds', undefined);\r\n        } else {\r\n            this.bounds = undefined;\r\n        }\r\n\r\n        this.tracerState = TOUCH0;\r\n        // this.recongizedState = new stateClass(this);\r\n        this.pointer = undefined;\r\n        this.lastPointer = undefined; // Last catched pointer\r\n        this.movedState = false;\r\n        this.isTouchingAnyObject = false;\r\n        return this;\r\n    }\r\n\r\n    boot() {\r\n        super.boot();\r\n        if (this.gameObject) {\r\n            this.gameObject.on('pointerdown', this.onPointerDown, this);\r\n        } else {\r\n            this.scene.input.on('pointerdown', this.onPointerDown, this);\r\n        }\r\n        this.scene.input.on('pointerup', this.onPointerUp, this);\r\n        this.scene.input.on('pointermove', this.onPointerMove, this);\r\n        this.scene.events.once('shutdown', this.destroy, this);\r\n    }\r\n\r\n    shutdown() {\r\n        if (this.gameObject) {\r\n            this.gameObject.off('pointerdown', this.onPointerDown, this);\r\n        } else if (this.scene) {\r\n            this.scene.input.off('pointerdown', this.onPointerDown, this);\r\n        }\r\n        if (this.scene) {\r\n            this.scene.input.off('pointerup', this.onPointerUp, this);\r\n            this.scene.input.off('pointermove', this.onPointerMove, this);\r\n            this.scene.events.off('destroy', this.destroy, this);\r\n            this.scene = undefined;\r\n        }\r\n\r\n        this.scene = undefined;\r\n        this.gameObject = undefined;\r\n        this.bounds = undefined;\r\n        this.pointer = undefined;\r\n        this.lastPointer = undefined; // Last catched pointer\r\n        this.movedState = false;\r\n        super.shutdown();\r\n    }\r\n\r\n    destroy() {\r\n        this.shutdown();\r\n    }\r\n\r\n    get enable() {\r\n        return this._enable;\r\n    }\r\n\r\n    set enable(e) {\r\n        if (this._enable === e) {\r\n            return;\r\n        }\r\n\r\n        if (!e) {\r\n            this.dragCancel();\r\n        }\r\n        this._enable = e;\r\n        return this;\r\n    }\r\n\r\n    setEnable(e) {\r\n        if (e === undefined) {\r\n            e = true;\r\n        }\r\n\r\n        this.enable = e;\r\n        return this;\r\n    }\r\n\r\n    toggleEnable() {\r\n        this.setEnable(!this.enable);\r\n        return this;\r\n    }\r\n\r\n    onPointerDown(pointer, gameObjects) {\r\n        if (!this.enable) {\r\n            return;\r\n        }\r\n\r\n        if (this.pointer !== undefined) {\r\n            return;\r\n        }\r\n\r\n        var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;\r\n        if (!isInsideBounds) {\r\n            return;\r\n        }\r\n\r\n        if (this.pointer === pointer) {\r\n            return;\r\n        }\r\n\r\n        this.pointer = pointer;\r\n        this.lastPointer = pointer;\r\n        this.movedState = false;\r\n        this.tracerState = TOUCH1;\r\n\r\n        if (this.gameObject === undefined) {\r\n            this.isTouchingAnyObject = (gameObjects.length > 0);\r\n        }\r\n        this.onDragStart();\r\n    }\r\n\r\n    onPointerUp(pointer) {\r\n        if (!this.enable) {\r\n            return;\r\n        }\r\n\r\n        var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;\r\n        if (!isInsideBounds) {\r\n            return;\r\n        }\r\n\r\n        if (this.pointer !== pointer) {\r\n            return;\r\n        }\r\n\r\n        this.pointer = undefined;\r\n        this.movedState = false;\r\n        this.tracerState = TOUCH0;\r\n        this.onDragEnd();\r\n    }\r\n\r\n    onPointerMove(pointer) {\r\n        if (!this.enable) {\r\n            return;\r\n        }\r\n\r\n        if (pointer.isDown) {\r\n            var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;\r\n            var isCatchedPointer = (this.pointer === pointer);\r\n            if (!isCatchedPointer && isInsideBounds) { // Pointer moves into bounds\r\n                // this.onPointerDown(pointer);\r\n            } else if (isCatchedPointer && !isInsideBounds) { // Pointer moves out of bounds\r\n                this.onPointerUp(pointer);\r\n            } else { // Pointer drags in bounds\r\n                if (!this.movedState) {\r\n                    this.movedState = (pointer.x !== pointer.downX) || (pointer.y !== pointer.downY);\r\n                }\r\n                if (this.movedState) {\r\n                    this.onDrag();\r\n                }\r\n            }\r\n        } else {\r\n            // var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;\r\n            // var isLastCatchedPointer = (this.lastPointer === pointer);\r\n            // if (isLastCatchedPointer && isInsideBounds) {\r\n            //     this.onLastPointerMove();\r\n            // }\r\n        }\r\n    }\r\n\r\n    dragCancel() {\r\n        if (this.tracerState === TOUCH1) {\r\n            this.onDragEnd();\r\n        }\r\n        this.pointer = undefined;\r\n        this.tracerState = TOUCH0;\r\n        return this;\r\n    }\r\n\r\n    onDragStart() {\r\n        this.emit('dragstart', this);\r\n    }\r\n\r\n    onDragEnd() {\r\n        this.emit('dragend', this);\r\n    }\r\n\r\n    onDrag() {\r\n        this.emit('drag', this);\r\n    }\r\n\r\n    // onLastPointerMove() { }\r\n\r\n    preUpdate(time, delta) { }\r\n\r\n    postUpdate(time, delta) { }\r\n\r\n    startTicking() {\r\n        super.startTicking();\r\n        this.scene.events.on('preupdate', this.preUpdate, this);\r\n        this.scene.events.on('postupdate', this.postUpdate, this);\r\n    }\r\n\r\n    stopTicking() {\r\n        super.stopTicking();\r\n        if (this.scene) { // Scene might be destoryed\r\n            this.scene.events.off('preupdate', this.preUpdate, this);\r\n            this.scene.events.off('postupdate', this.postUpdate, this);\r\n        }\r\n    }\r\n\r\n    setRecongizedStateObject(stateObject) {\r\n        this.recongizedState = stateObject;\r\n        return this;\r\n    }\r\n\r\n    get state() {\r\n        return this.recongizedState.state;\r\n    }\r\n\r\n    set state(newState) {\r\n        this.recongizedState.state = newState;\r\n    }\r\n\r\n    cancel() {\r\n        this.state = IDLE;\r\n        return this;\r\n    }\r\n}\r\n\r\nconst TOUCH0 = 0;\r\nconst TOUCH1 = 1;\r\n\r\nconst IDLE = 'IDLE';\r\n\r\nexport default OnePointerTracer;"]},"metadata":{},"sourceType":"module"}