{"ast":null,"code":"import GetChessData from '../chess/GetChessData.js';\nimport Methods from './Methods.js';\nimport CONST from './const.js';\nimport IsPlainObject from '../../utils/object/IsPlainObject.js';\nimport GetValue from '../../utils/object/GetValue.js';\nconst BLOCKER = CONST.BLOCKER;\nconst INFINITY = CONST.INFINITY;\n\nclass PathFinder {\n  constructor(gameObject, config) {\n    if (IsPlainObject(gameObject)) {\n      config = gameObject;\n      gameObject = undefined;\n    }\n\n    this.setChess(gameObject);\n    this.nodeManager = undefined;\n    this.resetFromJSON(config);\n    this.boot();\n  }\n\n  resetFromJSON(o) {\n    var costCallback = GetValue(o, 'costCallback', undefined);\n    var costCallbackScope = GetValue(o, 'costCallbackScope', undefined);\n\n    if (costCallback === undefined) {\n      costCallback = GetValue(o, 'cost', 1);\n    }\n\n    this.setOccupiedTest(GetValue(o, 'occupiedTest', false));\n    this.setBlockerTest(GetValue(o, 'blockerTest', false));\n    this.setEdgeBlockerTest(GetValue(o, 'edgeBlockerTest', false));\n    this.setCostFunction(costCallback, costCallbackScope);\n    this.setPathMode(GetValue(o, 'pathMode', 0));\n    this.setCacheCostMode(GetValue(o, 'cacheCost', true));\n    this.setWeight(GetValue(o, 'weight', 10));\n    this.setShuffleNeighborsMode(GetValue(o, 'shuffleNeighbors', false));\n    return this;\n  }\n\n  boot() {\n    if (this.gameObject && this.gameObject.once) {\n      // oops, bob object does not have event emitter\n      this.gameObject.on('destroy', this.destroy, this);\n    }\n  }\n\n  shutdown() {\n    if (this.nodeManager !== undefined) {\n      this.nodeManager.destroy();\n    }\n\n    this.setChess();\n    return this;\n  }\n\n  destroy() {\n    this.shutdown();\n    return this;\n  }\n\n  setChess(gameObject) {\n    if (gameObject) {\n      if (this.gameObject !== gameObject) {\n        // Remove attatched event from previous gameObject\n        if (this.gameObject && this.gameObject.once) {\n          this.gameObject.off('destroy', this.setChess, this);\n        }\n\n        this.gameObject = gameObject;\n        this.chessData = GetChessData(gameObject); // Attach event\n\n        if (this.gameObject && this.gameObject.once) {\n          this.gameObject.on('destroy', this.setChess, this);\n        }\n      }\n    } else {\n      this.gameObject = undefined;\n      this.chessData = undefined;\n    }\n\n    return this;\n  }\n\n  setCostFunction(callback, scope) {\n    this.costCallback = callback;\n    this.costCallbackScope = scope;\n    return this;\n  }\n\n  setPathMode(mode) {\n    if (typeof mode === 'string') {\n      mode = CONST[mode];\n    }\n\n    this.pathMode = mode;\n    return this;\n  }\n\n  setCacheCostMode(value) {\n    if (value === undefined) {\n      value = true;\n    }\n\n    this.cacheCost = value;\n    return this;\n  }\n\n  setOccupiedTest(enable) {\n    if (enable === undefined) {\n      enable = true;\n    }\n\n    this.occupiedTest = enable;\n    return this;\n  }\n\n  setBlockerTest(enable) {\n    if (enable === undefined) {\n      enable = true;\n    }\n\n    this.blockerTest = enable;\n    return this;\n  }\n\n  setEdgeBlockerTest(enable) {\n    if (enable === undefined) {\n      enable = true;\n    }\n\n    this.edgeBlockerTest = enable;\n    return this;\n  }\n\n  setWeight(value) {\n    this.weight = value;\n    return this;\n  }\n\n  setShuffleNeighborsMode(value) {\n    if (value === undefined) {\n      value = true;\n    }\n\n    this.shuffleNeighbors = value;\n    return this;\n  }\n\n  get BLOCKER() {\n    return BLOCKER;\n  }\n\n  get INFINITY() {\n    return INFINITY;\n  }\n\n  get board() {\n    return this.chessData.board;\n  }\n\n}\n\nObject.assign(PathFinder.prototype, Methods);\nconst PATHMODE = {\n  'random': 0,\n  'diagonal': 1,\n  'straight': 2,\n  'A*': 3,\n  'line': 4,\n  'A*-line': 5,\n  'A*-random': 6\n};\nexport default PathFinder;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/pathfinder/PathFinder.js"],"names":["GetChessData","Methods","CONST","IsPlainObject","GetValue","BLOCKER","INFINITY","PathFinder","constructor","gameObject","config","undefined","setChess","nodeManager","resetFromJSON","boot","o","costCallback","costCallbackScope","setOccupiedTest","setBlockerTest","setEdgeBlockerTest","setCostFunction","setPathMode","setCacheCostMode","setWeight","setShuffleNeighborsMode","once","on","destroy","shutdown","off","chessData","callback","scope","mode","pathMode","value","cacheCost","enable","occupiedTest","blockerTest","edgeBlockerTest","weight","shuffleNeighbors","board","Object","assign","prototype","PATHMODE"],"mappings":"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","sourcesContent":["import GetChessData from '../chess/GetChessData.js';\r\nimport Methods from './Methods.js';\r\nimport CONST from './const.js';\r\nimport IsPlainObject from '../../utils/object/IsPlainObject.js';\r\nimport GetValue from '../../utils/object/GetValue.js';\r\n\r\nconst BLOCKER = CONST.BLOCKER;\r\nconst INFINITY = CONST.INFINITY;\r\n\r\nclass PathFinder {\r\n    constructor(gameObject, config) {\r\n        if (IsPlainObject(gameObject)) {\r\n            config = gameObject;\r\n            gameObject = undefined;\r\n        }\r\n\r\n        this.setChess(gameObject);\r\n        this.nodeManager = undefined;\r\n        this.resetFromJSON(config);\r\n        this.boot();\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        var costCallback = GetValue(o, 'costCallback', undefined);\r\n        var costCallbackScope = GetValue(o, 'costCallbackScope', undefined);\r\n        if (costCallback === undefined) {\r\n            costCallback = GetValue(o, 'cost', 1);\r\n        }\r\n        this.setOccupiedTest(GetValue(o, 'occupiedTest', false));\r\n        this.setBlockerTest(GetValue(o, 'blockerTest', false));\r\n        this.setEdgeBlockerTest(GetValue(o, 'edgeBlockerTest', false));\r\n        this.setCostFunction(costCallback, costCallbackScope);\r\n        this.setPathMode(GetValue(o, 'pathMode', 0));\r\n        this.setCacheCostMode(GetValue(o, 'cacheCost', true));\r\n        this.setWeight(GetValue(o, 'weight', 10));\r\n        this.setShuffleNeighborsMode(GetValue(o, 'shuffleNeighbors', false));\r\n        return this;\r\n    }\r\n\r\n    boot() {\r\n        if (this.gameObject && this.gameObject.once) { // oops, bob object does not have event emitter\r\n            this.gameObject.on('destroy', this.destroy, this);\r\n        }\r\n    }\r\n\r\n    shutdown() {\r\n        if (this.nodeManager !== undefined) {\r\n            this.nodeManager.destroy();\r\n        }\r\n        this.setChess();\r\n        return this;\r\n    }\r\n\r\n    destroy() {\r\n        this.shutdown();\r\n        return this;\r\n    }\r\n\r\n    setChess(gameObject) {\r\n        if (gameObject) {\r\n            if (this.gameObject !== gameObject) {\r\n                // Remove attatched event from previous gameObject\r\n                if (this.gameObject && this.gameObject.once) {\r\n                    this.gameObject.off('destroy', this.setChess, this);\r\n                }\r\n                this.gameObject = gameObject;\r\n                this.chessData = GetChessData(gameObject);\r\n                // Attach event\r\n                if (this.gameObject && this.gameObject.once) {\r\n                    this.gameObject.on('destroy', this.setChess, this);\r\n                }\r\n            }\r\n        } else {\r\n            this.gameObject = undefined;\r\n            this.chessData = undefined;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setCostFunction(callback, scope) {\r\n        this.costCallback = callback;\r\n        this.costCallbackScope = scope;\r\n        return this;\r\n    }\r\n\r\n    setPathMode(mode) {\r\n        if (typeof (mode) === 'string') {\r\n            mode = CONST[mode];\r\n        }\r\n        this.pathMode = mode;\r\n        return this;\r\n    }\r\n\r\n    setCacheCostMode(value) {\r\n        if (value === undefined) {\r\n            value = true;\r\n        }\r\n        this.cacheCost = value;\r\n        return this;\r\n    }\r\n\r\n    setOccupiedTest(enable) {\r\n        if (enable === undefined) {\r\n            enable = true;\r\n        }\r\n        this.occupiedTest = enable;\r\n        return this;\r\n    }\r\n\r\n    setBlockerTest(enable) {\r\n        if (enable === undefined) {\r\n            enable = true;\r\n        }\r\n        this.blockerTest = enable;\r\n        return this;\r\n    }\r\n\r\n    setEdgeBlockerTest(enable) {\r\n        if (enable === undefined) {\r\n            enable = true;\r\n        }\r\n        this.edgeBlockerTest = enable;\r\n        return this;\r\n    }\r\n\r\n    setWeight(value) {\r\n        this.weight = value;\r\n        return this;\r\n    }\r\n\r\n    setShuffleNeighborsMode(value) {\r\n        if (value === undefined) {\r\n            value = true;\r\n        }\r\n        this.shuffleNeighbors = value;\r\n        return this;\r\n    }\r\n\r\n    get BLOCKER() {\r\n        return BLOCKER;\r\n    }\r\n\r\n    get INFINITY() {\r\n        return INFINITY;\r\n    }\r\n\r\n    get board() {\r\n        return this.chessData.board;\r\n    }\r\n}\r\n\r\nObject.assign(\r\n    PathFinder.prototype,\r\n    Methods\r\n);\r\n\r\nconst PATHMODE = {\r\n    'random': 0,\r\n    'diagonal': 1,\r\n    'straight': 2,\r\n    'A*': 3,\r\n    'line': 4,\r\n    'A*-line': 5,\r\n    'A*-random': 6\r\n}\r\n\r\nexport default PathFinder;"]},"metadata":{},"sourceType":"module"}