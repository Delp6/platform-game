{"ast":null,"code":"import DistanceBetween from '../../../utils/math/distance/DistanceBetween.js';\nimport Linear from '../../../utils/math/Linear.js';\nimport AreTileXYEqual from '../../utils/AreTileXYEqual.js';\n\nvar LineToTileXYArray = function (startX, startY, endX, endY, out) {\n  if (typeof startX !== 'number') {\n    var line = startX;\n    out = startY;\n    startX = line.x1;\n    startY = line.y1;\n    endX = line.x2;\n    endY = line.y2;\n  }\n\n  if (out === undefined) {\n    out = [];\n  }\n\n  var totalDistance = DistanceBetween(startX, startY, endX, endY);\n  var gridSize = Math.min(this.grid.cellWidth, this.grid.cellHeight);\n  var quantity = Math.ceil(totalDistance / (gridSize / 4)),\n      t;\n  var worldX, worldY;\n  var preTileXY, tileXY;\n\n  for (var i = 0; i <= quantity; i++) {\n    t = i / quantity;\n    worldX = Linear(startX, endX, t);\n    worldY = Linear(startY, endY, t);\n    tileXY = this.worldXYToTileXY(worldX, worldY);\n\n    if (!this.contains(tileXY.x, tileXY.y)) {\n      continue;\n    }\n\n    if (preTileXY && AreTileXYEqual(preTileXY, tileXY)) {\n      continue;\n    }\n\n    out.push(tileXY);\n    preTileXY = tileXY;\n  }\n\n  return out;\n};\n\nexport default LineToTileXYArray;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/board/shape/LineToTileXYArray.js"],"names":["DistanceBetween","Linear","AreTileXYEqual","LineToTileXYArray","startX","startY","endX","endY","out","line","x1","y1","x2","y2","undefined","totalDistance","gridSize","Math","min","grid","cellWidth","cellHeight","quantity","ceil","t","worldX","worldY","preTileXY","tileXY","i","worldXYToTileXY","contains","x","y","push"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,iDAA5B;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;;AAEA,IAAIC,iBAAiB,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2C;AAC/D,MAAI,OAAQJ,MAAR,KAAoB,QAAxB,EAAkC;AAC9B,QAAIK,IAAI,GAAGL,MAAX;AACAI,IAAAA,GAAG,GAAGH,MAAN;AACAD,IAAAA,MAAM,GAAGK,IAAI,CAACC,EAAd;AACAL,IAAAA,MAAM,GAAGI,IAAI,CAACE,EAAd;AACAL,IAAAA,IAAI,GAAGG,IAAI,CAACG,EAAZ;AACAL,IAAAA,IAAI,GAAGE,IAAI,CAACI,EAAZ;AACH;;AAED,MAAIL,GAAG,KAAKM,SAAZ,EAAuB;AACnBN,IAAAA,GAAG,GAAG,EAAN;AACH;;AAED,MAAIO,aAAa,GAAGf,eAAe,CAACI,MAAD,EAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,CAAnC;AACA,MAAIS,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKC,IAAL,CAAUC,SAAnB,EAA8B,KAAKD,IAAL,CAAUE,UAAxC,CAAf;AACA,MAAIC,QAAQ,GAAGL,IAAI,CAACM,IAAL,CAAUR,aAAa,IAAIC,QAAQ,GAAG,CAAf,CAAvB,CAAf;AAAA,MACIQ,CADJ;AAEA,MAAIC,MAAJ,EAAYC,MAAZ;AACA,MAAIC,SAAJ,EAAeC,MAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,QAArB,EAA+BO,CAAC,EAAhC,EAAoC;AAChCL,IAAAA,CAAC,GAAGK,CAAC,GAAGP,QAAR;AACAG,IAAAA,MAAM,GAAGxB,MAAM,CAACG,MAAD,EAASE,IAAT,EAAekB,CAAf,CAAf;AACAE,IAAAA,MAAM,GAAGzB,MAAM,CAACI,MAAD,EAASE,IAAT,EAAeiB,CAAf,CAAf;AACAI,IAAAA,MAAM,GAAG,KAAKE,eAAL,CAAqBL,MAArB,EAA6BC,MAA7B,CAAT;;AACA,QAAI,CAAC,KAAKK,QAAL,CAAcH,MAAM,CAACI,CAArB,EAAwBJ,MAAM,CAACK,CAA/B,CAAL,EAAwC;AACpC;AACH;;AACD,QAAIN,SAAS,IAAIzB,cAAc,CAACyB,SAAD,EAAYC,MAAZ,CAA/B,EAAoD;AAChD;AACH;;AAEDpB,IAAAA,GAAG,CAAC0B,IAAJ,CAASN,MAAT;AACAD,IAAAA,SAAS,GAAGC,MAAZ;AACH;;AACD,SAAOpB,GAAP;AACH,CApCD;;AAqCA,eAAeL,iBAAf","sourcesContent":["import DistanceBetween from '../../../utils/math/distance/DistanceBetween.js';\r\nimport Linear from '../../../utils/math/Linear.js';\r\nimport AreTileXYEqual from '../../utils/AreTileXYEqual.js';\r\n\r\nvar LineToTileXYArray = function (startX, startY, endX, endY, out) {\r\n    if (typeof (startX) !== 'number') {\r\n        var line = startX;\r\n        out = startY;\r\n        startX = line.x1;\r\n        startY = line.y1;\r\n        endX = line.x2;\r\n        endY = line.y2;\r\n    }\r\n\r\n    if (out === undefined) {\r\n        out = [];\r\n    }\r\n\r\n    var totalDistance = DistanceBetween(startX, startY, endX, endY);\r\n    var gridSize = Math.min(this.grid.cellWidth, this.grid.cellHeight);\r\n    var quantity = Math.ceil(totalDistance / (gridSize / 4)),\r\n        t;\r\n    var worldX, worldY;\r\n    var preTileXY, tileXY;\r\n    for (var i = 0; i <= quantity; i++) {\r\n        t = i / quantity;\r\n        worldX = Linear(startX, endX, t);\r\n        worldY = Linear(startY, endY, t);\r\n        tileXY = this.worldXYToTileXY(worldX, worldY);\r\n        if (!this.contains(tileXY.x, tileXY.y)) {\r\n            continue;\r\n        }\r\n        if (preTileXY && AreTileXYEqual(preTileXY, tileXY)) {\r\n            continue;\r\n        }\r\n\r\n        out.push(tileXY);\r\n        preTileXY = tileXY;\r\n    }\r\n    return out;\r\n}\r\nexport default LineToTileXYArray;"]},"metadata":{},"sourceType":"module"}