{"ast":null,"code":"import Container from '../../gameobjects/containerlite/ContainerLite.js';\nimport Methods from './Methods.js';\nimport Board from '../board/LogicBoard.js';\nimport MainBoardReference from './mainboard/MainBoardReference.js';\nimport GetValue from '../../utils/object/GetValue.js';\n\nclass MiniBoard extends Container {\n  constructor(scene, x, y, config) {\n    super(scene, x, y, 0, 0);\n    this.type = 'rexMiniBoard';\n    var boardConfig = {\n      isBoard: false,\n      grid: GetValue(config, 'grid', undefined),\n      inifinity: true,\n      wrap: false\n    };\n    this.board = new Board(scene, boardConfig);\n    this.mainBoardRef = new MainBoardReference();\n    this.lastMainBoardRef = new MainBoardReference();\n    this.putTestCallback = undefined;\n    this.putTestCallbackScpe = undefined;\n    this.resetFromJSON(config);\n    this.boot();\n  }\n\n  resetFromJSON(o) {\n    this.setFace(GetValue(o, 'face', 0));\n    var dragEnable = GetValue(o, 'draggable', undefined);\n\n    if (dragEnable !== undefined) {\n      this.setDraggable(dragEnable);\n    }\n\n    this.lastTransferResult = GetValue(o, 'lastTransferResult', undefined);\n    return this;\n  }\n\n  boot() {\n    this.scene.events.once('shutdown', this.destroy, this);\n  }\n\n  shutdown() {\n    this.clear(true);\n    this.board.shutdown();\n    super.shutdown();\n    this.scene = undefined;\n    this.board = undefined;\n    this.setPutTestCallback(undefined, undefined);\n    return this;\n  }\n\n  destroy() {\n    this.emit('destroy');\n    this.shutdown();\n    return this;\n  }\n\n  setFace(direction) {\n    this.face = this.board.grid.directionNormalize(direction);\n    return this;\n  }\n\n  get mainBoard() {\n    return this.mainBoardRef.mainBoard;\n  }\n\n  get tileX() {\n    return this.mainBoardRef.tileX;\n  }\n\n  get tileY() {\n    return this.mainBoardRef.tileY;\n  }\n\n  get grid() {\n    return this.board.grid;\n  }\n\n  get tileXYZMap() {\n    return this.board.boardData.UIDToXYZ; // {uid:{x,y,z}}\n  }\n\n  setPutTestCallback(callback, scope) {\n    this.putTestCallback = callback;\n    this.putTestCallbackScpe = scope;\n    return this;\n  }\n\n}\n\nObject.assign(MiniBoard.prototype, Methods);\nexport default MiniBoard;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/miniboard/MiniBoard.js"],"names":["Container","Methods","Board","MainBoardReference","GetValue","MiniBoard","constructor","scene","x","y","config","type","boardConfig","isBoard","grid","undefined","inifinity","wrap","board","mainBoardRef","lastMainBoardRef","putTestCallback","putTestCallbackScpe","resetFromJSON","boot","o","setFace","dragEnable","setDraggable","lastTransferResult","events","once","destroy","shutdown","clear","setPutTestCallback","emit","direction","face","directionNormalize","mainBoard","tileX","tileY","tileXYZMap","boardData","UIDToXYZ","callback","scope","Object","assign","prototype"],"mappings":"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","sourcesContent":["import Container from '../../gameobjects/containerlite/ContainerLite.js';\r\nimport Methods from './Methods.js';\r\nimport Board from '../board/LogicBoard.js';\r\nimport MainBoardReference from './mainboard/MainBoardReference.js';\r\nimport GetValue from '../../utils/object/GetValue.js';\r\n\r\nclass MiniBoard extends Container {\r\n    constructor(scene, x, y, config) {\r\n        super(scene, x, y, 0, 0);\r\n        this.type = 'rexMiniBoard';\r\n        var boardConfig = {\r\n            isBoard: false,\r\n            grid: GetValue(config, 'grid', undefined),\r\n            inifinity: true,\r\n            wrap: false\r\n        }\r\n        this.board = new Board(scene, boardConfig);\r\n        this.mainBoardRef = new MainBoardReference();\r\n        this.lastMainBoardRef = new MainBoardReference();\r\n\r\n        this.putTestCallback = undefined;\r\n        this.putTestCallbackScpe = undefined;\r\n\r\n        this.resetFromJSON(config);\r\n        this.boot();\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        this.setFace(GetValue(o, 'face', 0));\r\n        var dragEnable = GetValue(o, 'draggable', undefined);\r\n        if (dragEnable !== undefined) {\r\n            this.setDraggable(dragEnable);\r\n        }\r\n        this.lastTransferResult = GetValue(o, 'lastTransferResult', undefined);\r\n        return this;\r\n    }\r\n\r\n    boot() {\r\n        this.scene.events.once('shutdown', this.destroy, this);\r\n    }\r\n\r\n    shutdown() {\r\n        this.clear(true);\r\n        this.board.shutdown();\r\n        super.shutdown();\r\n\r\n        this.scene = undefined;\r\n        this.board = undefined;\r\n        this.setPutTestCallback(undefined, undefined);\r\n        return this;\r\n    }\r\n\r\n    destroy() {\r\n        this.emit('destroy');\r\n        this.shutdown();\r\n        return this;\r\n    }\r\n\r\n    setFace(direction) {\r\n        this.face = this.board.grid.directionNormalize(direction);\r\n        return this;\r\n    }\r\n\r\n    get mainBoard() {\r\n        return this.mainBoardRef.mainBoard;\r\n    }\r\n\r\n    get tileX() {\r\n        return this.mainBoardRef.tileX;\r\n    }\r\n\r\n    get tileY() {\r\n        return this.mainBoardRef.tileY;\r\n    }\r\n\r\n    get grid() {\r\n        return this.board.grid;\r\n    }\r\n\r\n    get tileXYZMap() {\r\n        return this.board.boardData.UIDToXYZ; // {uid:{x,y,z}}\r\n    }\r\n\r\n    setPutTestCallback(callback, scope) {\r\n        this.putTestCallback = callback;\r\n        this.putTestCallbackScpe = scope;\r\n        return this;\r\n    }\r\n}\r\n\r\nObject.assign(\r\n    MiniBoard.prototype,\r\n    Methods\r\n);\r\n\r\nexport default MiniBoard;"]},"metadata":{},"sourceType":"module"}