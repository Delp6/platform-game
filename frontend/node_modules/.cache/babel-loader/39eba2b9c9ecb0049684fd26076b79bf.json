{"ast":null,"code":"import TickTask from '../../utils/ticktask/TickTask.js';\nimport Methods from './Methods.js';\nimport MoveToTask from '../../behaviors/moveto/MoveTo.js';\nimport GetChessData from '../chess/GetChessData.js';\nimport GetValue from '../../utils/object/GetValue.js';\n\nclass MoveTo extends TickTask {\n  constructor(gameObject, config) {\n    super(gameObject, config);\n    this.gameObject = gameObject;\n    this.chessData = GetChessData(gameObject);\n    this.scene = gameObject.scene;\n    this.moveToTask = new MoveToTask(gameObject, moveToTaskConfig);\n    this.resetFromJSON(config);\n    this.boot();\n  }\n\n  resetFromJSON(o) {\n    this.isRunning = GetValue(o, 'isRunning', false);\n    this.setEnable(GetValue(o, 'enable', true));\n    this.timeScale = GetValue(o, 'timeScale', 1);\n    this.setSpeed(GetValue(o, 'speed', 400));\n    this.setRotateToTarget(GetValue(o, 'rotateToTarget', false));\n    this.setOccupiedTest(GetValue(o, 'occupiedTest', false));\n    this.setBlockerTest(GetValue(o, 'blockerTest', false));\n    this.setEdgeBlockerTest(GetValue(o, 'edgeBlockerTest', false));\n    this.setMoveableTestCallback(GetValue(o, 'moveableTest', undefined), GetValue(o, 'moveableTestScope', undefined));\n    this.setSneakEnable(GetValue(o, 'sneak', false));\n    this.destinationTileX = GetValue(o, 'destinationTileX', null);\n    this.destinationTileY = GetValue(o, 'destinationTileY', null);\n    this.destinationDirection = GetValue(o, 'destinationDirection', null);\n    this.lastMoveResult = GetValue(o, 'lastMoveResult', undefined);\n    return this;\n  }\n\n  toJSON() {\n    return {\n      isRunning: this.isRunning,\n      enable: this.enable,\n      timeScale: this.timeScale,\n      speed: this.speed,\n      occupiedTest: this.occupiedTest,\n      blockerTest: this.blockerTest,\n      edgeBlockerTest: this.edgeBlockerTest,\n      moveableTest: this.moveableTestCallback,\n      moveableTestScope: this.moveableTestScope,\n      rotateToTarget: this.rotateToTarget,\n      destinationTileX: this.destinationTileX,\n      destinationTileY: this.destinationTileY,\n      destinationDirection: this.destinationDirection,\n      lastMoveResult: this.lastMoveResult,\n      tickingMode: this.tickingMode\n    };\n  }\n\n  boot() {\n    super.boot();\n\n    if (this.gameObject.once) {\n      // oops, bob object does not have event emitter\n      this.gameObject.on('destroy', this.destroy, this);\n    }\n  }\n\n  shutdown() {\n    this.moveToTask.shutdown();\n    super.shutdown();\n    this.gameObject = undefined;\n    this.scene = undefined;\n  }\n\n  destroy() {\n    this.shutdown();\n  }\n\n  startTicking() {\n    super.startTicking();\n    this.scene.events.on('update', this.update, this);\n  }\n\n  stopTicking() {\n    super.stopTicking();\n\n    if (this.scene) {\n      // Scene might be destoryed\n      this.scene.events.off('update', this.update, this);\n    }\n  }\n\n  set enable(value) {\n    this.moveToTask.setEnable(value);\n  }\n\n  get enable() {\n    return this.moveToTask.enable;\n  }\n\n  setEnable(e) {\n    if (e == undefined) {\n      e = true;\n    }\n\n    this.enable = e;\n    return this;\n  }\n\n  get timeScale() {\n    return this.moveToTask.timeScale;\n  }\n\n  set timeScale(value) {\n    this.moveToTask.timeScale = value;\n  }\n\n  set speed(value) {\n    this.moveToTask.setSpeed(value);\n  }\n\n  get speed() {\n    return this.moveToTask.speed;\n  }\n\n  setSpeed(speed) {\n    this.speed = speed;\n    return this;\n  }\n\n  set rotateToTarget(value) {\n    this.moveToTask.setRotateToTarget(value);\n  }\n\n  get rotateToTarget() {\n    return this.moveToTask.rotateToTarget;\n  }\n\n  setRotateToTarget(rotateToTarget) {\n    this.rotateToTarget = rotateToTarget;\n    return this;\n  }\n\n  setOccupiedTest(enable) {\n    if (enable === undefined) {\n      enable = true;\n    }\n\n    this.occupiedTest = enable;\n    return this;\n  }\n\n  setBlockerTest(enable) {\n    if (enable === undefined) {\n      enable = true;\n    }\n\n    this.blockerTest = enable;\n    return this;\n  }\n\n  setEdgeBlockerTest(enable) {\n    if (enable === undefined) {\n      enable = true;\n    }\n\n    this.edgeBlockerTest = enable;\n    return this;\n  }\n\n  setMoveableTestCallback(callback, scope) {\n    this.moveableTestCallback = callback;\n    this.moveableTestScope = scope;\n    return this;\n  }\n\n  setSneakEnable(enable) {\n    if (enable === undefined) {\n      enable = true;\n    }\n\n    this.sneakMode = enable;\n    this.tileZSave = undefined;\n    return this;\n  }\n\n  pause() {\n    this.isRunning = false;\n    return this;\n  }\n\n  resume() {\n    this.isRunning = true;\n    return this;\n  }\n\n  stop() {\n    this.isRunning = false;\n    return this;\n  }\n  /** @private */\n\n\n  moveAlongLine(startX, startY, endX, endY) {\n    if (startX !== undefined) {\n      this.gameObject.x = startX;\n    }\n\n    if (startY !== undefined) {\n      this.gameObject.y = startY;\n    }\n\n    this.moveToTask.moveTo(endX, endY);\n    return this;\n  }\n\n  /** @private */\n  addMoveLine(startX, startY, endX, endY) {\n    if (!this.moveToTask.hasOwnProperty('nextlines')) {\n      this.moveToTask.nextlines = [];\n    }\n\n    this.moveToTask.nextlines.push([startX, startY, endX, endY]);\n    return this;\n  }\n\n  /** @private */\n  moveNextLine() {\n    var nextlines = this.moveToTask.nextlines;\n\n    if (!nextlines) {\n      return false;\n    }\n\n    if (nextlines.length === 0) {\n      return false;\n    } // has next line\n\n\n    this.moveAlongLine.apply(this, nextlines[0]);\n    nextlines.length = 0;\n    return true;\n  }\n  /** @private */\n\n\n  update(time, delta) {\n    if (!this.isRunning || !this.enable) {\n      return this;\n    }\n\n    var moveToTask = this.moveToTask;\n    moveToTask.update(time, delta);\n\n    if (!moveToTask.isRunning) {\n      if (!this.moveNextLine()) {\n        this.complete();\n      }\n\n      return this;\n    }\n\n    return this;\n  }\n\n}\n\nconst moveToTaskConfig = {\n  tickingMode: 0\n};\nObject.assign(MoveTo.prototype, Methods);\nexport default MoveTo;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/moveto/MoveTo.js"],"names":["TickTask","Methods","MoveToTask","GetChessData","GetValue","MoveTo","constructor","gameObject","config","chessData","scene","moveToTask","moveToTaskConfig","resetFromJSON","boot","o","isRunning","setEnable","timeScale","setSpeed","setRotateToTarget","setOccupiedTest","setBlockerTest","setEdgeBlockerTest","setMoveableTestCallback","undefined","setSneakEnable","destinationTileX","destinationTileY","destinationDirection","lastMoveResult","toJSON","enable","speed","occupiedTest","blockerTest","edgeBlockerTest","moveableTest","moveableTestCallback","moveableTestScope","rotateToTarget","tickingMode","once","on","destroy","shutdown","startTicking","events","update","stopTicking","off","value","e","callback","scope","sneakMode","tileZSave","pause","resume","stop","moveAlongLine","startX","startY","endX","endY","x","y","moveTo","addMoveLine","hasOwnProperty","nextlines","push","moveNextLine","length","apply","time","delta","complete","Object","assign","prototype"],"mappings":"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","sourcesContent":["import TickTask from '../../utils/ticktask/TickTask.js';\r\nimport Methods from './Methods.js';\r\nimport MoveToTask from '../../behaviors/moveto/MoveTo.js';\r\nimport GetChessData from '../chess/GetChessData.js';\r\nimport GetValue from '../../utils/object/GetValue.js';\r\n\r\nclass MoveTo extends TickTask {\r\n    constructor(gameObject, config) {\r\n        super(gameObject, config);\r\n\r\n        this.gameObject = gameObject;\r\n        this.chessData = GetChessData(gameObject);\r\n        this.scene = gameObject.scene;\r\n        this.moveToTask = new MoveToTask(gameObject, moveToTaskConfig);\r\n\r\n        this.resetFromJSON(config);\r\n        this.boot();\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        this.isRunning = GetValue(o, 'isRunning', false);\r\n        this.setEnable(GetValue(o, 'enable', true));\r\n        this.timeScale = GetValue(o, 'timeScale', 1);\r\n        this.setSpeed(GetValue(o, 'speed', 400));\r\n        this.setRotateToTarget(GetValue(o, 'rotateToTarget', false));\r\n        this.setOccupiedTest(GetValue(o, 'occupiedTest', false));\r\n        this.setBlockerTest(GetValue(o, 'blockerTest', false));\r\n        this.setEdgeBlockerTest(GetValue(o, 'edgeBlockerTest', false));\r\n        this.setMoveableTestCallback(GetValue(o, 'moveableTest', undefined), GetValue(o, 'moveableTestScope', undefined));\r\n        this.setSneakEnable(GetValue(o, 'sneak', false));\r\n        this.destinationTileX = GetValue(o, 'destinationTileX', null);\r\n        this.destinationTileY = GetValue(o, 'destinationTileY', null);\r\n        this.destinationDirection = GetValue(o, 'destinationDirection', null);\r\n        this.lastMoveResult = GetValue(o, 'lastMoveResult', undefined);\r\n        return this;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            isRunning: this.isRunning,\r\n            enable: this.enable,\r\n            timeScale: this.timeScale,\r\n            speed: this.speed,\r\n            occupiedTest: this.occupiedTest,\r\n            blockerTest: this.blockerTest,\r\n            edgeBlockerTest: this.edgeBlockerTest,\r\n            moveableTest: this.moveableTestCallback,\r\n            moveableTestScope: this.moveableTestScope,\r\n            rotateToTarget: this.rotateToTarget,\r\n            destinationTileX: this.destinationTileX,\r\n            destinationTileY: this.destinationTileY,\r\n            destinationDirection: this.destinationDirection,\r\n            lastMoveResult: this.lastMoveResult,\r\n            tickingMode: this.tickingMode\r\n        };\r\n    }\r\n\r\n    boot() {\r\n        super.boot();\r\n        if (this.gameObject.once) { // oops, bob object does not have event emitter\r\n            this.gameObject.on('destroy', this.destroy, this);\r\n        }\r\n    }\r\n\r\n    shutdown() {\r\n        this.moveToTask.shutdown();\r\n        super.shutdown();\r\n        this.gameObject = undefined;\r\n        this.scene = undefined;\r\n    }\r\n\r\n    destroy() {\r\n        this.shutdown();\r\n    }\r\n\r\n    startTicking() {\r\n        super.startTicking();\r\n        this.scene.events.on('update', this.update, this);\r\n    }\r\n\r\n    stopTicking() {\r\n        super.stopTicking();\r\n        if (this.scene) { // Scene might be destoryed\r\n            this.scene.events.off('update', this.update, this);\r\n        }\r\n    }\r\n\r\n    set enable(value) {\r\n        this.moveToTask.setEnable(value);\r\n    }\r\n\r\n    get enable() {\r\n        return this.moveToTask.enable;\r\n    }\r\n\r\n    setEnable(e) {\r\n        if (e == undefined) {\r\n            e = true;\r\n        }\r\n        this.enable = e;\r\n        return this;\r\n    }\r\n\r\n    get timeScale() {\r\n        return this.moveToTask.timeScale;\r\n    }\r\n\r\n    set timeScale(value) {\r\n        this.moveToTask.timeScale = value;\r\n    }\r\n\r\n    set speed(value) {\r\n        this.moveToTask.setSpeed(value);\r\n    }\r\n\r\n    get speed() {\r\n        return this.moveToTask.speed;\r\n    }\r\n\r\n    setSpeed(speed) {\r\n        this.speed = speed;\r\n        return this;\r\n    }\r\n\r\n    set rotateToTarget(value) {\r\n        this.moveToTask.setRotateToTarget(value);\r\n    }\r\n\r\n    get rotateToTarget() {\r\n        return this.moveToTask.rotateToTarget;\r\n    }\r\n\r\n    setRotateToTarget(rotateToTarget) {\r\n        this.rotateToTarget = rotateToTarget;\r\n        return this;\r\n    }\r\n\r\n    setOccupiedTest(enable) {\r\n        if (enable === undefined) {\r\n            enable = true;\r\n        }\r\n        this.occupiedTest = enable;\r\n        return this;\r\n    }\r\n\r\n    setBlockerTest(enable) {\r\n        if (enable === undefined) {\r\n            enable = true;\r\n        }\r\n        this.blockerTest = enable;\r\n        return this;\r\n    }\r\n\r\n    setEdgeBlockerTest(enable) {\r\n        if (enable === undefined) {\r\n            enable = true;\r\n        }\r\n        this.edgeBlockerTest = enable;\r\n        return this;\r\n    }\r\n\r\n    setMoveableTestCallback(callback, scope) {\r\n        this.moveableTestCallback = callback;\r\n        this.moveableTestScope = scope;\r\n        return this;\r\n    }\r\n\r\n    setSneakEnable(enable) {\r\n        if (enable === undefined) {\r\n            enable = true;\r\n        }\r\n\r\n        this.sneakMode = enable;\r\n        this.tileZSave = undefined;\r\n        return this;\r\n    }\r\n\r\n    pause() {\r\n        this.isRunning = false;\r\n        return this;\r\n    }\r\n\r\n    resume() {\r\n        this.isRunning = true;\r\n        return this;\r\n    }\r\n\r\n    stop() {\r\n        this.isRunning = false;\r\n        return this;\r\n    }\r\n\r\n    /** @private */\r\n    moveAlongLine(startX, startY, endX, endY) {\r\n        if (startX !== undefined) {\r\n            this.gameObject.x = startX;\r\n        }\r\n        if (startY !== undefined) {\r\n            this.gameObject.y = startY;\r\n        }\r\n        this.moveToTask.moveTo(endX, endY);\r\n        return this;\r\n    };\r\n\r\n    /** @private */\r\n    addMoveLine(startX, startY, endX, endY) {\r\n        if (!this.moveToTask.hasOwnProperty('nextlines')) {\r\n            this.moveToTask.nextlines = [];\r\n        }\r\n        this.moveToTask.nextlines.push(\r\n            [startX, startY, endX, endY]\r\n        );\r\n        return this;\r\n    };\r\n\r\n    /** @private */\r\n    moveNextLine() {\r\n        var nextlines = this.moveToTask.nextlines;\r\n        if (!nextlines) {\r\n            return false;\r\n        }\r\n        if (nextlines.length === 0) {\r\n            return false;\r\n        }\r\n        // has next line\r\n        this.moveAlongLine.apply(this, nextlines[0]);\r\n        nextlines.length = 0;\r\n        return true;\r\n    }\r\n\r\n    /** @private */\r\n    update(time, delta) {\r\n        if ((!this.isRunning) || (!this.enable)) {\r\n            return this;\r\n        }\r\n\r\n        var moveToTask = this.moveToTask;\r\n        moveToTask.update(time, delta);\r\n        if (!moveToTask.isRunning) {\r\n            if (!this.moveNextLine()) {\r\n                this.complete();\r\n            }\r\n            return this;\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nconst moveToTaskConfig = {\r\n    tickingMode: 0\r\n};\r\n\r\nObject.assign(\r\n    MoveTo.prototype,\r\n    Methods\r\n);\r\n\r\n\r\nexport default MoveTo;"]},"metadata":{},"sourceType":"module"}