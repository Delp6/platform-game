{"ast":null,"code":"import Methods from './Methods.js';\nimport GetChessData from '../chess/GetChessData.js';\nimport CONST from './const.js';\nimport DegToRad from '../../utils/math/DegToRad.js';\nimport AngleNormalize from '../../utils/math/angle/Normalize.js';\nimport GetValue from '../../utils/object/GetValue.js';\nconst BLOCKER = CONST.BLOCKER;\nconst INFINITY = CONST.INFINITY;\n\nclass FieldOfView {\n  constructor(gameObject, config) {\n    this.gameObject = gameObject;\n    this.chessData = GetChessData(gameObject);\n    this.resetFromJSON(config);\n  }\n\n  resetFromJSON(o) {\n    // Pre-test\n    var occupiedTest = GetValue(o, 'occupiedTest', false);\n    var blockerTest = GetValue(o, 'blockerTest', false);\n    var edgeBlockerTest = GetValue(o, 'edgeBlockerTest', false); // Unsupport now\n\n    var preTestCallback = GetValue(o, 'preTestCallback', undefined);\n    var preTestCallbackScope = GetValue(o, 'preTestCallbackScope', undefined); // Cost of each tile\n\n    var costCallback = GetValue(o, 'costCallback', undefined);\n    var costCallbackScope = GetValue(o, 'costCallbackScope', undefined);\n\n    if (costCallback === undefined) {\n      costCallback = GetValue(o, 'cost', undefined);\n    }\n\n    this.setFace(GetValue(o, 'face', 0));\n    this.setConeMode(GetValue(o, 'coneMode', 0));\n    this.setCone(GetValue(o, 'cone', undefined));\n    this.setOccupiedTest(occupiedTest);\n    this.setBlockerTest(blockerTest);\n    this.setEdgeBlockerTest(edgeBlockerTest);\n    this.setPreTestFunction(preTestCallback, preTestCallbackScope);\n    this.setCostFunction(costCallback, costCallbackScope);\n    this.setDebugGraphics(GetValue(o, 'debug.graphics', undefined));\n    this.setDebugLineColor(GetValue(o, 'debug.visibleLineColor', 0x00ff00), GetValue(o, 'debug.invisibleLineColor', 0xff0000));\n    this.setDebugLog(GetValue(o, 'debug.log', false));\n    return this;\n  }\n\n  boot() {\n    if (this.gameObject.once) {\n      // oops, bob object does not have event emitter\n      this.gameObject.on('destroy', this.destroy, this);\n    }\n  }\n\n  shutdown() {\n    this.debugGraphics = undefined;\n    this.gameObject = undefined;\n    this.chessData = undefined;\n    return this;\n  }\n\n  destroy() {\n    this.shutdown();\n    return this;\n  }\n\n  get face() {\n    return this._face;\n  }\n\n  set face(direction) {\n    direction = this.board.grid.directionNormalize(direction);\n    this._face = direction;\n\n    if (this.coneMode === 0) {// Direction\n      // Do nothing\n    } else {\n      // Angle\n      var angle = this.board.angleToward(this.chessData.tileXYZ, direction); // -PI~PI\n\n      this.faceAngle = AngleNormalize(angle); // 0~2PI\n    }\n  }\n\n  setFace(direction) {\n    this.face = direction;\n    return this;\n  }\n\n  get cone() {\n    return this._cone;\n  }\n\n  set cone(value) {\n    this._cone = value;\n\n    if (value !== undefined) {\n      if (this.coneMode === 0) {// Direction\n      } else {\n        // Angle\n        this.coneRad = DegToRad(value);\n      }\n    }\n  }\n\n  setConeMode(mode) {\n    if (typeof mode === 'string') {\n      mode = CONEMODE[mode];\n    }\n\n    this.coneMode = mode;\n    return this;\n  }\n\n  setCone(value) {\n    this.cone = value;\n    return this;\n  }\n\n  setOccupiedTest(enable) {\n    if (enable === undefined) {\n      enable = true;\n    }\n\n    this.occupiedTest = enable;\n    return this;\n  }\n\n  setBlockerTest(enable) {\n    if (enable === undefined) {\n      enable = true;\n    }\n\n    this.blockerTest = enable;\n    return this;\n  }\n\n  setEdgeBlockerTest(enable) {\n    if (enable === undefined) {\n      enable = true;\n    }\n\n    this.edgeBlockerTest = enable;\n    return this;\n  }\n\n  setCostFunction(callback, scope) {\n    this.costCallback = callback;\n    this.costCallbackScope = scope;\n    return this;\n  }\n\n  setPreTestFunction(callback, scope) {\n    this.preTestCallback = callback;\n    this.preTestCallbackScope = scope;\n    return this;\n  }\n\n  setDebugGraphics(graphics) {\n    this.debugGraphics = graphics;\n    return this;\n  }\n\n  setDebugLineColor(visibleLineColor, invisibleLineColor) {\n    this.debugVisibleLineColor = visibleLineColor;\n    this.debugInvisibleLineColor = invisibleLineColor;\n    return this;\n  }\n\n  setDebugLog(enabled) {\n    if (enabled === undefined) {\n      enabled = true;\n    }\n\n    this.debugLog = enabled;\n    return this;\n  }\n\n  clearDebugGraphics() {\n    if (this.debugGraphics) {\n      this.debugGraphics.clear();\n    }\n\n    return this;\n  }\n\n  get BLOCKER() {\n    return BLOCKER;\n  }\n\n  get INFINITY() {\n    return INFINITY;\n  }\n\n  get board() {\n    return this.chessData.board;\n  }\n\n}\n\nconst CONEMODE = {\n  direction: 0,\n  angle: 1\n};\nObject.assign(FieldOfView.prototype, Methods);\nexport default FieldOfView;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/fieldofview/FieldOfView.js"],"names":["Methods","GetChessData","CONST","DegToRad","AngleNormalize","GetValue","BLOCKER","INFINITY","FieldOfView","constructor","gameObject","config","chessData","resetFromJSON","o","occupiedTest","blockerTest","edgeBlockerTest","preTestCallback","undefined","preTestCallbackScope","costCallback","costCallbackScope","setFace","setConeMode","setCone","setOccupiedTest","setBlockerTest","setEdgeBlockerTest","setPreTestFunction","setCostFunction","setDebugGraphics","setDebugLineColor","setDebugLog","boot","once","on","destroy","shutdown","debugGraphics","face","_face","direction","board","grid","directionNormalize","coneMode","angle","angleToward","tileXYZ","faceAngle","cone","_cone","value","coneRad","mode","CONEMODE","enable","callback","scope","graphics","visibleLineColor","invisibleLineColor","debugVisibleLineColor","debugInvisibleLineColor","enabled","debugLog","clearDebugGraphics","clear","Object","assign","prototype"],"mappings":"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","sourcesContent":["import Methods from './Methods.js';\r\nimport GetChessData from '../chess/GetChessData.js';\r\nimport CONST from './const.js';\r\nimport DegToRad from '../../utils/math/DegToRad.js';\r\nimport AngleNormalize from '../../utils/math/angle/Normalize.js';\r\nimport GetValue from '../../utils/object/GetValue.js';\r\n\r\nconst BLOCKER = CONST.BLOCKER;\r\nconst INFINITY = CONST.INFINITY;\r\n\r\nclass FieldOfView {\r\n    constructor(gameObject, config) {\r\n        this.gameObject = gameObject;\r\n        this.chessData = GetChessData(gameObject);\r\n        this.resetFromJSON(config);\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        // Pre-test\r\n        var occupiedTest = GetValue(o, 'occupiedTest', false);\r\n        var blockerTest = GetValue(o, 'blockerTest', false);\r\n        var edgeBlockerTest = GetValue(o, 'edgeBlockerTest', false); // Unsupport now\r\n        var preTestCallback = GetValue(o, 'preTestCallback', undefined);\r\n        var preTestCallbackScope = GetValue(o, 'preTestCallbackScope', undefined);\r\n        // Cost of each tile\r\n        var costCallback = GetValue(o, 'costCallback', undefined);\r\n        var costCallbackScope = GetValue(o, 'costCallbackScope', undefined);\r\n        if (costCallback === undefined) {\r\n            costCallback = GetValue(o, 'cost', undefined);\r\n        }\r\n\r\n        this.setFace(GetValue(o, 'face', 0));\r\n        this.setConeMode(GetValue(o, 'coneMode', 0));\r\n        this.setCone(GetValue(o, 'cone', undefined));\r\n        this.setOccupiedTest(occupiedTest);\r\n        this.setBlockerTest(blockerTest);\r\n        this.setEdgeBlockerTest(edgeBlockerTest);\r\n        this.setPreTestFunction(preTestCallback, preTestCallbackScope);\r\n        this.setCostFunction(costCallback, costCallbackScope);\r\n        this.setDebugGraphics(GetValue(o, 'debug.graphics', undefined));\r\n        this.setDebugLineColor(GetValue(o, 'debug.visibleLineColor', 0x00ff00), GetValue(o, 'debug.invisibleLineColor', 0xff0000));\r\n        this.setDebugLog(GetValue(o, 'debug.log', false));\r\n        return this;\r\n    }\r\n\r\n    boot() {\r\n        if (this.gameObject.once) { // oops, bob object does not have event emitter\r\n            this.gameObject.on('destroy', this.destroy, this);\r\n        }\r\n    }\r\n\r\n    shutdown() {\r\n        this.debugGraphics = undefined;\r\n        this.gameObject = undefined;\r\n        this.chessData = undefined;\r\n        return this;\r\n    }\r\n\r\n    destroy() {\r\n        this.shutdown();\r\n        return this;\r\n    }\r\n\r\n    get face() {\r\n        return this._face;\r\n    }\r\n\r\n    set face(direction) {\r\n        direction = this.board.grid.directionNormalize(direction);\r\n        this._face = direction;\r\n        if (this.coneMode === 0) { // Direction\r\n            // Do nothing\r\n        } else { // Angle\r\n            var angle = this.board.angleToward(this.chessData.tileXYZ, direction); // -PI~PI\r\n            this.faceAngle = AngleNormalize(angle); // 0~2PI\r\n        }\r\n    }\r\n\r\n    setFace(direction) {\r\n        this.face = direction;\r\n        return this;\r\n    }\r\n\r\n    get cone() {\r\n        return this._cone;\r\n    }\r\n\r\n    set cone(value) {\r\n        this._cone = value;\r\n\r\n        if (value !== undefined) {\r\n            if (this.coneMode === 0) { // Direction\r\n            } else { // Angle\r\n                this.coneRad = DegToRad(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    setConeMode(mode) {\r\n        if (typeof (mode) === 'string') {\r\n            mode = CONEMODE[mode];\r\n        }\r\n        this.coneMode = mode;\r\n        return this;\r\n    }\r\n\r\n    setCone(value) {\r\n        this.cone = value;\r\n        return this;\r\n    }\r\n\r\n    setOccupiedTest(enable) {\r\n        if (enable === undefined) {\r\n            enable = true;\r\n        }\r\n        this.occupiedTest = enable;\r\n        return this;\r\n    }\r\n\r\n    setBlockerTest(enable) {\r\n        if (enable === undefined) {\r\n            enable = true;\r\n        }\r\n        this.blockerTest = enable;\r\n        return this;\r\n    }\r\n\r\n    setEdgeBlockerTest(enable) {\r\n        if (enable === undefined) {\r\n            enable = true;\r\n        }\r\n        this.edgeBlockerTest = enable;\r\n        return this;\r\n    }\r\n\r\n    setCostFunction(callback, scope) {\r\n        this.costCallback = callback;\r\n        this.costCallbackScope = scope;\r\n        return this;\r\n    }\r\n\r\n    setPreTestFunction(callback, scope) {\r\n        this.preTestCallback = callback;\r\n        this.preTestCallbackScope = scope;\r\n        return this;\r\n    }\r\n\r\n    setDebugGraphics(graphics) {\r\n        this.debugGraphics = graphics;\r\n        return this;\r\n    }\r\n\r\n    setDebugLineColor(visibleLineColor, invisibleLineColor) {\r\n        this.debugVisibleLineColor = visibleLineColor;\r\n        this.debugInvisibleLineColor = invisibleLineColor;\r\n        return this;\r\n    }\r\n\r\n    setDebugLog(enabled) {\r\n        if (enabled === undefined) {\r\n            enabled = true;\r\n        }\r\n        this.debugLog = enabled;\r\n        return this;\r\n    }\r\n\r\n    clearDebugGraphics() {\r\n        if (this.debugGraphics) {\r\n            this.debugGraphics.clear();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    get BLOCKER() {\r\n        return BLOCKER;\r\n    }\r\n\r\n    get INFINITY() {\r\n        return INFINITY;\r\n    }\r\n\r\n    get board() {\r\n        return this.chessData.board;\r\n    }\r\n}\r\n\r\nconst CONEMODE = {\r\n    direction: 0,\r\n    angle: 1,\r\n};\r\n\r\nObject.assign(\r\n    FieldOfView.prototype,\r\n    Methods\r\n);\r\n\r\nexport default FieldOfView;"]},"metadata":{},"sourceType":"module"}