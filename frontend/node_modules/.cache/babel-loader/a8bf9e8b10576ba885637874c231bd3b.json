{"ast":null,"code":"import GetAngle from '../../math/angle/Between.js';\nimport RadToDegree from '../../math/RadToDeg.js';\n\nvar DirectionBetween = function (tileA, tileB, round) {\n  if (round === undefined) {\n    round = true;\n  }\n\n  var direction;\n\n  switch (this.mode) {\n    case 0: // orthogonal\n\n    case 1:\n      // isometric\n      if (tileA.y === tileB.y) {\n        direction = tileB.x >= tileA.x ? 0 : 2;\n      } else if (tileA.x === tileB.x) {\n        direction = tileB.y >= tileA.y ? 1 : 3;\n      } else if (this.directions === 4) {\n        var angle = RadToDegree(GetAngle(tileA.x, tileA.y, tileB.x, tileB.y)); // -180~180\n\n        if (angle < 0) {\n          angle += 360;\n        }\n\n        direction = angle / 90;\n\n        if (round) {\n          direction = Math.round(direction);\n        }\n      } else {\n        // this.directions === 8\n        var dx = tileB.x - tileA.x;\n        var dy = tileB.y - tileA.y;\n\n        if (dx === dy) {\n          direction = dx > 0 ? 4 : 6;\n        } else if (dx === -dy) {\n          direction = dx > 0 ? 7 : 5;\n        } else {\n          var angle = RadToDegree(Math.atan2(dy, dx));\n\n          if (angle < 0) {\n            angle += 360;\n          }\n\n          var steps = angle / 45;\n\n          if (round) {\n            steps = Math.round(steps);\n          }\n\n          if (steps >= 0 && steps < 1) {\n            direction = steps; // (steps - 0) + 0\n          } else if (steps >= 1 && steps < 2) {\n            direction = steps + 3; // (steps - 1) + 4\n          } else if (steps >= 2 && steps < 3) {\n            direction = steps - 1; // (steps - 2) + 1\n          } else if (steps >= 3 && steps < 4) {\n            direction = steps + 2; // (steps - 3) + 5\n          } else if (steps >= 4 && steps < 5) {\n            direction = steps - 2; // (steps - 4) + 2\n          } else if (steps >= 5 && steps < 6) {\n            direction = steps + 1; // (steps - 5) + 6\n          } else if (steps >= 6 && steps < 7) {\n            direction = steps - 3; // (steps - 6) + 3\n          } else {\n            // if ((steps >= 7) && (steps < 8))\n            direction = steps; // (steps - 7) + 7\n          }\n        }\n      }\n\n      break;\n\n    case 2:\n      // staggered\n      // TODO\n      break;\n  }\n\n  if (direction === this.directions) {\n    direction = 0;\n  }\n\n  return direction;\n};\n\nexport default DirectionBetween;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/utils/grid/quad/DirectionBetween.js"],"names":["GetAngle","RadToDegree","DirectionBetween","tileA","tileB","round","undefined","direction","mode","y","x","directions","angle","Math","dx","dy","atan2","steps"],"mappings":"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","sourcesContent":["import GetAngle from '../../math/angle/Between.js';\r\nimport RadToDegree from '../../math/RadToDeg.js';\r\n\r\nvar DirectionBetween = function (tileA, tileB, round) {\r\n    if (round === undefined) {\r\n        round = true;\r\n    }\r\n\r\n    var direction;\r\n    switch (this.mode) {\r\n        case 0: // orthogonal\r\n        case 1: // isometric\r\n            if (tileA.y === tileB.y) {\r\n                direction = (tileB.x >= tileA.x) ? 0 : 2;\r\n            } else if (tileA.x === tileB.x) {\r\n                direction = (tileB.y >= tileA.y) ? 1 : 3;\r\n            } else if (this.directions === 4) {\r\n                var angle = RadToDegree(GetAngle(tileA.x, tileA.y, tileB.x, tileB.y)); // -180~180\r\n                if (angle < 0) {\r\n                    angle += 360;\r\n                }\r\n                direction = angle / 90;\r\n                if (round) {\r\n                    direction = Math.round(direction);\r\n                }\r\n            } else { // this.directions === 8\r\n                var dx = tileB.x - tileA.x;\r\n                var dy = tileB.y - tileA.y;\r\n                if (dx === dy) {\r\n                    direction = (dx > 0) ? 4 : 6;\r\n                } else if (dx === -dy) {\r\n                    direction = (dx > 0) ? 7 : 5;\r\n                } else {\r\n                    var angle = RadToDegree(Math.atan2(dy, dx));\r\n                    if (angle < 0) {\r\n                        angle += 360;\r\n                    }\r\n                    var steps = angle / 45;\r\n                    if (round) {\r\n                        steps = Math.round(steps);\r\n                    }\r\n\r\n                    if ((steps >= 0) && (steps < 1)) {\r\n                        direction = steps;  // (steps - 0) + 0\r\n                    } else if ((steps >= 1) && (steps < 2)) {\r\n                        direction = (steps + 3);  // (steps - 1) + 4\r\n                    } else if ((steps >= 2) && (steps < 3)) {\r\n                        direction = (steps - 1);  // (steps - 2) + 1\r\n                    } else if ((steps >= 3) && (steps < 4)) {\r\n                        direction = (steps + 2);  // (steps - 3) + 5\r\n                    } else if ((steps >= 4) && (steps < 5)) {\r\n                        direction = (steps - 2);  // (steps - 4) + 2\r\n                    } else if ((steps >= 5) && (steps < 6)) {\r\n                        direction = (steps + 1);  // (steps - 5) + 6\r\n                    } else if ((steps >= 6) && (steps < 7)) {\r\n                        direction = (steps - 3);  // (steps - 6) + 3\r\n                    } else {  // if ((steps >= 7) && (steps < 8))\r\n                        direction = steps;  // (steps - 7) + 7\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        case 2: // staggered\r\n            // TODO\r\n            break;\r\n    }\r\n\r\n    if (direction === this.directions) {\r\n        direction = 0;\r\n    }\r\n    return direction;\r\n}\r\n\r\nexport default DirectionBetween;"]},"metadata":{},"sourceType":"module"}