{"ast":null,"code":"import { OrthogonalMap, IsometricMap } from './DistanceToDeltaTileXY.js';\n\nvar GetTileXAtDirection = function (tileX, tileY, direction, distance, out) {\n  if (out === undefined) {\n    out = {};\n  } else if (out === true) {\n    out = globTileXY;\n  }\n\n  var deltaTileX, deltaTileY;\n\n  switch (this.mode) {\n    case 0:\n      // orthogonal\n      deltaTileX = OrthogonalMap[direction][0];\n      deltaTileY = OrthogonalMap[direction][1];\n      break;\n\n    case 1:\n      // isometric\n      deltaTileX = IsometricMap[direction][0];\n      deltaTileY = IsometricMap[direction][1];\n      break;\n  }\n\n  if (distance === 1) {\n    // Neighbor\n    out.x = tileX + deltaTileX;\n    out.y = tileY + deltaTileY;\n  } else {\n    out.x = tileX + distance * deltaTileX;\n    out.y = tileY + distance * deltaTileY;\n  }\n\n  return out;\n};\n\nvar globTileXY = {};\nexport default GetTileXAtDirection;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/utils/grid/quad/GetTileXYAtDirection.js"],"names":["OrthogonalMap","IsometricMap","GetTileXAtDirection","tileX","tileY","direction","distance","out","undefined","globTileXY","deltaTileX","deltaTileY","mode","x","y"],"mappings":"AAAA,SACIA,aADJ,EAEIC,YAFJ,QAGO,4BAHP;;AAKA,IAAIC,mBAAmB,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,GAA7C,EAAkD;AACxE,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AACnBD,IAAAA,GAAG,GAAG,EAAN;AACH,GAFD,MAEO,IAAIA,GAAG,KAAK,IAAZ,EAAkB;AACrBA,IAAAA,GAAG,GAAGE,UAAN;AACH;;AAED,MAAIC,UAAJ,EAAgBC,UAAhB;;AACA,UAAQ,KAAKC,IAAb;AACI,SAAK,CAAL;AAAQ;AACJF,MAAAA,UAAU,GAAGV,aAAa,CAACK,SAAD,CAAb,CAAyB,CAAzB,CAAb;AACAM,MAAAA,UAAU,GAAGX,aAAa,CAACK,SAAD,CAAb,CAAyB,CAAzB,CAAb;AACA;;AACJ,SAAK,CAAL;AAAQ;AACJK,MAAAA,UAAU,GAAGT,YAAY,CAACI,SAAD,CAAZ,CAAwB,CAAxB,CAAb;AACAM,MAAAA,UAAU,GAAGV,YAAY,CAACI,SAAD,CAAZ,CAAwB,CAAxB,CAAb;AACA;AARR;;AAWA,MAAIC,QAAQ,KAAK,CAAjB,EAAoB;AAAE;AAClBC,IAAAA,GAAG,CAACM,CAAJ,GAAQV,KAAK,GAAGO,UAAhB;AACAH,IAAAA,GAAG,CAACO,CAAJ,GAAQV,KAAK,GAAGO,UAAhB;AACH,GAHD,MAGO;AACHJ,IAAAA,GAAG,CAACM,CAAJ,GAAQV,KAAK,GAAIG,QAAQ,GAAGI,UAA5B;AACAH,IAAAA,GAAG,CAACO,CAAJ,GAAQV,KAAK,GAAIE,QAAQ,GAAGK,UAA5B;AACH;;AACD,SAAOJ,GAAP;AACH,CA3BD;;AA6BA,IAAIE,UAAU,GAAG,EAAjB;AAEA,eAAeP,mBAAf","sourcesContent":["import {\r\n    OrthogonalMap,\r\n    IsometricMap\r\n} from './DistanceToDeltaTileXY.js';\r\n\r\nvar GetTileXAtDirection = function (tileX, tileY, direction, distance, out) {\r\n    if (out === undefined) {\r\n        out = {};\r\n    } else if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    var deltaTileX, deltaTileY;\r\n    switch (this.mode) {\r\n        case 0: // orthogonal\r\n            deltaTileX = OrthogonalMap[direction][0];\r\n            deltaTileY = OrthogonalMap[direction][1];\r\n            break;\r\n        case 1: // isometric\r\n            deltaTileX = IsometricMap[direction][0];\r\n            deltaTileY = IsometricMap[direction][1];\r\n            break;\r\n    }\r\n\r\n    if (distance === 1) { // Neighbor\r\n        out.x = tileX + deltaTileX;\r\n        out.y = tileY + deltaTileY;\r\n    } else {\r\n        out.x = tileX + (distance * deltaTileX);\r\n        out.y = tileY + (distance * deltaTileY);\r\n    }\r\n    return out;\r\n}\r\n\r\nvar globTileXY = {};\r\n\r\nexport default GetTileXAtDirection;"]},"metadata":{},"sourceType":"module"}