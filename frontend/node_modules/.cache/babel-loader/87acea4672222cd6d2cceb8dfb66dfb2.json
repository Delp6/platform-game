{"ast":null,"code":"import EventEmitterMethods from '../eventemitter/EventEmitterMethods.js';\nconst GetValue = Phaser.Utils.Objects.GetValue;\n\nclass TickTask {\n  constructor(parent, config) {\n    this.parent = parent;\n    this._isRunning = false;\n    this.tickingState = false; // Event emitter\n\n    this.setEventEmitter(GetValue(config, 'eventEmitter', undefined));\n    this.setTickingMode(GetValue(config, 'tickingMode', 1));\n  } // override\n\n\n  boot() {\n    if (this.tickingMode === 2 && !this.tickingState) {\n      this.startTicking();\n    }\n  } // override\n\n\n  shutdown() {\n    this.destroyEventEmitter();\n\n    if (this.tickingState) {\n      this.stopTicking();\n    }\n  }\n\n  setTickingMode(mode) {\n    if (typeof mode === 'string') {\n      mode = TICKINGMODE[mode];\n    }\n\n    this.tickingMode = mode;\n  } // override\n\n\n  startTicking() {\n    this.tickingState = true;\n  } // override\n\n\n  stopTicking() {\n    this.tickingState = false;\n  }\n\n  get isRunning() {\n    return this._isRunning;\n  }\n\n  set isRunning(value) {\n    if (this._isRunning === value) {\n      return;\n    }\n\n    this._isRunning = value;\n\n    if (this.tickingMode === 1 && value != this.tickingState) {\n      if (value) {\n        this.startTicking();\n      } else {\n        this.stopTicking();\n      }\n    }\n  }\n\n  start() {\n    this.isRunning = true;\n    return this;\n  }\n\n  pause() {\n    this.isRunning = false;\n    return this;\n  }\n\n  resume() {\n    this.isRunning = true;\n    return this;\n  }\n\n  stop() {\n    this.isRunning = false;\n    return this;\n  }\n\n  complete() {\n    this.isRunning = false;\n    this.emit('complete', this.parent, this);\n  }\n\n}\n\nObject.assign(TickTask.prototype, EventEmitterMethods);\nconst TICKINGMODE = {\n  'no': 0,\n  'lazy': 1,\n  'always': 2\n};\nexport default TickTask;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/utils/ticktask/TickTask.js"],"names":["EventEmitterMethods","GetValue","Phaser","Utils","Objects","TickTask","constructor","parent","config","_isRunning","tickingState","setEventEmitter","undefined","setTickingMode","boot","tickingMode","startTicking","shutdown","destroyEventEmitter","stopTicking","mode","TICKINGMODE","isRunning","value","start","pause","resume","stop","complete","emit","Object","assign","prototype"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,wCAAhC;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,KAAP,CAAaC,OAAb,CAAqBH,QAAtC;;AAEA,MAAMI,QAAN,CAAe;AACXC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AACxB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,UAAL,GAAkB,KAAlB;AACA,SAAKC,YAAL,GAAoB,KAApB,CAHwB,CAIxB;;AACA,SAAKC,eAAL,CAAqBV,QAAQ,CAACO,MAAD,EAAS,cAAT,EAAyBI,SAAzB,CAA7B;AACA,SAAKC,cAAL,CAAoBZ,QAAQ,CAACO,MAAD,EAAS,aAAT,EAAwB,CAAxB,CAA5B;AACH,GARU,CAUX;;;AACAM,EAAAA,IAAI,GAAG;AACH,QAAK,KAAKC,WAAL,KAAqB,CAAtB,IAA6B,CAAC,KAAKL,YAAvC,EAAsD;AAClD,WAAKM,YAAL;AACH;AACJ,GAfU,CAiBX;;;AACAC,EAAAA,QAAQ,GAAG;AACP,SAAKC,mBAAL;;AACA,QAAI,KAAKR,YAAT,EAAuB;AACnB,WAAKS,WAAL;AACH;AACJ;;AAEDN,EAAAA,cAAc,CAACO,IAAD,EAAO;AACjB,QAAI,OAAQA,IAAR,KAAkB,QAAtB,EAAgC;AAC5BA,MAAAA,IAAI,GAAGC,WAAW,CAACD,IAAD,CAAlB;AACH;;AACD,SAAKL,WAAL,GAAmBK,IAAnB;AACH,GA9BU,CAgCX;;;AACAJ,EAAAA,YAAY,GAAG;AACX,SAAKN,YAAL,GAAoB,IAApB;AACH,GAnCU,CAqCX;;;AACAS,EAAAA,WAAW,GAAG;AACV,SAAKT,YAAL,GAAoB,KAApB;AACH;;AAED,MAAIY,SAAJ,GAAgB;AACZ,WAAO,KAAKb,UAAZ;AACH;;AAED,MAAIa,SAAJ,CAAcC,KAAd,EAAqB;AACjB,QAAI,KAAKd,UAAL,KAAoBc,KAAxB,EAA+B;AAC3B;AACH;;AAED,SAAKd,UAAL,GAAkBc,KAAlB;;AACA,QAAK,KAAKR,WAAL,KAAqB,CAAtB,IAA6BQ,KAAK,IAAI,KAAKb,YAA/C,EAA8D;AAC1D,UAAIa,KAAJ,EAAW;AACP,aAAKP,YAAL;AACH,OAFD,MAEO;AACH,aAAKG,WAAL;AACH;AACJ;AACJ;;AAEDK,EAAAA,KAAK,GAAG;AACJ,SAAKF,SAAL,GAAiB,IAAjB;AACA,WAAO,IAAP;AACH;;AAEDG,EAAAA,KAAK,GAAG;AACJ,SAAKH,SAAL,GAAiB,KAAjB;AACA,WAAO,IAAP;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACL,SAAKJ,SAAL,GAAiB,IAAjB;AACA,WAAO,IAAP;AACH;;AAEDK,EAAAA,IAAI,GAAG;AACH,SAAKL,SAAL,GAAiB,KAAjB;AACA,WAAO,IAAP;AACH;;AAEDM,EAAAA,QAAQ,GAAG;AACP,SAAKN,SAAL,GAAiB,KAAjB;AACA,SAAKO,IAAL,CAAU,UAAV,EAAsB,KAAKtB,MAA3B,EAAmC,IAAnC;AACH;;AApFU;;AAuFfuB,MAAM,CAACC,MAAP,CACI1B,QAAQ,CAAC2B,SADb,EAEIhC,mBAFJ;AAKA,MAAMqB,WAAW,GAAG;AAChB,QAAM,CADU;AAEhB,UAAQ,CAFQ;AAGhB,YAAU;AAHM,CAApB;AAMA,eAAehB,QAAf","sourcesContent":["import EventEmitterMethods from '../eventemitter/EventEmitterMethods.js';\r\n\r\nconst GetValue = Phaser.Utils.Objects.GetValue;\r\n\r\nclass TickTask {\r\n    constructor(parent, config) {\r\n        this.parent = parent;\r\n        this._isRunning = false;\r\n        this.tickingState = false;\r\n        // Event emitter\r\n        this.setEventEmitter(GetValue(config, 'eventEmitter', undefined));\r\n        this.setTickingMode(GetValue(config, 'tickingMode', 1));\r\n    }\r\n\r\n    // override\r\n    boot() {\r\n        if ((this.tickingMode === 2) && (!this.tickingState)) {\r\n            this.startTicking();\r\n        }\r\n    }\r\n\r\n    // override\r\n    shutdown() {\r\n        this.destroyEventEmitter();\r\n        if (this.tickingState) {\r\n            this.stopTicking();\r\n        }        \r\n    }\r\n\r\n    setTickingMode(mode) {\r\n        if (typeof (mode) === 'string') {\r\n            mode = TICKINGMODE[mode];\r\n        }\r\n        this.tickingMode = mode;\r\n    }\r\n\r\n    // override\r\n    startTicking() {\r\n        this.tickingState = true;\r\n    }\r\n\r\n    // override\r\n    stopTicking() {\r\n        this.tickingState = false;\r\n    }\r\n\r\n    get isRunning() {\r\n        return this._isRunning;\r\n    }\r\n\r\n    set isRunning(value) {\r\n        if (this._isRunning === value) {\r\n            return;\r\n        }\r\n\r\n        this._isRunning = value;\r\n        if ((this.tickingMode === 1) && (value != this.tickingState)) {\r\n            if (value) {\r\n                this.startTicking();\r\n            } else {\r\n                this.stopTicking();\r\n            }\r\n        }\r\n    }\r\n\r\n    start() {\r\n        this.isRunning = true;\r\n        return this;\r\n    }\r\n\r\n    pause() {\r\n        this.isRunning = false;\r\n        return this;\r\n    }\r\n\r\n    resume() {\r\n        this.isRunning = true;\r\n        return this;\r\n    }\r\n\r\n    stop() {\r\n        this.isRunning = false;\r\n        return this;\r\n    }\r\n\r\n    complete() {\r\n        this.isRunning = false;\r\n        this.emit('complete', this.parent, this);\r\n    }\r\n}\r\n\r\nObject.assign(\r\n    TickTask.prototype,\r\n    EventEmitterMethods\r\n);\r\n\r\nconst TICKINGMODE = {\r\n    'no': 0,\r\n    'lazy': 1,\r\n    'always': 2\r\n}\r\n\r\nexport default TickTask;"]},"metadata":{},"sourceType":"module"}