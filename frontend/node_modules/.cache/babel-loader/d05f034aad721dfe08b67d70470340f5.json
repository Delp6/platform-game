{"ast":null,"code":"import Shuffle from '../../../utils/array/Shuffle.js';\nimport AngleBetween from '../../../utils/math/angle/Between.js';\n\nclass Node {\n  constructor() {\n    this.preNodes = [];\n    this.manager = undefined;\n  }\n\n  reset(manager) {\n    this.manager = manager; // overwrite\n\n    this.sn = undefined; // for sorting by created order        \n\n    this.key = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.isTileXYZ = true; // overwrite\n\n    this._px = undefined;\n    this._py = undefined;\n    this.cost = undefined; // cost cache\n\n    this.f = 0;\n    this.g = 0; // path cost\n\n    this.h = 0;\n    this.closerH = 0;\n    this.visited = false;\n    this.closed = false;\n    this.preNodes.length = 0;\n  }\n\n  destroy() {\n    this.preNodes.length = 0;\n    this.manager = undefined;\n  }\n\n  heuristic(endNode, pathMode, baseNode) {\n    if (pathMode === null) {\n      return 0;\n    }\n\n    var h,\n        dist = this.board.getDistance(endNode, this, true) * this.pathFinder.weight;\n\n    if (pathMode === 1 && baseNode !== undefined) {\n      var deltaAngle = endNode.angleTo(baseNode) - this.angleTo(baseNode);\n      h = dist + Math.abs(deltaAngle);\n    } else if (pathMode === 2) {\n      h = dist + Math.random();\n    } else {\n      h = dist;\n    }\n\n    return h;\n  }\n\n  getNeighborNodes() {\n    var neighborsTileXY = this.board.getNeighborTileXY(this);\n\n    if (this.pathFinder.shuffleNeighbors) {\n      Shuffle(neighborsTileXY);\n    }\n\n    var node,\n        neighborNodes = [];\n\n    for (var i = 0, cnt = neighborsTileXY.length; i < cnt; i++) {\n      node = this.manager.getNode(neighborsTileXY[i], true);\n      neighborNodes.push(node);\n    }\n\n    return neighborNodes;\n  }\n\n  getCost(preNode) {\n    if (this.pathFinder.cacheCost) {\n      if (this.cost === undefined) {\n        this.cost = this.pathFinder.getCost(this, preNode);\n      }\n    } else {\n      this.cost = this.pathFinder.getCost(this, preNode);\n    }\n\n    return this.cost;\n  }\n\n  angleTo(endNode) {\n    return AngleBetween(this.worldX, this.wroldY, endNode.worldX, endNode.wroldY);\n  }\n\n  get pathFinder() {\n    return this.manager.pathFinder;\n  }\n\n  get board() {\n    return this.manager.pathFinder.board;\n  }\n\n  get worldX() {\n    if (this._px === undefined) {\n      this._px = this.board.tileXYToWroldX(this.x, this.y);\n    }\n\n    return this._px;\n  }\n\n  get wroldY() {\n    if (this._py === undefined) {\n      this._py = this.board.tileXYToWroldY(this.x, this.y);\n    }\n\n    return this._py;\n  }\n\n  get pathCost() {\n    return this.g;\n  }\n\n}\n\nexport default Node;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/pathfinder/astartsearch/Node.js"],"names":["Shuffle","AngleBetween","Node","constructor","preNodes","manager","undefined","reset","sn","key","x","y","isTileXYZ","_px","_py","cost","f","g","h","closerH","visited","closed","length","destroy","heuristic","endNode","pathMode","baseNode","dist","board","getDistance","pathFinder","weight","deltaAngle","angleTo","Math","abs","random","getNeighborNodes","neighborsTileXY","getNeighborTileXY","shuffleNeighbors","node","neighborNodes","i","cnt","getNode","push","getCost","preNode","cacheCost","worldX","wroldY","tileXYToWroldX","tileXYToWroldY","pathCost"],"mappings":"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","sourcesContent":["import Shuffle from '../../../utils/array/Shuffle.js';\r\nimport AngleBetween from '../../../utils/math/angle/Between.js';\r\n\r\nclass Node {\r\n    constructor() {\r\n        this.preNodes = [];\r\n        this.manager = undefined;\r\n    }\r\n\r\n    reset(manager) {\r\n        this.manager = manager;\r\n        // overwrite\r\n        this.sn = undefined; // for sorting by created order        \r\n        this.key = undefined;\r\n        this.x = undefined;\r\n        this.y = undefined;\r\n        this.isTileXYZ = true;\r\n        // overwrite\r\n\r\n        this._px = undefined;\r\n        this._py = undefined;\r\n        this.cost = undefined; // cost cache\r\n        this.f = 0;\r\n        this.g = 0; // path cost\r\n        this.h = 0;\r\n        this.closerH = 0;\r\n        this.visited = false;\r\n        this.closed = false;\r\n        this.preNodes.length = 0;\r\n    }\r\n\r\n    destroy() {\r\n        this.preNodes.length = 0;\r\n        this.manager = undefined;\r\n    }\r\n\r\n    heuristic(endNode, pathMode, baseNode) {\r\n        if (pathMode === null) {\r\n            return 0;\r\n        }\r\n\r\n        var h, dist = this.board.getDistance(endNode, this, true) * this.pathFinder.weight;\r\n\r\n        if ((pathMode === 1) && (baseNode !== undefined)) {\r\n            var deltaAngle = endNode.angleTo(baseNode) - this.angleTo(baseNode);\r\n            h = dist + Math.abs(deltaAngle);\r\n        } else if (pathMode === 2) {\r\n            h = dist + Math.random();\r\n        } else {\r\n            h = dist;\r\n        }\r\n\r\n        return h;\r\n    }\r\n\r\n    getNeighborNodes() {\r\n        var neighborsTileXY = this.board.getNeighborTileXY(this);\r\n        if (this.pathFinder.shuffleNeighbors) {\r\n            Shuffle(neighborsTileXY);\r\n        }\r\n\r\n        var node, neighborNodes = [];\r\n        for (var i = 0, cnt = neighborsTileXY.length; i < cnt; i++) {\r\n            node = this.manager.getNode(neighborsTileXY[i], true);\r\n            neighborNodes.push(node)\r\n        }\r\n        return neighborNodes;\r\n    }\r\n\r\n    getCost(preNode) {\r\n        if (this.pathFinder.cacheCost) {\r\n            if (this.cost === undefined) {\r\n                this.cost = this.pathFinder.getCost(this, preNode);\r\n            }\r\n        } else {\r\n            this.cost = this.pathFinder.getCost(this, preNode);\r\n        }\r\n        return this.cost;\r\n    }\r\n\r\n    angleTo(endNode) {\r\n        return AngleBetween(this.worldX, this.wroldY, endNode.worldX, endNode.wroldY);\r\n    }\r\n\r\n    get pathFinder() {\r\n        return this.manager.pathFinder;\r\n    }\r\n\r\n    get board() {\r\n        return this.manager.pathFinder.board;\r\n    }\r\n\r\n    get worldX() {\r\n        if (this._px === undefined) {\r\n            this._px = this.board.tileXYToWroldX(this.x, this.y);\r\n        }\r\n        return this._px;\r\n    }\r\n\r\n    get wroldY() {\r\n        if (this._py === undefined) {\r\n            this._py = this.board.tileXYToWroldY(this.x, this.y);\r\n        }\r\n        return this._py;\r\n    }\r\n\r\n    get pathCost() {\r\n        return this.g;\r\n    }\r\n}\r\n\r\nexport default Node;"]},"metadata":{},"sourceType":"module"}