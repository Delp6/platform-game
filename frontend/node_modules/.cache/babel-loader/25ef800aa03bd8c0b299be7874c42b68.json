{"ast":null,"code":"import GetValue from '../../../utils/object/GetValue.js';\n\nvar MoveToTile = function (tileX, tileY, direction) {\n  var miniBoard = this.miniBoard;\n  var mainBoard = miniBoard.mainBoard; // Not on a mainBoard\n\n  if (mainBoard == null) {\n    this.lastMoveResult = false;\n    return this;\n  }\n\n  if (tileX != null && typeof tileX !== 'number') {\n    var config = tileX;\n    tileX = GetValue(config, 'x', undefined);\n    tileY = GetValue(config, 'y', undefined);\n    direction = GetValue(config, 'direction', undefined);\n  }\n\n  myTileXY.x = miniBoard.tileX;\n  myTileXY.y = miniBoard.tileY;\n\n  if (direction !== undefined && tileX == null || tileY == null) {\n    // Get neighbor tile position if direction is not undefined\n    var out = mainBoard.getNeighborTileXY(myTileXY, direction, true);\n\n    if (out !== null) {\n      tileX = out.x;\n      tileY = out.y;\n    } else {\n      tileX = null;\n      tileY = null;\n    }\n  } // invalid tile position\n\n\n  if (tileX == null || tileY == null) {\n    this.lastMoveResult = false;\n    return this;\n  }\n\n  if (direction === undefined) {\n    targetTileXY.x = tileX;\n    targetTileXY.y = tileY;\n    direction = board.getNeighborTileDirection(myTileXY, targetTileXY);\n  }\n\n  if (!this.canMoveTo(tileX, tileY, direction)) {\n    this.lastMoveResult = false;\n    return this;\n  }\n\n  this.destinationTileX = tileX;\n  this.destinationTileY = tileY;\n  this.destinationDirection = direction; // Not support wrap mode\n\n  var out = mainBoard.tileXYToWorldXY(tileX, tileY, true);\n  this.moveToTask.moveTo(out.x, out.y);\n  miniBoard.putOnMainBoard(mainBoard, tileX, tileY, false);\n  this.isRunning = true;\n  this.lastMoveResult = true;\n  return this;\n};\n\nvar myTileXY = {};\nvar targetTileXY = {};\nexport default MoveToTile;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/board/miniboard/moveto/MoveToTile.js"],"names":["GetValue","MoveToTile","tileX","tileY","direction","miniBoard","mainBoard","lastMoveResult","config","undefined","myTileXY","x","y","out","getNeighborTileXY","targetTileXY","board","getNeighborTileDirection","canMoveTo","destinationTileX","destinationTileY","destinationDirection","tileXYToWorldXY","moveToTask","moveTo","putOnMainBoard","isRunning"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,mCAArB;;AAEA,IAAIC,UAAU,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,SAAxB,EAAmC;AAChD,MAAIC,SAAS,GAAG,KAAKA,SAArB;AACA,MAAIC,SAAS,GAAGD,SAAS,CAACC,SAA1B,CAFgD,CAGhD;;AACA,MAAIA,SAAS,IAAI,IAAjB,EAAuB;AACnB,SAAKC,cAAL,GAAsB,KAAtB;AACA,WAAO,IAAP;AACH;;AAED,MAAKL,KAAK,IAAI,IAAV,IAAoB,OAAQA,KAAR,KAAmB,QAA3C,EAAsD;AAClD,QAAIM,MAAM,GAAGN,KAAb;AACAA,IAAAA,KAAK,GAAGF,QAAQ,CAACQ,MAAD,EAAS,GAAT,EAAcC,SAAd,CAAhB;AACAN,IAAAA,KAAK,GAAGH,QAAQ,CAACQ,MAAD,EAAS,GAAT,EAAcC,SAAd,CAAhB;AACAL,IAAAA,SAAS,GAAGJ,QAAQ,CAACQ,MAAD,EAAS,WAAT,EAAsBC,SAAtB,CAApB;AACH;;AACDC,EAAAA,QAAQ,CAACC,CAAT,GAAaN,SAAS,CAACH,KAAvB;AACAQ,EAAAA,QAAQ,CAACE,CAAT,GAAaP,SAAS,CAACF,KAAvB;;AACA,MAAKC,SAAS,KAAKK,SAAf,IACCP,KAAK,IAAI,IADV,IACoBC,KAAK,IAAI,IADjC,EACwC;AACpC;AACA,QAAIU,GAAG,GAAGP,SAAS,CAACQ,iBAAV,CAA4BJ,QAA5B,EAAsCN,SAAtC,EAAiD,IAAjD,CAAV;;AACA,QAAIS,GAAG,KAAK,IAAZ,EAAkB;AACdX,MAAAA,KAAK,GAAGW,GAAG,CAACF,CAAZ;AACAR,MAAAA,KAAK,GAAGU,GAAG,CAACD,CAAZ;AACH,KAHD,MAGO;AACHV,MAAAA,KAAK,GAAG,IAAR;AACAC,MAAAA,KAAK,GAAG,IAAR;AACH;AACJ,GA5B+C,CA8BhD;;;AACA,MAAKD,KAAK,IAAI,IAAV,IAAoBC,KAAK,IAAI,IAAjC,EAAwC;AACpC,SAAKI,cAAL,GAAsB,KAAtB;AACA,WAAO,IAAP;AACH;;AACD,MAAIH,SAAS,KAAKK,SAAlB,EAA6B;AACzBM,IAAAA,YAAY,CAACJ,CAAb,GAAiBT,KAAjB;AACAa,IAAAA,YAAY,CAACH,CAAb,GAAiBT,KAAjB;AACAC,IAAAA,SAAS,GAAGY,KAAK,CAACC,wBAAN,CAA+BP,QAA/B,EAAyCK,YAAzC,CAAZ;AACH;;AACD,MAAI,CAAC,KAAKG,SAAL,CAAehB,KAAf,EAAsBC,KAAtB,EAA6BC,SAA7B,CAAL,EAA8C;AAC1C,SAAKG,cAAL,GAAsB,KAAtB;AACA,WAAO,IAAP;AACH;;AACD,OAAKY,gBAAL,GAAwBjB,KAAxB;AACA,OAAKkB,gBAAL,GAAwBjB,KAAxB;AACA,OAAKkB,oBAAL,GAA4BjB,SAA5B,CA9CgD,CAgDhD;;AACA,MAAIS,GAAG,GAAGP,SAAS,CAACgB,eAAV,CAA0BpB,KAA1B,EAAiCC,KAAjC,EAAwC,IAAxC,CAAV;AACA,OAAKoB,UAAL,CAAgBC,MAAhB,CAAuBX,GAAG,CAACF,CAA3B,EAA8BE,GAAG,CAACD,CAAlC;AACAP,EAAAA,SAAS,CAACoB,cAAV,CAAyBnB,SAAzB,EAAoCJ,KAApC,EAA2CC,KAA3C,EAAkD,KAAlD;AAEA,OAAKuB,SAAL,GAAiB,IAAjB;AACA,OAAKnB,cAAL,GAAsB,IAAtB;AACA,SAAO,IAAP;AACH,CAxDD;;AA0DA,IAAIG,QAAQ,GAAG,EAAf;AACA,IAAIK,YAAY,GAAG,EAAnB;AAEA,eAAed,UAAf","sourcesContent":["import GetValue from '../../../utils/object/GetValue.js';\r\n\r\nvar MoveToTile = function (tileX, tileY, direction) {\r\n    var miniBoard = this.miniBoard;\r\n    var mainBoard = miniBoard.mainBoard;\r\n    // Not on a mainBoard\r\n    if (mainBoard == null) {\r\n        this.lastMoveResult = false;\r\n        return this;\r\n    }\r\n\r\n    if ((tileX != null) && (typeof (tileX) !== 'number')) {\r\n        var config = tileX;\r\n        tileX = GetValue(config, 'x', undefined);\r\n        tileY = GetValue(config, 'y', undefined);\r\n        direction = GetValue(config, 'direction', undefined);\r\n    }\r\n    myTileXY.x = miniBoard.tileX;\r\n    myTileXY.y = miniBoard.tileY;\r\n    if ((direction !== undefined) &&\r\n        (tileX == null) || (tileY == null)) {\r\n        // Get neighbor tile position if direction is not undefined\r\n        var out = mainBoard.getNeighborTileXY(myTileXY, direction, true);\r\n        if (out !== null) {\r\n            tileX = out.x;\r\n            tileY = out.y;\r\n        } else {\r\n            tileX = null;\r\n            tileY = null;\r\n        }\r\n    }\r\n\r\n    // invalid tile position\r\n    if ((tileX == null) || (tileY == null)) {\r\n        this.lastMoveResult = false;\r\n        return this;\r\n    }\r\n    if (direction === undefined) {\r\n        targetTileXY.x = tileX;\r\n        targetTileXY.y = tileY;\r\n        direction = board.getNeighborTileDirection(myTileXY, targetTileXY);\r\n    }\r\n    if (!this.canMoveTo(tileX, tileY, direction)) {\r\n        this.lastMoveResult = false;\r\n        return this;\r\n    }\r\n    this.destinationTileX = tileX;\r\n    this.destinationTileY = tileY;\r\n    this.destinationDirection = direction;\r\n\r\n    // Not support wrap mode\r\n    var out = mainBoard.tileXYToWorldXY(tileX, tileY, true);\r\n    this.moveToTask.moveTo(out.x, out.y);\r\n    miniBoard.putOnMainBoard(mainBoard, tileX, tileY, false);\r\n\r\n    this.isRunning = true;\r\n    this.lastMoveResult = true;\r\n    return this;\r\n}\r\n\r\nvar myTileXY = {};\r\nvar targetTileXY = {};\r\n\r\nexport default MoveToTile;"]},"metadata":{},"sourceType":"module"}