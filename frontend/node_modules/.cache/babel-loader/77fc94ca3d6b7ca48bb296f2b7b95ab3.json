{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kmode\\\\Documents\\\\ProjektyFullStack\\\\war-of-champions\\\\frontend\\\\src\\\\phaser\\\\PhaserMain.js\";\nimport { IonPhaser } from \"@ion-phaser/react\";\nimport React from \"react\";\nimport Phaser from \"phaser\";\n\nconst PhaserMain = () => {\n  let player;\n  let cursors;\n  const gameState = {\n    initialize: true,\n    game: {\n      width: 960,\n      height: 600,\n      type: Phaser.AUTO,\n      scene: {\n        preload: preload,\n        create: create,\n        update: update\n      },\n      physics: {\n        default: 'arcade',\n        arcade: {\n          gravity: {\n            y: 0\n          },\n          debug: false\n        }\n      }\n    }\n  };\n\n  function preload() {\n    this.load.image('environment', 'assets/environment_forest.png');\n    this.load.spritesheet('knight', 'assets/knight.png', {\n      frameWidth: 75,\n      frameHeight: 54\n    });\n    this.load.tilemapCSV('map', 'assets/tilemaps/csv/grid.csv');\n  }\n\n  function create() {\n    let map = this.make.tilemap({\n      key: 'map',\n      tileWidth: 32,\n      tileHeight: 32\n    });\n    let tileset = map.addTilesetImage('environment', null, 32, 32, 1, 2);\n    let layer = map.createStaticLayer(0, tileset, 0, 0);\n    /*\r\n            let grid = this.add.grid(480, 370, 900, 400, 50, 50,  \"black\", \"0.4\");\r\n    */\n\n    player = this.add.sprite(100, 450, 'knight');\n    cursors = this.input.keyboard.createCursorKeys();\n    this.input.keyboard.on('keydown_A', function (event) {\n      var tile = layer.getTileAtWorldXY(player.x - 32, player.y, true);\n\n      if (tile.index === 2) {//  Blocked, we can't move\n      } else {\n        player.x -= 32;\n        player.angle = 180;\n      }\n    }); //  Right\n\n    this.input.keyboard.on('keydown_D', function (event) {\n      var tile = layer.getTileAtWorldXY(player.x + 32, player.y, true);\n\n      if (tile.index === 2) {//  Blocked, we can't move\n      } else {\n        player.x += 32;\n        player.angle = 0;\n      }\n    }); //  Up\n\n    this.input.keyboard.on('keydown_W', function (event) {\n      var tile = layer.getTileAtWorldXY(player.x, player.y - 32, true);\n\n      if (tile.index === 2) {//  Blocked, we can't move\n      } else {\n        player.y -= 32;\n        player.angle = -90;\n      }\n    }); //  Down\n\n    this.input.keyboard.on('keydown_S', function (event) {\n      var tile = layer.getTileAtWorldXY(player.x, player.y + 32, true);\n\n      if (tile.index === 2) {//  Blocked, we can't move\n      } else {\n        player.y += 32;\n        player.angle = 90;\n      }\n    });\n  }\n\n  function update() {}\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IonPhaser, {\n    game: gameState.game,\n    initialize: gameState.initialize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default PhaserMain;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/src/phaser/PhaserMain.js"],"names":["IonPhaser","React","Phaser","PhaserMain","player","cursors","gameState","initialize","game","width","height","type","AUTO","scene","preload","create","update","physics","default","arcade","gravity","y","debug","load","image","spritesheet","frameWidth","frameHeight","tilemapCSV","map","make","tilemap","key","tileWidth","tileHeight","tileset","addTilesetImage","layer","createStaticLayer","add","sprite","input","keyboard","createCursorKeys","on","event","tile","getTileAtWorldXY","x","index","angle"],"mappings":"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","sourcesContent":["import {IonPhaser} from \"@ion-phaser/react\";\r\nimport React from \"react\";\r\nimport Phaser from \"phaser\";\r\n\r\n\r\nconst PhaserMain = () => {\r\n\r\n    let player;\r\n    let cursors;\r\n\r\n    const gameState = {\r\n        initialize: true,\r\n        game: {\r\n            width: 960,\r\n            height: 600,\r\n            type: Phaser.AUTO,\r\n            scene: {\r\n                preload: preload,\r\n                create: create,\r\n                update: update,\r\n            },\r\n            physics: {\r\n                default: 'arcade',\r\n                arcade: {\r\n                    gravity: { y: 0 },\r\n                    debug: false\r\n                }\r\n            },\r\n        }\r\n    }\r\n\r\n    function preload() {\r\n        this.load.image('environment', 'assets/environment_forest.png');\r\n        this.load.spritesheet('knight',\r\n            'assets/knight.png',\r\n            { frameWidth: 75, frameHeight: 54 }\r\n        );\r\n        this.load.tilemapCSV('map', 'assets/tilemaps/csv/grid.csv');\r\n\r\n    }\r\n    function create() {\r\n        let map = this.make.tilemap({ key: 'map', tileWidth: 32, tileHeight: 32 });\r\n        let tileset = map.addTilesetImage('environment', null, 32, 32, 1, 2);\r\n        let layer = map.createStaticLayer(0, tileset, 0, 0);\r\n\r\n/*\r\n        let grid = this.add.grid(480, 370, 900, 400, 50, 50,  \"black\", \"0.4\");\r\n*/\r\n        player = this.add.sprite(100, 450, 'knight');\r\n        cursors = this.input.keyboard.createCursorKeys();\r\n\r\n\r\n        this.input.keyboard.on('keydown_A', function (event) {\r\n\r\n            var tile = layer.getTileAtWorldXY(player.x - 32, player.y, true);\r\n\r\n            if (tile.index === 2)\r\n            {\r\n                //  Blocked, we can't move\r\n            }\r\n            else\r\n            {\r\n                player.x -= 32;\r\n                player.angle = 180;\r\n            }\r\n\r\n        });\r\n\r\n        //  Right\r\n        this.input.keyboard.on('keydown_D', function (event) {\r\n\r\n            var tile = layer.getTileAtWorldXY(player.x + 32, player.y, true);\r\n\r\n            if (tile.index === 2)\r\n            {\r\n                //  Blocked, we can't move\r\n            }\r\n            else\r\n            {\r\n                player.x += 32;\r\n                player.angle = 0;\r\n            }\r\n\r\n        });\r\n\r\n        //  Up\r\n        this.input.keyboard.on('keydown_W', function (event) {\r\n\r\n            var tile = layer.getTileAtWorldXY(player.x, player.y - 32, true);\r\n\r\n            if (tile.index === 2)\r\n            {\r\n                //  Blocked, we can't move\r\n            }\r\n            else\r\n            {\r\n                player.y -= 32;\r\n                player.angle = -90;\r\n            }\r\n\r\n        });\r\n\r\n        //  Down\r\n        this.input.keyboard.on('keydown_S', function (event) {\r\n\r\n            var tile = layer.getTileAtWorldXY(player.x, player.y + 32, true);\r\n\r\n            if (tile.index === 2)\r\n            {\r\n                //  Blocked, we can't move\r\n            }\r\n            else\r\n            {\r\n                player.y += 32;\r\n                player.angle = 90;\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n    function update() {\r\n    }\r\n    return (\r\n        <>\r\n            <IonPhaser game={gameState.game} initialize={gameState.initialize}/>\r\n        </>\r\n    );\r\n}\r\nexport default PhaserMain;"]},"metadata":{},"sourceType":"module"}