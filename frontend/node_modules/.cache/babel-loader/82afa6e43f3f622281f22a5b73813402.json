{"ast":null,"code":"// https://www.redblobgames.com/grids/hexagons/\nimport GetCellWidth from '../../../geom/hexagon/Width.js';\nimport GetCellHeight from '../../../geom/hexagon/Height.js';\nimport CONST from './const.js';\nimport GetWorldXY from './GetWorldXY.js';\nimport GetWorldX from './GetWorldX.js';\nimport GetWorldY from './GetWorldY.js';\nimport GetTileXY from './GetTileXY.js';\nimport GetTileX from './GetTileX.js';\nimport GetTileY from './GetTileY.js';\nimport GetValue from '../../object/GetValue.js';\nconst ODD_R = CONST.ODD_R;\nconst EVEN_R = CONST.EVEN_R;\nconst ODD_Q = CONST.ODD_Q;\nconst EVEN_Q = CONST.EVEN_Q;\n\nclass Hexagon {\n  constructor(config) {\n    this.resetFromJSON(config);\n  }\n\n  resetFromJSON(o) {\n    this.setType(GetValue(o, 'staggeraxis', 1), GetValue(o, 'staggerindex', 1));\n    this.setDirectionMode();\n    this.setOriginPosition(GetValue(o, 'x', 0), GetValue(o, 'y', 0));\n    this.size = GetValue(o, 'size', undefined);\n\n    if (this.size !== undefined) {\n      var hexagon = {\n        size: this.size,\n        type: this.staggeraxis\n      };\n      var cellWidth = GetCellWidth(hexagon);\n      var cellHeight = GetCellHeight(hexagon);\n      this.setCellSize(cellWidth, cellHeight);\n    } else {\n      this.setCellSize(GetValue(o, 'cellWidth', 0), GetValue(o, 'cellHeight', 0));\n    }\n  }\n\n  setType(staggeraxis, staggerindex) {\n    if (typeof staggeraxis === 'string') {\n      staggeraxis = STAGGERAXIS[staggeraxis];\n    }\n\n    if (typeof staggerindex === 'string') {\n      staggerindex = STAGGERINDEX[staggerindex];\n    }\n\n    this.staggeraxis = staggeraxis; // 0|y(flat), or 1|x(pointy)\n\n    this.staggerindex = staggerindex; // even, or odd\n\n    if (staggeraxis === 0) {\n      // flat\n      this.mode = staggerindex === 0 ? EVEN_Q : ODD_Q;\n    } else {\n      // pointy\n      this.mode = staggerindex === 0 ? EVEN_R : ODD_R;\n    }\n\n    return this;\n  }\n\n  setDirectionMode() {\n    this.directions = 6;\n    return this;\n  }\n\n  setOriginPosition(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  set width(value) {\n    this._width = value;\n    this._halfWidth = value / 2;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  set height(value) {\n    this._height = value;\n    this._halfHeight = value / 2;\n  }\n\n  setCellSize(width, height) {\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  get cellWidth() {\n    return this.width;\n  }\n\n  set cellWidth(value) {\n    this.width = value;\n  }\n\n  get cellHeight() {\n    return this.height;\n  }\n\n  set cellHieght(value) {\n    this.height = value;\n  }\n\n}\n\nvar methods = {\n  getWorldXY: GetWorldXY,\n  getWorldX: GetWorldX,\n  getWorldY: GetWorldY,\n  getTileXY: GetTileXY,\n  getTileX: GetTileX,\n  getTileY: GetTileY\n};\nObject.assign(Hexagon.prototype, methods);\nconst STAGGERAXIS = {\n  'y': 0,\n  'x': 1\n};\nconst STAGGERINDEX = {\n  'even': 0,\n  'odd': 1\n};\nexport default Hexagon;","map":{"version":3,"sources":["C:/Users/kmode/Documents/ProjektyFullStack/war-of-champions/frontend/node_modules/phaser3-rex-plugins/plugins/utils/grid/hexagon/Hexagon.js"],"names":["GetCellWidth","GetCellHeight","CONST","GetWorldXY","GetWorldX","GetWorldY","GetTileXY","GetTileX","GetTileY","GetValue","ODD_R","EVEN_R","ODD_Q","EVEN_Q","Hexagon","constructor","config","resetFromJSON","o","setType","setDirectionMode","setOriginPosition","size","undefined","hexagon","type","staggeraxis","cellWidth","cellHeight","setCellSize","staggerindex","STAGGERAXIS","STAGGERINDEX","mode","directions","x","y","width","_width","value","_halfWidth","height","_height","_halfHeight","cellHieght","methods","getWorldXY","getWorldX","getWorldY","getTileXY","getTileX","getTileY","Object","assign","prototype"],"mappings":"AAAA;AAEA,OAAOA,YAAP,MAAyB,gCAAzB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AAEA,MAAMC,KAAK,GAAGR,KAAK,CAACQ,KAApB;AACA,MAAMC,MAAM,GAAGT,KAAK,CAACS,MAArB;AACA,MAAMC,KAAK,GAAGV,KAAK,CAACU,KAApB;AACA,MAAMC,MAAM,GAAGX,KAAK,CAACW,MAArB;;AAEA,MAAMC,OAAN,CAAc;AACVC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKC,aAAL,CAAmBD,MAAnB;AACH;;AAEDC,EAAAA,aAAa,CAACC,CAAD,EAAI;AACb,SAAKC,OAAL,CAAaV,QAAQ,CAACS,CAAD,EAAI,aAAJ,EAAmB,CAAnB,CAArB,EAA4CT,QAAQ,CAACS,CAAD,EAAI,cAAJ,EAAoB,CAApB,CAApD;AACA,SAAKE,gBAAL;AACA,SAAKC,iBAAL,CAAuBZ,QAAQ,CAACS,CAAD,EAAI,GAAJ,EAAS,CAAT,CAA/B,EAA4CT,QAAQ,CAACS,CAAD,EAAI,GAAJ,EAAS,CAAT,CAApD;AACA,SAAKI,IAAL,GAAYb,QAAQ,CAACS,CAAD,EAAI,MAAJ,EAAYK,SAAZ,CAApB;;AACA,QAAI,KAAKD,IAAL,KAAcC,SAAlB,EAA6B;AACzB,UAAIC,OAAO,GAAG;AACVF,QAAAA,IAAI,EAAE,KAAKA,IADD;AAEVG,QAAAA,IAAI,EAAE,KAAKC;AAFD,OAAd;AAIA,UAAIC,SAAS,GAAG3B,YAAY,CAACwB,OAAD,CAA5B;AACA,UAAII,UAAU,GAAG3B,aAAa,CAACuB,OAAD,CAA9B;AACA,WAAKK,WAAL,CAAiBF,SAAjB,EAA4BC,UAA5B;AACH,KARD,MAQO;AACH,WAAKC,WAAL,CAAiBpB,QAAQ,CAACS,CAAD,EAAI,WAAJ,EAAiB,CAAjB,CAAzB,EAA8CT,QAAQ,CAACS,CAAD,EAAI,YAAJ,EAAkB,CAAlB,CAAtD;AACH;AACJ;;AAEDC,EAAAA,OAAO,CAACO,WAAD,EAAcI,YAAd,EAA4B;AAC/B,QAAI,OAAQJ,WAAR,KAAyB,QAA7B,EAAuC;AACnCA,MAAAA,WAAW,GAAGK,WAAW,CAACL,WAAD,CAAzB;AACH;;AACD,QAAI,OAAQI,YAAR,KAA0B,QAA9B,EAAwC;AACpCA,MAAAA,YAAY,GAAGE,YAAY,CAACF,YAAD,CAA3B;AACH;;AACD,SAAKJ,WAAL,GAAmBA,WAAnB,CAP+B,CAOC;;AAChC,SAAKI,YAAL,GAAoBA,YAApB,CAR+B,CAQG;;AAElC,QAAIJ,WAAW,KAAK,CAApB,EAAuB;AAAE;AACrB,WAAKO,IAAL,GAAaH,YAAY,KAAK,CAAlB,GAAuBjB,MAAvB,GAAgCD,KAA5C;AACH,KAFD,MAEO;AAAE;AACL,WAAKqB,IAAL,GAAaH,YAAY,KAAK,CAAlB,GAAuBnB,MAAvB,GAAgCD,KAA5C;AACH;;AACD,WAAO,IAAP;AACH;;AAEDU,EAAAA,gBAAgB,GAAG;AACf,SAAKc,UAAL,GAAkB,CAAlB;AACA,WAAO,IAAP;AACH;;AAEDb,EAAAA,iBAAiB,CAACc,CAAD,EAAIC,CAAJ,EAAO;AACpB,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,WAAO,IAAP;AACH;;AAED,MAAIC,KAAJ,GAAY;AACR,WAAO,KAAKC,MAAZ;AACH;;AAED,MAAID,KAAJ,CAAUE,KAAV,EAAiB;AACb,SAAKD,MAAL,GAAcC,KAAd;AACA,SAAKC,UAAL,GAAkBD,KAAK,GAAG,CAA1B;AACH;;AAED,MAAIE,MAAJ,GAAa;AACT,WAAO,KAAKC,OAAZ;AACH;;AAED,MAAID,MAAJ,CAAWF,KAAX,EAAkB;AACd,SAAKG,OAAL,GAAeH,KAAf;AACA,SAAKI,WAAL,GAAmBJ,KAAK,GAAG,CAA3B;AACH;;AAEDV,EAAAA,WAAW,CAACQ,KAAD,EAAQI,MAAR,EAAgB;AACvB,SAAKJ,KAAL,GAAaA,KAAb;AACA,SAAKI,MAAL,GAAcA,MAAd;AACA,WAAO,IAAP;AACH;;AAED,MAAId,SAAJ,GAAgB;AACZ,WAAO,KAAKU,KAAZ;AACH;;AAED,MAAIV,SAAJ,CAAcY,KAAd,EAAqB;AACjB,SAAKF,KAAL,GAAaE,KAAb;AACH;;AAED,MAAIX,UAAJ,GAAiB;AACb,WAAO,KAAKa,MAAZ;AACH;;AAED,MAAIG,UAAJ,CAAeL,KAAf,EAAsB;AAClB,SAAKE,MAAL,GAAcF,KAAd;AACH;;AA1FS;;AA6Fd,IAAIM,OAAO,GAAG;AACVC,EAAAA,UAAU,EAAE3C,UADF;AAEV4C,EAAAA,SAAS,EAAE3C,SAFD;AAGV4C,EAAAA,SAAS,EAAE3C,SAHD;AAIV4C,EAAAA,SAAS,EAAE3C,SAJD;AAKV4C,EAAAA,QAAQ,EAAE3C,QALA;AAMV4C,EAAAA,QAAQ,EAAE3C;AANA,CAAd;AAQA4C,MAAM,CAACC,MAAP,CACIvC,OAAO,CAACwC,SADZ,EAEIT,OAFJ;AAKA,MAAMd,WAAW,GAAG;AAChB,OAAK,CADW;AAEhB,OAAK;AAFW,CAApB;AAKA,MAAMC,YAAY,GAAG;AACjB,UAAQ,CADS;AAEjB,SAAO;AAFU,CAArB;AAKA,eAAelB,OAAf","sourcesContent":["// https://www.redblobgames.com/grids/hexagons/\r\n\r\nimport GetCellWidth from '../../../geom/hexagon/Width.js';\r\nimport GetCellHeight from '../../../geom/hexagon/Height.js';\r\nimport CONST from './const.js';\r\nimport GetWorldXY from './GetWorldXY.js';\r\nimport GetWorldX from './GetWorldX.js';\r\nimport GetWorldY from './GetWorldY.js';\r\nimport GetTileXY from './GetTileXY.js';\r\nimport GetTileX from './GetTileX.js';\r\nimport GetTileY from './GetTileY.js';\r\nimport GetValue from '../../object/GetValue.js';\r\n\r\nconst ODD_R = CONST.ODD_R;\r\nconst EVEN_R = CONST.EVEN_R;\r\nconst ODD_Q = CONST.ODD_Q;\r\nconst EVEN_Q = CONST.EVEN_Q;\r\n\r\nclass Hexagon {\r\n    constructor(config) {\r\n        this.resetFromJSON(config);\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        this.setType(GetValue(o, 'staggeraxis', 1), GetValue(o, 'staggerindex', 1));\r\n        this.setDirectionMode();\r\n        this.setOriginPosition(GetValue(o, 'x', 0), GetValue(o, 'y', 0));\r\n        this.size = GetValue(o, 'size', undefined);\r\n        if (this.size !== undefined) {\r\n            var hexagon = {\r\n                size: this.size,\r\n                type: this.staggeraxis\r\n            }\r\n            var cellWidth = GetCellWidth(hexagon);\r\n            var cellHeight = GetCellHeight(hexagon);\r\n            this.setCellSize(cellWidth, cellHeight);\r\n        } else {\r\n            this.setCellSize(GetValue(o, 'cellWidth', 0), GetValue(o, 'cellHeight', 0));\r\n        }\r\n    }\r\n\r\n    setType(staggeraxis, staggerindex) {\r\n        if (typeof (staggeraxis) === 'string') {\r\n            staggeraxis = STAGGERAXIS[staggeraxis]\r\n        }\r\n        if (typeof (staggerindex) === 'string') {\r\n            staggerindex = STAGGERINDEX[staggerindex]\r\n        }\r\n        this.staggeraxis = staggeraxis; // 0|y(flat), or 1|x(pointy)\r\n        this.staggerindex = staggerindex; // even, or odd\r\n\r\n        if (staggeraxis === 0) { // flat\r\n            this.mode = (staggerindex === 0) ? EVEN_Q : ODD_Q;\r\n        } else { // pointy\r\n            this.mode = (staggerindex === 0) ? EVEN_R : ODD_R;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setDirectionMode() {\r\n        this.directions = 6;\r\n        return this;\r\n    }\r\n\r\n    setOriginPosition(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value) {\r\n        this._width = value;\r\n        this._halfWidth = value / 2;\r\n    }\r\n\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    set height(value) {\r\n        this._height = value;\r\n        this._halfHeight = value / 2;\r\n    }\r\n\r\n    setCellSize(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    get cellWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    set cellWidth(value) {\r\n        this.width = value;\r\n    }\r\n\r\n    get cellHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    set cellHieght(value) {\r\n        this.height = value;\r\n    }\r\n}\r\n\r\nvar methods = {\r\n    getWorldXY: GetWorldXY,\r\n    getWorldX: GetWorldX,\r\n    getWorldY: GetWorldY,\r\n    getTileXY: GetTileXY,\r\n    getTileX: GetTileX,\r\n    getTileY: GetTileY,\r\n}\r\nObject.assign(\r\n    Hexagon.prototype,\r\n    methods\r\n);\r\n\r\nconst STAGGERAXIS = {\r\n    'y': 0,\r\n    'x': 1\r\n};\r\n\r\nconst STAGGERINDEX = {\r\n    'even': 0,\r\n    'odd': 1\r\n}\r\n\r\nexport default Hexagon;"]},"metadata":{},"sourceType":"module"}